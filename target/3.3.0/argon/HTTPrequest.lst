
/Users/darwinwang/Documents/IoT/HTTPrequest/target/3.3.0/argon/HTTPrequest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000075d0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb5f0  000bb5f0  0000b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bb614  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  2003e3f0  000bb618  0001e3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000021c  2003e5d8  2003e5d8  0002e5d8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bb7fc  000bb7fc  0002b7fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bb824  000bb824  0002b824  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013a45e  00000000  00000000  0002b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000165c1  00000000  00000000  00165c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00046b8c  00000000  00000000  0017c247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000033f8  00000000  00000000  001c2dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b1f8  00000000  00000000  001c61cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004003c  00000000  00000000  001d13c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004ead9  00000000  00000000  002113ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137a58  00000000  00000000  0025fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a180  00000000  00000000  00397930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fa18 	bl	b8466 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fa20 	bl	b8482 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e3f0 	.word	0x2003e3f0
   b404c:	000bb618 	.word	0x000bb618
   b4050:	2003e5d4 	.word	0x2003e5d4
   b4054:	2003e5d8 	.word	0x2003e5d8
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fa99 	bl	b7598 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bb5cc 	.word	0x000bb5cc
   b4080:	000bb5f0 	.word	0x000bb5f0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b866 	b.w	b4154 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f879 	bl	b4180 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 ba39 	b.w	b7508 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 b933 	b.w	b6300 <malloc>

000b409a <_Znaj>:
   b409a:	f002 b931 	b.w	b6300 <malloc>

000b409e <_ZdaPv>:
   b409e:	f002 b937 	b.w	b6310 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f002 b935 	b.w	b6310 <free>
	...

000b40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f002 f87a 	bl	b61a8 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000b5e69 	.word	0x000b5e69
   b40bc:	000ba380 	.word	0x000ba380

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_Z8callbackPcPhj>:
void callback(char *topic, byte *payload, unsigned int length);

MQTT client("lab.thewcl.com", 1883, callback);

void callback(char *topic, byte *payload, unsigned int length)
{
   b40d0:	b5b0      	push	{r4, r5, r7, lr}
  char p[length + 1];
   b40d2:	f102 0308 	add.w	r3, r2, #8
   b40d6:	f023 0307 	bic.w	r3, r3, #7
{
   b40da:	b084      	sub	sp, #16
   b40dc:	af00      	add	r7, sp, #0
  char p[length + 1];
   b40de:	ebad 0d03 	sub.w	sp, sp, r3
{
   b40e2:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   b40e4:	4668      	mov	r0, sp
   b40e6:	f004 f9be 	bl	b8466 <memcpy>
  p[length] = NULL;
   b40ea:	2500      	movs	r5, #0
  String s = p;
   b40ec:	4669      	mov	r1, sp
   b40ee:	4638      	mov	r0, r7
  p[length] = NULL;
   b40f0:	f80d 5004 	strb.w	r5, [sp, r4]
  String s = p;
   b40f4:	f002 fd8d 	bl	b6c12 <_ZN6StringC1EPK19__FlashStringHelper>
  double value = s.toFloat();
   b40f8:	4638      	mov	r0, r7
   b40fa:	f002 fdb1 	bl	b6c60 <_ZNK6String7toFloatEv>
   b40fe:	ee10 0a10 	vmov	r0, s0
   b4102:	f003 fde9 	bl	b7cd8 <__aeabi_f2d>
  
  if (coords == true) {
   b4106:	4b09      	ldr	r3, [pc, #36]	; (b412c <_Z8callbackPcPhj+0x5c>)
   b4108:	781a      	ldrb	r2, [r3, #0]
   b410a:	b14a      	cbz	r2, b4120 <_Z8callbackPcPhj+0x50>
    //Serial.println("Longitude");
    lon = value;
   b410c:	4a08      	ldr	r2, [pc, #32]	; (b4130 <_Z8callbackPcPhj+0x60>)
    coords = false;
   b410e:	701d      	strb	r5, [r3, #0]
    lon = value;
   b4110:	e9c2 0100 	strd	r0, r1, [r2]
  String s = p;
   b4114:	4638      	mov	r0, r7
   b4116:	f002 fd31 	bl	b6b7c <_ZN6StringD1Ev>





}
   b411a:	3710      	adds	r7, #16
   b411c:	46bd      	mov	sp, r7
   b411e:	bdb0      	pop	{r4, r5, r7, pc}
    coords = true;
   b4120:	2201      	movs	r2, #1
   b4122:	701a      	strb	r2, [r3, #0]
    lat = value;
   b4124:	4b03      	ldr	r3, [pc, #12]	; (b4134 <_Z8callbackPcPhj+0x64>)
   b4126:	e9c3 0100 	strd	r0, r1, [r3]
   b412a:	e7f3      	b.n	b4114 <_Z8callbackPcPhj+0x44>
   b412c:	2003e3f0 	.word	0x2003e3f0
   b4130:	2003e6b0 	.word	0x2003e6b0
   b4134:	2003e6a8 	.word	0x2003e6a8

000b4138 <_Z12displaySetupv>:
{
   b4138:	b508      	push	{r3, lr}
    display.clearDisplay();
   b413a:	4805      	ldr	r0, [pc, #20]	; (b4150 <_Z12displaySetupv+0x18>)
   b413c:	f000 fe3e 	bl	b4dbc <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4140:	4803      	ldr	r0, [pc, #12]	; (b4150 <_Z12displaySetupv+0x18>)
   b4142:	2300      	movs	r3, #0
   b4144:	6103      	str	r3, [r0, #16]
}
   b4146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    display.setTextSize(1);
   b414a:	2101      	movs	r1, #1
   b414c:	f000 bc7d 	b.w	b4a4a <_ZN12Adafruit_GFX11setTextSizeEh>
   b4150:	2003e638 	.word	0x2003e638

000b4154 <setup>:

void setup()
{
   b4154:	b508      	push	{r3, lr}
    Serial.begin(9600);
   b4156:	f003 f951 	bl	b73fc <_Z16_fetch_usbserialv>
   b415a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b415e:	f003 f941 	bl	b73e4 <_ZN9USBSerial5beginEl>
    display.setup();
   b4162:	4806      	ldr	r0, [pc, #24]	; (b417c <setup+0x28>)
   b4164:	f001 fe0e 	bl	b5d84 <_ZN16OledWingAdafruit5setupEv>
    displaySetup();
   b4168:	f7ff ffe6 	bl	b4138 <_Z12displaySetupv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b416c:	4803      	ldr	r0, [pc, #12]	; (b417c <setup+0x28>)
   b416e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4172:	6143      	str	r3, [r0, #20]
    display.setTextColor(WHITE);
    display.display();
}
   b4174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    display.display();
   b4178:	f001 b88e 	b.w	b5298 <_ZN16Adafruit_SSD13067displayEv>
   b417c:	2003e638 	.word	0x2003e638

000b4180 <loop>:

void loop()
{
   b4180:	b51f      	push	{r0, r1, r2, r3, r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4182:	f001 fe79 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
   b4186:	4604      	mov	r4, r0
    unsigned long currentMillis = millis();

    display.loop();
   b4188:	4826      	ldr	r0, [pc, #152]	; (b4224 <loop+0xa4>)
   b418a:	f001 fe24 	bl	b5dd6 <_ZN16OledWingAdafruit4loopEv>
    
    
    if (client.isConnected())
   b418e:	4826      	ldr	r0, [pc, #152]	; (b4228 <loop+0xa8>)
   b4190:	f001 fa8e 	bl	b56b0 <_ZN4MQTT11isConnectedEv>
   b4194:	2800      	cmp	r0, #0
   b4196:	d038      	beq.n	b420a <loop+0x8a>
    {
        client.subscribe("longitude");
   b4198:	4924      	ldr	r1, [pc, #144]	; (b422c <loop+0xac>)
   b419a:	4823      	ldr	r0, [pc, #140]	; (b4228 <loop+0xa8>)
   b419c:	f001 fda7 	bl	b5cee <_ZN4MQTT9subscribeEPKc>
        client.loop();
   b41a0:	4821      	ldr	r0, [pc, #132]	; (b4228 <loop+0xa8>)
   b41a2:	f001 fc5c 	bl	b5a5e <_ZN4MQTT4loopEv>
        
        client.subscribe("latitude");
   b41a6:	4922      	ldr	r1, [pc, #136]	; (b4230 <loop+0xb0>)
   b41a8:	481f      	ldr	r0, [pc, #124]	; (b4228 <loop+0xa8>)
   b41aa:	f001 fda0 	bl	b5cee <_ZN4MQTT9subscribeEPKc>
        client.loop();
   b41ae:	481e      	ldr	r0, [pc, #120]	; (b4228 <loop+0xa8>)
   b41b0:	f001 fc55 	bl	b5a5e <_ZN4MQTT4loopEv>
        
        
        if (currentMillis - previousMillis > interval)
   b41b4:	4a1f      	ldr	r2, [pc, #124]	; (b4234 <loop+0xb4>)
   b41b6:	4920      	ldr	r1, [pc, #128]	; (b4238 <loop+0xb8>)
   b41b8:	6813      	ldr	r3, [r2, #0]
   b41ba:	6809      	ldr	r1, [r1, #0]
   b41bc:	1ae3      	subs	r3, r4, r3
   b41be:	428b      	cmp	r3, r1
   b41c0:	d92d      	bls.n	b421e <loop+0x9e>
        {
            previousMillis = currentMillis;
            client.publish("main", "a.request");
   b41c2:	491e      	ldr	r1, [pc, #120]	; (b423c <loop+0xbc>)
            previousMillis = currentMillis;
   b41c4:	6014      	str	r4, [r2, #0]
            client.publish("main", "a.request");
   b41c6:	4818      	ldr	r0, [pc, #96]	; (b4228 <loop+0xa8>)
   b41c8:	4a1d      	ldr	r2, [pc, #116]	; (b4240 <loop+0xc0>)
   b41ca:	f001 fbec 	bl	b59a6 <_ZN4MQTT7publishEPKcS1_>

            displaySetup();
   b41ce:	f7ff ffb3 	bl	b4138 <_Z12displaySetupv>
            display.print("Lon: ");
   b41d2:	491c      	ldr	r1, [pc, #112]	; (b4244 <loop+0xc4>)
   b41d4:	4813      	ldr	r0, [pc, #76]	; (b4224 <loop+0xa4>)
   b41d6:	f002 fae3 	bl	b67a0 <_ZN5Print5printEPKc>
            display.println(lon);
   b41da:	4b1b      	ldr	r3, [pc, #108]	; (b4248 <loop+0xc8>)
   b41dc:	4811      	ldr	r0, [pc, #68]	; (b4224 <loop+0xa4>)
   b41de:	ed93 0b00 	vldr	d0, [r3]
   b41e2:	2102      	movs	r1, #2
   b41e4:	f002 fbd6 	bl	b6994 <_ZN5Print7printlnEdi>
            display.print("Lat: ");
   b41e8:	4918      	ldr	r1, [pc, #96]	; (b424c <loop+0xcc>)
   b41ea:	480e      	ldr	r0, [pc, #56]	; (b4224 <loop+0xa4>)
   b41ec:	f002 fad8 	bl	b67a0 <_ZN5Print5printEPKc>
            display.println(lat);
   b41f0:	4b17      	ldr	r3, [pc, #92]	; (b4250 <loop+0xd0>)
   b41f2:	480c      	ldr	r0, [pc, #48]	; (b4224 <loop+0xa4>)
   b41f4:	ed93 0b00 	vldr	d0, [r3]
   b41f8:	2102      	movs	r1, #2
   b41fa:	f002 fbcb 	bl	b6994 <_ZN5Print7printlnEdi>
            display.display();
   b41fe:	4809      	ldr	r0, [pc, #36]	; (b4224 <loop+0xa4>)
        
    } else {
    client.connect(System.deviceID());
    }

   b4200:	b004      	add	sp, #16
   b4202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            display.display();
   b4206:	f001 b847 	b.w	b5298 <_ZN16Adafruit_SSD13067displayEv>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b420a:	4668      	mov	r0, sp
   b420c:	f002 f808 	bl	b6220 <spark_deviceID>
    client.connect(System.deviceID());
   b4210:	9900      	ldr	r1, [sp, #0]
   b4212:	4805      	ldr	r0, [pc, #20]	; (b4228 <loop+0xa8>)
   b4214:	f001 fb3c 	bl	b5890 <_ZN4MQTT7connectEPKc>
   b4218:	4668      	mov	r0, sp
   b421a:	f002 fcaf 	bl	b6b7c <_ZN6StringD1Ev>
   b421e:	b004      	add	sp, #16
   b4220:	bd10      	pop	{r4, pc}
   b4222:	bf00      	nop
   b4224:	2003e638 	.word	0x2003e638
   b4228:	2003e5d8 	.word	0x2003e5d8
   b422c:	000ba395 	.word	0x000ba395
   b4230:	000ba39f 	.word	0x000ba39f
   b4234:	2003e6b8 	.word	0x2003e6b8
   b4238:	2003e3f4 	.word	0x2003e3f4
   b423c:	000ba3b2 	.word	0x000ba3b2
   b4240:	000ba3a8 	.word	0x000ba3a8
   b4244:	000ba3b7 	.word	0x000ba3b7
   b4248:	2003e6b0 	.word	0x2003e6b0
   b424c:	000ba3bd 	.word	0x000ba3bd
   b4250:	2003e6a8 	.word	0x2003e6a8

000b4254 <_GLOBAL__sub_I_display>:
   b4254:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED)
   b4256:	2100      	movs	r1, #0
   b4258:	2001      	movs	r0, #1
   b425a:	f001 ffc5 	bl	b61e8 <system_thread_set_state>
OledWingAdafruit display;
   b425e:	2107      	movs	r1, #7
   b4260:	4807      	ldr	r0, [pc, #28]	; (b4280 <_GLOBAL__sub_I_display+0x2c>)
   b4262:	f001 fd61 	bl	b5d28 <_ZN16OledWingAdafruitC1Ei>
MQTT client("lab.thewcl.com", 1883, callback);
   b4266:	2300      	movs	r3, #0
   b4268:	9300      	str	r3, [sp, #0]
   b426a:	4906      	ldr	r1, [pc, #24]	; (b4284 <_GLOBAL__sub_I_display+0x30>)
   b426c:	4b06      	ldr	r3, [pc, #24]	; (b4288 <_GLOBAL__sub_I_display+0x34>)
   b426e:	4807      	ldr	r0, [pc, #28]	; (b428c <_GLOBAL__sub_I_display+0x38>)
   b4270:	f240 725b 	movw	r2, #1883	; 0x75b
   b4274:	f001 f940 	bl	b54f8 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b4278:	b003      	add	sp, #12
   b427a:	f85d fb04 	ldr.w	pc, [sp], #4
   b427e:	bf00      	nop
   b4280:	2003e638 	.word	0x2003e638
   b4284:	000ba3c3 	.word	0x000ba3c3
   b4288:	000b40d1 	.word	0x000b40d1
   b428c:	2003e5d8 	.word	0x2003e5d8

000b4290 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4294:	b085      	sub	sp, #20
   b4296:	461f      	mov	r7, r3
   b4298:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b429c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b42a0:	eba8 0902 	sub.w	r9, r8, r2
   b42a4:	eba7 0a01 	sub.w	sl, r7, r1
   b42a8:	f1b9 0f00 	cmp.w	r9, #0
   b42ac:	bfb8      	it	lt
   b42ae:	f1c9 0900 	rsblt	r9, r9, #0
   b42b2:	f1ba 0f00 	cmp.w	sl, #0
   b42b6:	bfb8      	it	lt
   b42b8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b42bc:	45d1      	cmp	r9, sl
        uint16_t color) {
   b42be:	4683      	mov	fp, r0
   b42c0:	460c      	mov	r4, r1
   b42c2:	4615      	mov	r5, r2
    if (steep) {
   b42c4:	dd04      	ble.n	b42d0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b42c6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b42c8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b42ca:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b42cc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b42ce:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b42d0:	42bc      	cmp	r4, r7
   b42d2:	dd05      	ble.n	b42e0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b42d4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b42d6:	4645      	mov	r5, r8
   b42d8:	4690      	mov	r8, r2
    if (x0 > x1) {
   b42da:	4622      	mov	r2, r4
   b42dc:	463c      	mov	r4, r7
   b42de:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b42e0:	1b3e      	subs	r6, r7, r4
   b42e2:	b2b2      	uxth	r2, r6
   b42e4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b42e6:	eba8 0205 	sub.w	r2, r8, r5
   b42ea:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b42ee:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b42f2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b42f6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b42fa:	4545      	cmp	r5, r8
   b42fc:	bfb4      	ite	lt
   b42fe:	2201      	movlt	r2, #1
   b4300:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4304:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4306:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4308:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b430a:	42bc      	cmp	r4, r7
   b430c:	dc1c      	bgt.n	b4348 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b430e:	f8db 2000 	ldr.w	r2, [fp]
   b4312:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4314:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4316:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b431a:	bfc7      	ittee	gt
   b431c:	4629      	movgt	r1, r5
   b431e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4320:	462a      	movle	r2, r5
   b4322:	4621      	movle	r1, r4
   b4324:	4658      	mov	r0, fp
   b4326:	47c0      	blx	r8
        }
        err -= dy;
   b4328:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b432a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b432c:	1ab6      	subs	r6, r6, r2
   b432e:	b2b1      	uxth	r1, r6
   b4330:	b236      	sxth	r6, r6
        if (err < 0) {
   b4332:	2e00      	cmp	r6, #0
   b4334:	da05      	bge.n	b4342 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4336:	9a02      	ldr	r2, [sp, #8]
   b4338:	4415      	add	r5, r2
            err += dx;
   b433a:	9a00      	ldr	r2, [sp, #0]
   b433c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b433e:	b22d      	sxth	r5, r5
            err += dx;
   b4340:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4342:	3401      	adds	r4, #1
   b4344:	b224      	sxth	r4, r4
   b4346:	e7e0      	b.n	b430a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4348:	b005      	add	sp, #20
   b434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b434e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b434e:	4770      	bx	lr

000b4350 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4350:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4352:	6804      	ldr	r4, [r0, #0]
   b4354:	6924      	ldr	r4, [r4, #16]
   b4356:	46a4      	mov	ip, r4
}
   b4358:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b435c:	4760      	bx	ip

000b435e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b435e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4360:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4362:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4366:	9502      	str	r5, [sp, #8]
   b4368:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b436a:	46a4      	mov	ip, r4
}
   b436c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b436e:	4760      	bx	ip

000b4370 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4370:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4372:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4374:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4378:	9502      	str	r5, [sp, #8]
   b437a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b437c:	46a4      	mov	ip, r4
}
   b437e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4380:	4760      	bx	ip

000b4382 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4382:	b470      	push	{r4, r5, r6}
   b4384:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4388:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b438c:	6804      	ldr	r4, [r0, #0]
   b438e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4392:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4394:	46a4      	mov	ip, r4
}
   b4396:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4398:	4760      	bx	ip

000b439a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b439a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b439e:	461c      	mov	r4, r3
    startWrite();
   b43a0:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b43a2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b43a6:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b43a8:	4605      	mov	r5, r0
   b43aa:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b43ac:	3c01      	subs	r4, #1
   b43ae:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b43b0:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b43b2:	b224      	sxth	r4, r4
    startWrite();
   b43b4:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b43b6:	682b      	ldr	r3, [r5, #0]
   b43b8:	f8cd 8004 	str.w	r8, [sp, #4]
   b43bc:	9400      	str	r4, [sp, #0]
   b43be:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b43c0:	4628      	mov	r0, r5
   b43c2:	463b      	mov	r3, r7
   b43c4:	4632      	mov	r2, r6
   b43c6:	4639      	mov	r1, r7
   b43c8:	47a0      	blx	r4
    endWrite();
   b43ca:	682b      	ldr	r3, [r5, #0]
   b43cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b43ce:	4628      	mov	r0, r5
}
   b43d0:	b002      	add	sp, #8
   b43d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b43d6:	4718      	bx	r3

000b43d8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b43d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b43dc:	461d      	mov	r5, r3
    startWrite();
   b43de:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b43e0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b43e4:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b43e6:	4604      	mov	r4, r0
   b43e8:	4617      	mov	r7, r2
   b43ea:	460e      	mov	r6, r1
    startWrite();
   b43ec:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b43ee:	e9cd 7800 	strd	r7, r8, [sp]
   b43f2:	6822      	ldr	r2, [r4, #0]
   b43f4:	1e6b      	subs	r3, r5, #1
   b43f6:	4433      	add	r3, r6
   b43f8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b43fa:	4620      	mov	r0, r4
   b43fc:	b21b      	sxth	r3, r3
   b43fe:	463a      	mov	r2, r7
   b4400:	4631      	mov	r1, r6
   b4402:	47a8      	blx	r5
    endWrite();
   b4404:	6823      	ldr	r3, [r4, #0]
   b4406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4408:	4620      	mov	r0, r4
}
   b440a:	b002      	add	sp, #8
   b440c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4410:	4718      	bx	r3

000b4412 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4412:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4416:	461e      	mov	r6, r3
    startWrite();
   b4418:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b441a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b441e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4420:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4424:	460c      	mov	r4, r1
   b4426:	4605      	mov	r5, r0
   b4428:	4617      	mov	r7, r2
    startWrite();
   b442a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b442c:	4426      	add	r6, r4
   b442e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4430:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4432:	da0b      	bge.n	b444c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4434:	f8cd 8000 	str.w	r8, [sp]
   b4438:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b443c:	4621      	mov	r1, r4
   b443e:	464b      	mov	r3, r9
   b4440:	463a      	mov	r2, r7
   b4442:	4628      	mov	r0, r5
   b4444:	3401      	adds	r4, #1
   b4446:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4448:	b224      	sxth	r4, r4
   b444a:	e7f0      	b.n	b442e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b444e:	4628      	mov	r0, r5
}
   b4450:	b002      	add	sp, #8
   b4452:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4456:	4718      	bx	r3

000b4458 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4458:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b445a:	6802      	ldr	r2, [r0, #0]
   b445c:	9101      	str	r1, [sp, #4]
   b445e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4462:	9100      	str	r1, [sp, #0]
   b4464:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4466:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b446a:	2200      	movs	r2, #0
   b446c:	4611      	mov	r1, r2
   b446e:	47a0      	blx	r4
}
   b4470:	b002      	add	sp, #8
   b4472:	bd10      	pop	{r4, pc}

000b4474 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4478:	4299      	cmp	r1, r3
        uint16_t color) {
   b447a:	4616      	mov	r6, r2
   b447c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4480:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4484:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4486:	4680      	mov	r8, r0
   b4488:	460d      	mov	r5, r1
   b448a:	461c      	mov	r4, r3
    if(x0 == x1){
   b448c:	d113      	bne.n	b44b6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b448e:	42be      	cmp	r6, r7
   b4490:	bfc8      	it	gt
   b4492:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4494:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4498:	bfc4      	itt	gt
   b449a:	463e      	movgt	r6, r7
   b449c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b449e:	1c7b      	adds	r3, r7, #1
   b44a0:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b44a2:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b44a4:	b21b      	sxth	r3, r3
   b44a6:	4632      	mov	r2, r6
   b44a8:	4629      	mov	r1, r5
   b44aa:	4640      	mov	r0, r8
   b44ac:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b44ae:	b003      	add	sp, #12
   b44b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b44b4:	4760      	bx	ip
    } else if(y0 == y1){
   b44b6:	42be      	cmp	r6, r7
   b44b8:	d10a      	bne.n	b44d0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b44ba:	4299      	cmp	r1, r3
   b44bc:	bfc2      	ittt	gt
   b44be:	460b      	movgt	r3, r1
   b44c0:	4625      	movgt	r5, r4
   b44c2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b44c4:	1c63      	adds	r3, r4, #1
   b44c6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b44ca:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b44cc:	1b5b      	subs	r3, r3, r5
   b44ce:	e7e9      	b.n	b44a4 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b44d0:	6953      	ldr	r3, [r2, #20]
   b44d2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b44d4:	e9cd 7900 	strd	r7, r9, [sp]
   b44d8:	f8d8 3000 	ldr.w	r3, [r8]
   b44dc:	4640      	mov	r0, r8
   b44de:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b44e0:	4632      	mov	r2, r6
   b44e2:	4623      	mov	r3, r4
   b44e4:	4629      	mov	r1, r5
   b44e6:	47b8      	blx	r7
        endWrite();
   b44e8:	f8d8 3000 	ldr.w	r3, [r8]
   b44ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44ee:	4640      	mov	r0, r8
}
   b44f0:	b003      	add	sp, #12
   b44f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b44f6:	4718      	bx	r3

000b44f8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b44f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b44fc:	461d      	mov	r5, r3
    startWrite();
   b44fe:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4500:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4504:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4506:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b450a:	4604      	mov	r4, r0
   b450c:	460f      	mov	r7, r1
   b450e:	4616      	mov	r6, r2
    startWrite();
   b4510:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4512:	6823      	ldr	r3, [r4, #0]
   b4514:	f8cd 8000 	str.w	r8, [sp]
   b4518:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b451c:	4632      	mov	r2, r6
   b451e:	462b      	mov	r3, r5
   b4520:	4639      	mov	r1, r7
   b4522:	4620      	mov	r0, r4
   b4524:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4526:	6823      	ldr	r3, [r4, #0]
   b4528:	f8cd 8000 	str.w	r8, [sp]
   b452c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4530:	4432      	add	r2, r6
   b4532:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4536:	4639      	mov	r1, r7
   b4538:	462b      	mov	r3, r5
   b453a:	4620      	mov	r0, r4
   b453c:	b212      	sxth	r2, r2
   b453e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4540:	6823      	ldr	r3, [r4, #0]
   b4542:	f8cd 8000 	str.w	r8, [sp]
   b4546:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b454a:	4632      	mov	r2, r6
   b454c:	464b      	mov	r3, r9
   b454e:	4639      	mov	r1, r7
   b4550:	4620      	mov	r0, r4
   b4552:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4554:	1e6b      	subs	r3, r5, #1
   b4556:	19d9      	adds	r1, r3, r7
   b4558:	6823      	ldr	r3, [r4, #0]
   b455a:	f8cd 8000 	str.w	r8, [sp]
   b455e:	6a1d      	ldr	r5, [r3, #32]
   b4560:	4620      	mov	r0, r4
   b4562:	464b      	mov	r3, r9
   b4564:	4632      	mov	r2, r6
   b4566:	b209      	sxth	r1, r1
   b4568:	47a8      	blx	r5
    endWrite();
   b456a:	6823      	ldr	r3, [r4, #0]
   b456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b456e:	4620      	mov	r0, r4
}
   b4570:	b002      	add	sp, #8
   b4572:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4576:	4718      	bx	r3

000b4578 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4578:	4770      	bx	lr

000b457a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b457a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b457e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4582:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4584:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4586:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b458a:	bf59      	ittee	pl
   b458c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b458e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4590:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4592:	81c3      	strhmi	r3, [r0, #14]
}
   b4594:	4770      	bx	lr
	...

000b4598 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4598:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b459a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b459c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b459e:	4a07      	ldr	r2, [pc, #28]	; (b45bc <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b45a0:	4d07      	ldr	r5, [pc, #28]	; (b45c0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b45a2:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b45a4:	2400      	movs	r4, #0
    _width    = WIDTH;
   b45a6:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b45a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b45ac:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b45b0:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b45b2:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b45b4:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b45b6:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b45b8:	6204      	str	r4, [r0, #32]
}
   b45ba:	bd30      	pop	{r4, r5, pc}
   b45bc:	01000101 	.word	0x01000101
   b45c0:	000ba8dc 	.word	0x000ba8dc

000b45c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b45c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b45c8:	b089      	sub	sp, #36	; 0x24
   b45ca:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b45ce:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b45d0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b45d4:	9304      	str	r3, [sp, #16]
   b45d6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b45da:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b45dc:	9305      	str	r3, [sp, #20]
   b45de:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b45e2:	4604      	mov	r4, r0
    startWrite();
   b45e4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b45e6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b45ea:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b45ee:	bf48      	it	mi
   b45f0:	f108 020e 	addmi.w	r2, r8, #14
   b45f4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b45f8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b45fa:	4635      	mov	r5, r6
   b45fc:	9b03      	ldr	r3, [sp, #12]
   b45fe:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4600:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4604:	189a      	adds	r2, r3, r2
   b4606:	9b05      	ldr	r3, [sp, #20]
   b4608:	428b      	cmp	r3, r1
   b460a:	b212      	sxth	r2, r2
   b460c:	dd27      	ble.n	b465e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b460e:	9b04      	ldr	r3, [sp, #16]
   b4610:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4612:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4616:	9306      	str	r3, [sp, #24]
   b4618:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b461c:	4580      	cmp	r8, r0
   b461e:	fa1f f189 	uxth.w	r1, r9
   b4622:	dd17      	ble.n	b4654 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4624:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4626:	bf05      	ittet	eq
   b4628:	9b06      	ldreq	r3, [sp, #24]
   b462a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b462c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b462e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b4630:	bf18      	it	ne
   b4632:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4634:	062b      	lsls	r3, r5, #24
   b4636:	d50a      	bpl.n	b464e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4638:	9b02      	ldr	r3, [sp, #8]
   b463a:	6820      	ldr	r0, [r4, #0]
   b463c:	9207      	str	r2, [sp, #28]
   b463e:	4419      	add	r1, r3
   b4640:	6983      	ldr	r3, [r0, #24]
   b4642:	b209      	sxth	r1, r1
   b4644:	461f      	mov	r7, r3
   b4646:	4620      	mov	r0, r4
   b4648:	4653      	mov	r3, sl
   b464a:	47b8      	blx	r7
   b464c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b464e:	f109 0901 	add.w	r9, r9, #1
   b4652:	e7e1      	b.n	b4618 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4654:	9b01      	ldr	r3, [sp, #4]
   b4656:	3301      	adds	r3, #1
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	445e      	add	r6, fp
   b465c:	e7ce      	b.n	b45fc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b465e:	6823      	ldr	r3, [r4, #0]
   b4660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4662:	4620      	mov	r0, r4
}
   b4664:	b009      	add	sp, #36	; 0x24
   b4666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b466a:	4718      	bx	r3

000b466c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4670:	ed2d 8b02 	vpush	{d8}
   b4674:	b091      	sub	sp, #68	; 0x44
   b4676:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4678:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b467a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b467e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4682:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4686:	9103      	str	r1, [sp, #12]
   b4688:	461f      	mov	r7, r3
   b468a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b468e:	9304      	str	r3, [sp, #16]
   b4690:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4692:	2a00      	cmp	r2, #0
   b4694:	f040 80c5 	bne.w	b4822 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4698:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b469c:	428b      	cmp	r3, r1
   b469e:	f340 814c 	ble.w	b493a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b46a2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b46a6:	42b3      	cmp	r3, r6
   b46a8:	f340 8147 	ble.w	b493a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b46ac:	2306      	movs	r3, #6
   b46ae:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b46b2:	2b00      	cmp	r3, #0
   b46b4:	f340 8141 	ble.w	b493a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b46b8:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b46bc:	2b00      	cmp	r3, #0
   b46be:	f340 813c 	ble.w	b493a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b46c2:	7f03      	ldrb	r3, [r0, #28]
   b46c4:	b91b      	cbnz	r3, b46ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b46c6:	2faf      	cmp	r7, #175	; 0xaf
   b46c8:	bf84      	itt	hi
   b46ca:	3701      	addhi	r7, #1
   b46cc:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b46ce:	f8db 3000 	ldr.w	r3, [fp]
   b46d2:	4658      	mov	r0, fp
   b46d4:	695b      	ldr	r3, [r3, #20]
   b46d6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b46d8:	2205      	movs	r2, #5
   b46da:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b46dc:	2200      	movs	r2, #0
   b46de:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b46e0:	4a98      	ldr	r2, [pc, #608]	; (b4944 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b46e2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b46e6:	18d3      	adds	r3, r2, r3
   b46e8:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b46ea:	b2b3      	uxth	r3, r6
   b46ec:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b46ee:	9a05      	ldr	r2, [sp, #20]
   b46f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b46f2:	5c9b      	ldrb	r3, [r3, r2]
   b46f4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b46f6:	b2ab      	uxth	r3, r5
   b46f8:	930b      	str	r3, [sp, #44]	; 0x2c
   b46fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b46fe:	9308      	str	r3, [sp, #32]
   b4700:	9b03      	ldr	r3, [sp, #12]
   b4702:	fb02 f905 	mul.w	r9, r2, r5
   b4706:	fa19 f983 	uxtah	r9, r9, r3
   b470a:	fa0f f389 	sxth.w	r3, r9
   b470e:	ee08 3a10 	vmov	s16, r3
   b4712:	2308      	movs	r3, #8
   b4714:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4716:	9b03      	ldr	r3, [sp, #12]
   b4718:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b471c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4720:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4724:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4726:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b472a:	07d2      	lsls	r2, r2, #31
   b472c:	d552      	bpl.n	b47d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b472e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4730:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4734:	d13e      	bne.n	b47b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4736:	2c01      	cmp	r4, #1
   b4738:	d13c      	bne.n	b47b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b473a:	699b      	ldr	r3, [r3, #24]
   b473c:	9906      	ldr	r1, [sp, #24]
   b473e:	461f      	mov	r7, r3
   b4740:	9b04      	ldr	r3, [sp, #16]
   b4742:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4744:	b212      	sxth	r2, r2
   b4746:	4651      	mov	r1, sl
   b4748:	4658      	mov	r0, fp
   b474a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b474c:	f109 0301 	add.w	r3, r9, #1
   b4750:	fa4f f983 	sxtb.w	r9, r3
   b4754:	9b07      	ldr	r3, [sp, #28]
   b4756:	085b      	lsrs	r3, r3, #1
   b4758:	9307      	str	r3, [sp, #28]
   b475a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b475c:	3b01      	subs	r3, #1
   b475e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4762:	930a      	str	r3, [sp, #40]	; 0x28
   b4764:	d1de      	bne.n	b4724 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4766:	9f05      	ldr	r7, [sp, #20]
   b4768:	3701      	adds	r7, #1
   b476a:	b27b      	sxtb	r3, r7
   b476c:	9305      	str	r3, [sp, #20]
   b476e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4770:	3b01      	subs	r3, #1
   b4772:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4776:	9309      	str	r3, [sp, #36]	; 0x24
   b4778:	d1b9      	bne.n	b46ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b477a:	9b04      	ldr	r3, [sp, #16]
   b477c:	4543      	cmp	r3, r8
   b477e:	d00f      	beq.n	b47a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4780:	2d01      	cmp	r5, #1
   b4782:	f8db 3000 	ldr.w	r3, [fp]
   b4786:	d13b      	bne.n	b4800 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4788:	2c01      	cmp	r4, #1
   b478a:	d139      	bne.n	b4800 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b478c:	9908      	ldr	r1, [sp, #32]
   b478e:	f8cd 8000 	str.w	r8, [sp]
   b4792:	3105      	adds	r1, #5
   b4794:	6a1c      	ldr	r4, [r3, #32]
   b4796:	4632      	mov	r2, r6
   b4798:	2308      	movs	r3, #8
   b479a:	b209      	sxth	r1, r1
   b479c:	4658      	mov	r0, fp
   b479e:	47a0      	blx	r4
        endWrite();
   b47a0:	f8db 3000 	ldr.w	r3, [fp]
   b47a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47a6:	4658      	mov	r0, fp
}
   b47a8:	b011      	add	sp, #68	; 0x44
   b47aa:	ecbd 8b02 	vpop	{d8}
   b47ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b47b2:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b47b4:	9906      	ldr	r1, [sp, #24]
   b47b6:	fb14 f202 	smulbb	r2, r4, r2
   b47ba:	440a      	add	r2, r1
   b47bc:	9904      	ldr	r1, [sp, #16]
   b47be:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b47c0:	9400      	str	r4, [sp, #0]
   b47c2:	69db      	ldr	r3, [r3, #28]
   b47c4:	ee18 1a10 	vmov	r1, s16
   b47c8:	461f      	mov	r7, r3
   b47ca:	b212      	sxth	r2, r2
   b47cc:	462b      	mov	r3, r5
   b47ce:	4658      	mov	r0, fp
   b47d0:	47b8      	blx	r7
   b47d2:	e7bb      	b.n	b474c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b47d4:	9a04      	ldr	r2, [sp, #16]
   b47d6:	4542      	cmp	r2, r8
   b47d8:	d0b8      	beq.n	b474c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b47da:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b47dc:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b47e0:	d107      	bne.n	b47f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b47e2:	2c01      	cmp	r4, #1
   b47e4:	d105      	bne.n	b47f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b47e6:	699b      	ldr	r3, [r3, #24]
   b47e8:	9906      	ldr	r1, [sp, #24]
   b47ea:	461f      	mov	r7, r3
   b47ec:	440a      	add	r2, r1
   b47ee:	4643      	mov	r3, r8
   b47f0:	e7a8      	b.n	b4744 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b47f2:	9906      	ldr	r1, [sp, #24]
   b47f4:	f8cd 8004 	str.w	r8, [sp, #4]
   b47f8:	fb14 f202 	smulbb	r2, r4, r2
   b47fc:	440a      	add	r2, r1
   b47fe:	e7df      	b.n	b47c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4802:	f8cd 8004 	str.w	r8, [sp, #4]
   b4806:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b480a:	9a08      	ldr	r2, [sp, #32]
   b480c:	00e4      	lsls	r4, r4, #3
   b480e:	440a      	add	r2, r1
   b4810:	4611      	mov	r1, r2
   b4812:	9400      	str	r4, [sp, #0]
   b4814:	69dc      	ldr	r4, [r3, #28]
   b4816:	4632      	mov	r2, r6
   b4818:	462b      	mov	r3, r5
   b481a:	b209      	sxth	r1, r1
   b481c:	4658      	mov	r0, fp
   b481e:	47a0      	blx	r4
        endWrite();
   b4820:	e7be      	b.n	b47a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4822:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4824:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4826:	6812      	ldr	r2, [r2, #0]
   b4828:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b482a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b482c:	b2ff      	uxtb	r7, r7
   b482e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4832:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4836:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4838:	789a      	ldrb	r2, [r3, #2]
   b483a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b483c:	78da      	ldrb	r2, [r3, #3]
   b483e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4840:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4842:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4846:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b484a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b484c:	d801      	bhi.n	b4852 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b484e:	2c01      	cmp	r4, #1
   b4850:	d957      	bls.n	b4902 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4852:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4856:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4858:	fa0f f38a 	sxth.w	r3, sl
   b485c:	9307      	str	r3, [sp, #28]
        startWrite();
   b485e:	f8db 3000 	ldr.w	r3, [fp]
   b4862:	4658      	mov	r0, fp
   b4864:	695b      	ldr	r3, [r3, #20]
   b4866:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4868:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b486a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b486e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4870:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4874:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4876:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4878:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b487a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b487c:	429f      	cmp	r7, r3
   b487e:	d28f      	bcs.n	b47a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4880:	9b07      	ldr	r3, [sp, #28]
   b4882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4884:	443b      	add	r3, r7
   b4886:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b488a:	2200      	movs	r2, #0
   b488c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b488e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4890:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4892:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4896:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b489a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b489e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b48a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b48a2:	9905      	ldr	r1, [sp, #20]
   b48a4:	4291      	cmp	r1, r2
   b48a6:	d241      	bcs.n	b492c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b48a8:	1c5a      	adds	r2, r3, #1
   b48aa:	b2d2      	uxtb	r2, r2
   b48ac:	075b      	lsls	r3, r3, #29
   b48ae:	920d      	str	r2, [sp, #52]	; 0x34
   b48b0:	d107      	bne.n	b48c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b48b2:	9b06      	ldr	r3, [sp, #24]
   b48b4:	9906      	ldr	r1, [sp, #24]
   b48b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b48b8:	3301      	adds	r3, #1
   b48ba:	b29b      	uxth	r3, r3
   b48bc:	f812 9001 	ldrb.w	r9, [r2, r1]
   b48c0:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b48c2:	f019 0f80 	tst.w	r9, #128	; 0x80
   b48c6:	d012      	beq.n	b48ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b48c8:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b48ca:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b48ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b48d2:	d11a      	bne.n	b490a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b48d4:	2c01      	cmp	r4, #1
   b48d6:	d118      	bne.n	b490a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b48d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b48da:	699b      	ldr	r3, [r3, #24]
   b48dc:	4411      	add	r1, r2
   b48de:	9a05      	ldr	r2, [sp, #20]
   b48e0:	4411      	add	r1, r2
   b48e2:	461e      	mov	r6, r3
   b48e4:	4652      	mov	r2, sl
   b48e6:	9b04      	ldr	r3, [sp, #16]
   b48e8:	b209      	sxth	r1, r1
   b48ea:	4658      	mov	r0, fp
   b48ec:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b48ee:	9e05      	ldr	r6, [sp, #20]
   b48f0:	3601      	adds	r6, #1
   b48f2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b48f4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b48f8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b48fa:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b48fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4900:	e7ce      	b.n	b48a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4902:	2300      	movs	r3, #0
   b4904:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4908:	e7a9      	b.n	b485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b490a:	9805      	ldr	r0, [sp, #20]
   b490c:	9a08      	ldr	r2, [sp, #32]
   b490e:	4402      	add	r2, r0
   b4910:	fb02 1105 	mla	r1, r2, r5, r1
   b4914:	9a04      	ldr	r2, [sp, #16]
   b4916:	e9cd 4200 	strd	r4, r2, [sp]
   b491a:	69db      	ldr	r3, [r3, #28]
   b491c:	ee18 2a10 	vmov	r2, s16
   b4920:	461e      	mov	r6, r3
   b4922:	b209      	sxth	r1, r1
   b4924:	462b      	mov	r3, r5
   b4926:	4658      	mov	r0, fp
   b4928:	47b0      	blx	r6
   b492a:	e7e0      	b.n	b48ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b492c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b492e:	3701      	adds	r7, #1
   b4930:	4498      	add	r8, r3
   b4932:	fa5f f888 	uxtb.w	r8, r8
   b4936:	b2ff      	uxtb	r7, r7
   b4938:	e79f      	b.n	b487a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b493a:	b011      	add	sp, #68	; 0x44
   b493c:	ecbd 8b02 	vpop	{d8}
   b4940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4944:	000ba3d2 	.word	0x000ba3d2

000b4948 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4948:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b494a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b494c:	b085      	sub	sp, #20
   b494e:	4604      	mov	r4, r0
   b4950:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4952:	2a00      	cmp	r2, #0
   b4954:	d134      	bne.n	b49c0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4956:	290a      	cmp	r1, #10
   b4958:	d108      	bne.n	b496c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b495a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b495c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b495e:	7e42      	ldrb	r2, [r0, #25]
   b4960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4964:	8263      	strh	r3, [r4, #18]
}
   b4966:	2001      	movs	r0, #1
   b4968:	b005      	add	sp, #20
   b496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b496c:	290d      	cmp	r1, #13
   b496e:	d0fa      	beq.n	b4966 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4970:	7ee1      	ldrb	r1, [r4, #27]
   b4972:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4974:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4976:	b171      	cbz	r1, b4996 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4978:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b497c:	2106      	movs	r1, #6
   b497e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4982:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4986:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4988:	bfc1      	itttt	gt
   b498a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b498e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4990:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4994:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4996:	8ae2      	ldrh	r2, [r4, #22]
   b4998:	9201      	str	r2, [sp, #4]
   b499a:	8aa2      	ldrh	r2, [r4, #20]
   b499c:	9200      	str	r2, [sp, #0]
   b499e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b49a2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b49a6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b49aa:	4620      	mov	r0, r4
   b49ac:	f7ff fe5e 	bl	b466c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b49b0:	7e23      	ldrb	r3, [r4, #24]
   b49b2:	8a22      	ldrh	r2, [r4, #16]
   b49b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b49b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b49bc:	8223      	strh	r3, [r4, #16]
   b49be:	e7d2      	b.n	b4966 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b49c0:	290a      	cmp	r1, #10
   b49c2:	d107      	bne.n	b49d4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b49c4:	2300      	movs	r3, #0
   b49c6:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b49c8:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b49ca:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b49cc:	8a43      	ldrh	r3, [r0, #18]
   b49ce:	fb01 3302 	mla	r3, r1, r2, r3
   b49d2:	e7c7      	b.n	b4964 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b49d4:	290d      	cmp	r1, #13
   b49d6:	d0c6      	beq.n	b4966 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b49d8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b49da:	42a9      	cmp	r1, r5
   b49dc:	d3c3      	bcc.n	b4966 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b49de:	7a51      	ldrb	r1, [r2, #9]
   b49e0:	4299      	cmp	r1, r3
   b49e2:	d3c0      	bcc.n	b4966 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b49e4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b49e6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b49e8:	b2ed      	uxtb	r5, r5
   b49ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b49ee:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b49f0:	b328      	cbz	r0, b4a3e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b49f2:	78e9      	ldrb	r1, [r5, #3]
   b49f4:	b319      	cbz	r1, b4a3e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b49f6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b49f8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b49fa:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b49fc:	b191      	cbz	r1, b4a24 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b49fe:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4a02:	4408      	add	r0, r1
   b4a04:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4a08:	fb06 1100 	mla	r1, r6, r0, r1
   b4a0c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4a10:	4281      	cmp	r1, r0
   b4a12:	dd07      	ble.n	b4a24 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4a14:	2000      	movs	r0, #0
   b4a16:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4a18:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4a1c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4a1e:	fb02 1207 	mla	r2, r2, r7, r1
   b4a22:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4a24:	8ae2      	ldrh	r2, [r4, #22]
   b4a26:	9201      	str	r2, [sp, #4]
   b4a28:	8aa2      	ldrh	r2, [r4, #20]
   b4a2a:	9200      	str	r2, [sp, #0]
   b4a2c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4a30:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4a34:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4a38:	4620      	mov	r0, r4
   b4a3a:	f7ff fe17 	bl	b466c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4a3e:	7929      	ldrb	r1, [r5, #4]
   b4a40:	7e22      	ldrb	r2, [r4, #24]
   b4a42:	8a23      	ldrh	r3, [r4, #16]
   b4a44:	fb01 3302 	mla	r3, r1, r2, r3
   b4a48:	e7b8      	b.n	b49bc <_ZN12Adafruit_GFX5writeEh+0x74>

000b4a4a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4a4a:	2901      	cmp	r1, #1
   b4a4c:	bf38      	it	cc
   b4a4e:	2101      	movcc	r1, #1
   b4a50:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4a52:	7641      	strb	r1, [r0, #25]
}
   b4a54:	4770      	bx	lr

000b4a56 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4a56:	4770      	bx	lr

000b4a58 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4a58:	b510      	push	{r4, lr}
  }
   b4a5a:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4a5c:	4604      	mov	r4, r0
  }
   b4a5e:	f7ff fb20 	bl	b40a2 <_ZdlPvj>
   b4a62:	4620      	mov	r0, r4
   b4a64:	bd10      	pop	{r4, pc}

000b4a66 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4a66:	b40e      	push	{r1, r2, r3}
   b4a68:	b503      	push	{r0, r1, lr}
   b4a6a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4a6c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4a6e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4a72:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4a74:	f001 ff99 	bl	b69aa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4a78:	b002      	add	sp, #8
   b4a7a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4a7e:	b003      	add	sp, #12
   b4a80:	4770      	bx	lr
	...

000b4a84 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4a84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4a86:	4604      	mov	r4, r0
   b4a88:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4a8a:	7922      	ldrb	r2, [r4, #4]
   b4a8c:	68a3      	ldr	r3, [r4, #8]
   b4a8e:	b132      	cbz	r2, b4a9e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4a90:	b9a3      	cbnz	r3, b4abc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4a92:	490b      	ldr	r1, [pc, #44]	; (b4ac0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4a94:	b002      	add	sp, #8
   b4a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4a9a:	f001 be81 	b.w	b67a0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4a9e:	4a09      	ldr	r2, [pc, #36]	; (b4ac4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4aa0:	7b26      	ldrb	r6, [r4, #12]
   b4aa2:	4d09      	ldr	r5, [pc, #36]	; (b4ac8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4aa4:	4909      	ldr	r1, [pc, #36]	; (b4acc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4aa6:	7b64      	ldrb	r4, [r4, #13]
   b4aa8:	2e01      	cmp	r6, #1
   b4aaa:	bf18      	it	ne
   b4aac:	4629      	movne	r1, r5
   b4aae:	e9cd 1400 	strd	r1, r4, [sp]
   b4ab2:	4907      	ldr	r1, [pc, #28]	; (b4ad0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4ab4:	f7ff ffd7 	bl	b4a66 <_ZN5Print6printfEPKcz>
  }
   b4ab8:	b002      	add	sp, #8
   b4aba:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4abc:	4a05      	ldr	r2, [pc, #20]	; (b4ad4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4abe:	e7ef      	b.n	b4aa0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4ac0:	000ba93d 	.word	0x000ba93d
   b4ac4:	000ba3bc 	.word	0x000ba3bc
   b4ac8:	000ba939 	.word	0x000ba939
   b4acc:	000ba935 	.word	0x000ba935
   b4ad0:	000ba953 	.word	0x000ba953
   b4ad4:	000ba92c 	.word	0x000ba92c

000b4ad8 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4ad8:	b510      	push	{r4, lr}
   b4ada:	4b04      	ldr	r3, [pc, #16]	; (b4aec <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4adc:	6003      	str	r3, [r0, #0]
   b4ade:	4604      	mov	r4, r0
  if(buffer) {
   b4ae0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4ae2:	b108      	cbz	r0, b4ae8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4ae4:	f001 fc14 	bl	b6310 <free>
    buffer = NULL;
  }
}
   b4ae8:	4620      	mov	r0, r4
   b4aea:	bd10      	pop	{r4, pc}
   b4aec:	000bae2c 	.word	0x000bae2c

000b4af0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4af0:	b510      	push	{r4, lr}
   b4af2:	4604      	mov	r4, r0
}
   b4af4:	f7ff fff0 	bl	b4ad8 <_ZN16Adafruit_SSD1306D1Ev>
   b4af8:	4620      	mov	r0, r4
   b4afa:	2150      	movs	r1, #80	; 0x50
   b4afc:	f7ff fad1 	bl	b40a2 <_ZdlPvj>
   b4b00:	4620      	mov	r0, r4
   b4b02:	bd10      	pop	{r4, pc}

000b4b04 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4b04:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4b06:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4b08:	db4b      	blt.n	b4ba2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4b0a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4b0e:	428c      	cmp	r4, r1
   b4b10:	dd47      	ble.n	b4ba2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4b12:	2a00      	cmp	r2, #0
   b4b14:	db45      	blt.n	b4ba2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4b16:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4b1a:	4294      	cmp	r4, r2
   b4b1c:	dd41      	ble.n	b4ba2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4b1e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4b20:	2c02      	cmp	r4, #2
   b4b22:	d01f      	beq.n	b4b64 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4b24:	2c03      	cmp	r4, #3
   b4b26:	d026      	beq.n	b4b76 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4b28:	2c01      	cmp	r4, #1
   b4b2a:	d104      	bne.n	b4b36 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4b2c:	8904      	ldrh	r4, [r0, #8]
   b4b2e:	43d2      	mvns	r2, r2
   b4b30:	4414      	add	r4, r2
      break;
   b4b32:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4b34:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4b36:	2b01      	cmp	r3, #1
   b4b38:	d023      	beq.n	b4b82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4b3a:	2b02      	cmp	r3, #2
   b4b3c:	d032      	beq.n	b4ba4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4b3e:	bb83      	cbnz	r3, b4ba2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4b40:	2a00      	cmp	r2, #0
   b4b42:	4613      	mov	r3, r2
   b4b44:	8904      	ldrh	r4, [r0, #8]
   b4b46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4b48:	bfb8      	it	lt
   b4b4a:	1dd3      	addlt	r3, r2, #7
   b4b4c:	10db      	asrs	r3, r3, #3
   b4b4e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4b52:	f002 0207 	and.w	r2, r2, #7
   b4b56:	2301      	movs	r3, #1
   b4b58:	4093      	lsls	r3, r2
   b4b5a:	5c42      	ldrb	r2, [r0, r1]
   b4b5c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4b60:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4b62:	e01e      	b.n	b4ba2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4b64:	8904      	ldrh	r4, [r0, #8]
   b4b66:	3c01      	subs	r4, #1
   b4b68:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4b6a:	8944      	ldrh	r4, [r0, #10]
   b4b6c:	43d2      	mvns	r2, r2
   b4b6e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4b70:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4b72:	b212      	sxth	r2, r2
      break;
   b4b74:	e7df      	b.n	b4b36 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4b76:	8944      	ldrh	r4, [r0, #10]
   b4b78:	3c01      	subs	r4, #1
   b4b7a:	1a64      	subs	r4, r4, r1
      break;
   b4b7c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4b7e:	b222      	sxth	r2, r4
      break;
   b4b80:	e7d9      	b.n	b4b36 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4b82:	2a00      	cmp	r2, #0
   b4b84:	8904      	ldrh	r4, [r0, #8]
   b4b86:	4613      	mov	r3, r2
   b4b88:	bfb8      	it	lt
   b4b8a:	1dd3      	addlt	r3, r2, #7
   b4b8c:	10db      	asrs	r3, r3, #3
   b4b8e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4b92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4b94:	f002 0007 	and.w	r0, r2, #7
   b4b98:	2201      	movs	r2, #1
   b4b9a:	4082      	lsls	r2, r0
   b4b9c:	5c58      	ldrb	r0, [r3, r1]
   b4b9e:	4302      	orrs	r2, r0
   b4ba0:	545a      	strb	r2, [r3, r1]
}
   b4ba2:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4ba4:	2a00      	cmp	r2, #0
   b4ba6:	4613      	mov	r3, r2
   b4ba8:	8904      	ldrh	r4, [r0, #8]
   b4baa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4bac:	bfb8      	it	lt
   b4bae:	1dd3      	addlt	r3, r2, #7
   b4bb0:	10db      	asrs	r3, r3, #3
   b4bb2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4bb6:	f002 0207 	and.w	r2, r2, #7
   b4bba:	2301      	movs	r3, #1
   b4bbc:	fa03 f202 	lsl.w	r2, r3, r2
   b4bc0:	5c43      	ldrb	r3, [r0, r1]
   b4bc2:	405a      	eors	r2, r3
   b4bc4:	e7cc      	b.n	b4b60 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4bc8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4bc8:	b570      	push	{r4, r5, r6, lr}
   b4bca:	4604      	mov	r4, r0
   b4bcc:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4bce:	2600      	movs	r6, #0
   b4bd0:	f7ff fce2 	bl	b4598 <_ZN12Adafruit_GFXC1Ess>
   b4bd4:	4b11      	ldr	r3, [pc, #68]	; (b4c1c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4bd6:	6023      	str	r3, [r4, #0]
   b4bd8:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4bda:	b915      	cbnz	r5, b4be2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4bdc:	f002 fda0 	bl	b7720 <_Z19__fetch_global_Wirev>
   b4be0:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4be2:	23ff      	movs	r3, #255	; 0xff
   b4be4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4be8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4bec:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4bf0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4bf4:	4b0a      	ldr	r3, [pc, #40]	; (b4c20 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4bf6:	63a3      	str	r3, [r4, #56]	; 0x38
   b4bf8:	2301      	movs	r3, #1
   b4bfa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4bfe:	9b05      	ldr	r3, [sp, #20]
   b4c00:	64a3      	str	r3, [r4, #72]	; 0x48
   b4c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4c06:	9b06      	ldr	r3, [sp, #24]
   b4c08:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4c0a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4c0e:	6426      	str	r6, [r4, #64]	; 0x40
   b4c10:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4c14:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4c16:	4620      	mov	r0, r4
   b4c18:	bd70      	pop	{r4, r5, r6, pc}
   b4c1a:	bf00      	nop
   b4c1c:	000bae2c 	.word	0x000bae2c
   b4c20:	000ba978 	.word	0x000ba978

000b4c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c26:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4c28:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4c2a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4c2c:	b190      	cbz	r0, b4c54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4c2e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c32:	f001 fc3b 	bl	b64ac <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c38:	6803      	ldr	r3, [r0, #0]
   b4c3a:	2100      	movs	r1, #0
   b4c3c:	689b      	ldr	r3, [r3, #8]
   b4c3e:	4798      	blx	r3
    WIRE_WRITE(c);
   b4c40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c42:	6803      	ldr	r3, [r0, #0]
   b4c44:	4629      	mov	r1, r5
   b4c46:	689b      	ldr	r3, [r3, #8]
   b4c48:	4798      	blx	r3
    wire->endTransmission();
   b4c4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4c50:	f001 bc33 	b.w	b64ba <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4c54:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4c58:	4601      	mov	r1, r0
   b4c5a:	b298      	uxth	r0, r3
   b4c5c:	f002 fd1d 	bl	b769a <digitalWrite>
  if(spi) {
   b4c60:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4c62:	b120      	cbz	r0, b4c6e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4c64:	4629      	mov	r1, r5
}
   b4c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4c6a:	f001 bf81 	b.w	b6b70 <_ZN8SPIClass8transferEh>
   b4c6e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4c70:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4c72:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4c76:	ea05 0107 	and.w	r1, r5, r7
   b4c7a:	b280      	uxth	r0, r0
   b4c7c:	f002 fd0d 	bl	b769a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4c80:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4c84:	2101      	movs	r1, #1
   b4c86:	b280      	uxth	r0, r0
   b4c88:	f002 fd07 	bl	b769a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4c8c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4c90:	2100      	movs	r1, #0
   b4c92:	b280      	uxth	r0, r0
   b4c94:	f002 fd01 	bl	b769a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4c98:	3e01      	subs	r6, #1
   b4c9a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4c9e:	d1e8      	bne.n	b4c72 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ca2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4ca2:	b538      	push	{r3, r4, r5, lr}
   b4ca4:	4604      	mov	r4, r0
  TRANSACTION_START
   b4ca6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4ca8:	460d      	mov	r5, r1
  TRANSACTION_START
   b4caa:	b180      	cbz	r0, b4cce <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4cac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4cae:	f001 fbef 	bl	b6490 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4cb2:	2d00      	cmp	r5, #0
   b4cb4:	4620      	mov	r0, r4
   b4cb6:	bf14      	ite	ne
   b4cb8:	21a7      	movne	r1, #167	; 0xa7
   b4cba:	21a6      	moveq	r1, #166	; 0xa6
   b4cbc:	f7ff ffb2 	bl	b4c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4cc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cc2:	b188      	cbz	r0, b4ce8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4cc4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4cca:	f001 bbe1 	b.w	b6490 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4cce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4cd0:	b118      	cbz	r0, b4cda <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4cd2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4cd6:	f001 fedd 	bl	b6a94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4cda:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4cde:	2100      	movs	r1, #0
   b4ce0:	b280      	uxth	r0, r0
   b4ce2:	f002 fcda 	bl	b769a <digitalWrite>
   b4ce6:	e7e4      	b.n	b4cb2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4ce8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4cec:	2101      	movs	r1, #1
   b4cee:	b280      	uxth	r0, r0
   b4cf0:	f002 fcd3 	bl	b769a <digitalWrite>
   b4cf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4cf6:	b118      	cbz	r0, b4d00 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4cfc:	f001 beb0 	b.w	b6a60 <_ZN8SPIClass14endTransactionEv>
}
   b4d00:	bd38      	pop	{r3, r4, r5, pc}

000b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4d02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4d06:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4d08:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4d0a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4d0c:	188f      	adds	r7, r1, r2
   b4d0e:	b340      	cbz	r0, b4d62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4d10:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4d14:	f001 fbca 	bl	b64ac <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4d18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d1a:	6803      	ldr	r3, [r0, #0]
   b4d1c:	2100      	movs	r1, #0
   b4d1e:	689b      	ldr	r3, [r3, #8]
   b4d20:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4d22:	2601      	movs	r6, #1
    while(n--) {
   b4d24:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4d26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4d28:	d017      	beq.n	b4d5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4d2a:	2e1f      	cmp	r6, #31
   b4d2c:	d90c      	bls.n	b4d48 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4d2e:	f001 fbc4 	bl	b64ba <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4d32:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4d36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d38:	f001 fbb8 	bl	b64ac <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4d3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d3e:	6803      	ldr	r3, [r0, #0]
   b4d40:	2100      	movs	r1, #0
   b4d42:	689b      	ldr	r3, [r3, #8]
   b4d44:	4798      	blx	r3
        bytesOut = 1;
   b4d46:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4d48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d4a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4d4e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4d50:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4d52:	689b      	ldr	r3, [r3, #8]
   b4d54:	4798      	blx	r3
      bytesOut++;
   b4d56:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4d58:	e7e4      	b.n	b4d24 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4d5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4d5e:	f001 bbac 	b.w	b64ba <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4d62:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4d66:	4601      	mov	r1, r0
   b4d68:	b298      	uxth	r0, r3
   b4d6a:	f002 fc96 	bl	b769a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4d6e:	42bd      	cmp	r5, r7
   b4d70:	d022      	beq.n	b4db8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4d72:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4d74:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4d78:	b118      	cbz	r0, b4d82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4d7a:	4649      	mov	r1, r9
   b4d7c:	f001 fef8 	bl	b6b70 <_ZN8SPIClass8transferEh>
   b4d80:	e7f5      	b.n	b4d6e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4d82:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4d84:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4d88:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4d8c:	ea09 0108 	and.w	r1, r9, r8
   b4d90:	b280      	uxth	r0, r0
   b4d92:	f002 fc82 	bl	b769a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4d96:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4d9a:	2101      	movs	r1, #1
   b4d9c:	b280      	uxth	r0, r0
   b4d9e:	f002 fc7c 	bl	b769a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4da2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4da6:	2100      	movs	r1, #0
   b4da8:	b280      	uxth	r0, r0
   b4daa:	f002 fc76 	bl	b769a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4dae:	3e01      	subs	r6, #1
   b4db0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4db4:	d1e8      	bne.n	b4d88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4db6:	e7da      	b.n	b4d6e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4dbc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4dbc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4dc0:	1dda      	adds	r2, r3, #7
   b4dc2:	bf48      	it	mi
   b4dc4:	f103 020e 	addmi.w	r2, r3, #14
   b4dc8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4dcc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4dce:	10d2      	asrs	r2, r2, #3
   b4dd0:	435a      	muls	r2, r3
   b4dd2:	2100      	movs	r1, #0
   b4dd4:	f003 bb55 	b.w	b8482 <memset>

000b4dd8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4dd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4ddc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4dde:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4de0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4de4:	4604      	mov	r4, r0
   b4de6:	460f      	mov	r7, r1
   b4de8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4dea:	b1c3      	cbz	r3, b4e1e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4dec:	4620      	mov	r0, r4
   b4dee:	f7ff ffe5 	bl	b4dbc <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4df2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4df6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4dfa:	2820      	cmp	r0, #32
   b4dfc:	dc21      	bgt.n	b4e42 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4dfe:	2320      	movs	r3, #32
   b4e00:	2201      	movs	r2, #1
   b4e02:	3820      	subs	r0, #32
   b4e04:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4e08:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b4e0c:	2373      	movs	r3, #115	; 0x73
   b4e0e:	3973      	subs	r1, #115	; 0x73
   b4e10:	9300      	str	r3, [sp, #0]
   b4e12:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4e16:	4b89      	ldr	r3, [pc, #548]	; (b503c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b4e18:	f340 024f 	sbfx	r2, r0, #1, #16
   b4e1c:	e021      	b.n	b4e62 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4e1e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4e22:	1dd8      	adds	r0, r3, #7
   b4e24:	bf48      	it	mi
   b4e26:	f103 000e 	addmi.w	r0, r3, #14
   b4e2a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b4e2e:	10c0      	asrs	r0, r0, #3
   b4e30:	4358      	muls	r0, r3
   b4e32:	f001 fa65 	bl	b6300 <malloc>
   b4e36:	62e0      	str	r0, [r4, #44]	; 0x2c
   b4e38:	2800      	cmp	r0, #0
   b4e3a:	d1d7      	bne.n	b4dec <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b4e3c:	b004      	add	sp, #16
   b4e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b4e42:	3840      	subs	r0, #64	; 0x40
   b4e44:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b4e48:	fa02 f280 	sxtah	r2, r2, r0
   b4e4c:	2340      	movs	r3, #64	; 0x40
   b4e4e:	2001      	movs	r0, #1
   b4e50:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b4e54:	2352      	movs	r3, #82	; 0x52
   b4e56:	3952      	subs	r1, #82	; 0x52
   b4e58:	9300      	str	r3, [sp, #0]
   b4e5a:	4b79      	ldr	r3, [pc, #484]	; (b5040 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b4e5c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4e60:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4e62:	4620      	mov	r0, r4
   b4e64:	f341 014f 	sbfx	r1, r1, #1, #16
   b4e68:	f7ff fbac 	bl	b45c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b4e6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b4e6e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b4e72:	2800      	cmp	r0, #0
   b4e74:	d078      	beq.n	b4f68 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4e76:	2d00      	cmp	r5, #0
   b4e78:	d174      	bne.n	b4f64 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b4e7a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4e7e:	2b20      	cmp	r3, #32
   b4e80:	bf0c      	ite	eq
   b4e82:	253c      	moveq	r5, #60	; 0x3c
   b4e84:	253d      	movne	r5, #61	; 0x3d
   b4e86:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b4e8a:	f1b8 0f00 	cmp.w	r8, #0
   b4e8e:	d001      	beq.n	b4e94 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4e90:	f001 fb02 	bl	b6498 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b4e94:	b1fe      	cbz	r6, b4ed6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b4e96:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4e9a:	2800      	cmp	r0, #0
   b4e9c:	db1b      	blt.n	b4ed6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b4e9e:	2101      	movs	r1, #1
   b4ea0:	b280      	uxth	r0, r0
   b4ea2:	f002 fbe9 	bl	b7678 <pinMode>
    digitalWrite(rstPin, HIGH);
   b4ea6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4eaa:	2101      	movs	r1, #1
   b4eac:	b280      	uxth	r0, r0
   b4eae:	f002 fbf4 	bl	b769a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b4eb2:	2001      	movs	r0, #1
   b4eb4:	f001 fa64 	bl	b6380 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b4eb8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4ebc:	2100      	movs	r1, #0
   b4ebe:	b280      	uxth	r0, r0
   b4ec0:	f002 fbeb 	bl	b769a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b4ec4:	200a      	movs	r0, #10
   b4ec6:	f001 fa5b 	bl	b6380 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b4eca:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4ece:	2101      	movs	r1, #1
   b4ed0:	b280      	uxth	r0, r0
   b4ed2:	f002 fbe2 	bl	b769a <digitalWrite>
  TRANSACTION_START
   b4ed6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4ed8:	2800      	cmp	r0, #0
   b4eda:	d074      	beq.n	b4fc6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b4edc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4ede:	f001 fad7 	bl	b6490 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b4ee2:	2204      	movs	r2, #4
   b4ee4:	4957      	ldr	r1, [pc, #348]	; (b5044 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b4ee6:	4620      	mov	r0, r4
   b4ee8:	f7ff ff0b 	bl	b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b4eec:	8961      	ldrh	r1, [r4, #10]
   b4eee:	3901      	subs	r1, #1
   b4ef0:	b2c9      	uxtb	r1, r1
   b4ef2:	4620      	mov	r0, r4
   b4ef4:	f7ff fe96 	bl	b4c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b4ef8:	4953      	ldr	r1, [pc, #332]	; (b5048 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b4efa:	2204      	movs	r2, #4
   b4efc:	4620      	mov	r0, r4
   b4efe:	f7ff ff00 	bl	b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b4f02:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f06:	2b01      	cmp	r3, #1
   b4f08:	bf0c      	ite	eq
   b4f0a:	2110      	moveq	r1, #16
   b4f0c:	2114      	movne	r1, #20
   b4f0e:	4620      	mov	r0, r4
   b4f10:	f7ff fe88 	bl	b4c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b4f14:	2204      	movs	r2, #4
   b4f16:	494d      	ldr	r1, [pc, #308]	; (b504c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b4f18:	4620      	mov	r0, r4
   b4f1a:	f7ff fef2 	bl	b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b4f1e:	68a3      	ldr	r3, [r4, #8]
   b4f20:	4a4b      	ldr	r2, [pc, #300]	; (b5050 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b4f22:	4293      	cmp	r3, r2
   b4f24:	d15c      	bne.n	b4fe0 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b4f26:	494b      	ldr	r1, [pc, #300]	; (b5054 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b4f28:	2204      	movs	r2, #4
   b4f2a:	4620      	mov	r0, r4
   b4f2c:	f7ff fee9 	bl	b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b4f30:	21d9      	movs	r1, #217	; 0xd9
   b4f32:	4620      	mov	r0, r4
   b4f34:	f7ff fe76 	bl	b4c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b4f38:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f3c:	2b01      	cmp	r3, #1
   b4f3e:	bf0c      	ite	eq
   b4f40:	2122      	moveq	r1, #34	; 0x22
   b4f42:	21f1      	movne	r1, #241	; 0xf1
   b4f44:	4620      	mov	r0, r4
   b4f46:	f7ff fe6d 	bl	b4c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b4f4a:	4620      	mov	r0, r4
   b4f4c:	4942      	ldr	r1, [pc, #264]	; (b5058 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b4f4e:	2206      	movs	r2, #6
   b4f50:	f7ff fed7 	bl	b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b4f54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f56:	2800      	cmp	r0, #0
   b4f58:	d063      	beq.n	b5022 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b4f5a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b4f5c:	f001 fa98 	bl	b6490 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b4f60:	2001      	movs	r0, #1
   b4f62:	e76b      	b.n	b4e3c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4f64:	b26d      	sxtb	r5, r5
   b4f66:	e78e      	b.n	b4e86 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b4f68:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4f6c:	2101      	movs	r1, #1
   b4f6e:	b280      	uxth	r0, r0
   b4f70:	f002 fb82 	bl	b7678 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b4f74:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4f78:	2101      	movs	r1, #1
   b4f7a:	b280      	uxth	r0, r0
   b4f7c:	f002 fb7c 	bl	b7678 <pinMode>
    SSD1306_DESELECT
   b4f80:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4f84:	2101      	movs	r1, #1
   b4f86:	b280      	uxth	r0, r0
   b4f88:	f002 fb87 	bl	b769a <digitalWrite>
    if(spi) { // Hardware SPI
   b4f8c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b4f8e:	b13d      	cbz	r5, b4fa0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b4f90:	f1b8 0f00 	cmp.w	r8, #0
   b4f94:	f43f af7e 	beq.w	b4e94 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4f98:	4628      	mov	r0, r5
   b4f9a:	f001 fd4d 	bl	b6a38 <_ZN8SPIClass5beginEv>
   b4f9e:	e779      	b.n	b4e94 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b4fa0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4fa4:	2101      	movs	r1, #1
   b4fa6:	b280      	uxth	r0, r0
   b4fa8:	f002 fb66 	bl	b7678 <pinMode>
      pinMode(clkPin , OUTPUT);
   b4fac:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4fb0:	2101      	movs	r1, #1
   b4fb2:	b280      	uxth	r0, r0
   b4fb4:	f002 fb60 	bl	b7678 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b4fb8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4fbc:	4629      	mov	r1, r5
   b4fbe:	b280      	uxth	r0, r0
   b4fc0:	f002 fb6b 	bl	b769a <digitalWrite>
   b4fc4:	e766      	b.n	b4e94 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b4fc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4fc8:	b118      	cbz	r0, b4fd2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b4fca:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4fce:	f001 fd61 	bl	b6a94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4fd2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4fd6:	2100      	movs	r1, #0
   b4fd8:	b280      	uxth	r0, r0
   b4fda:	f002 fb5e 	bl	b769a <digitalWrite>
   b4fde:	e780      	b.n	b4ee2 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b4fe0:	4a1e      	ldr	r2, [pc, #120]	; (b505c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b4fe2:	4293      	cmp	r3, r2
   b4fe4:	d10e      	bne.n	b5004 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b4fe6:	491e      	ldr	r1, [pc, #120]	; (b5060 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b4fe8:	2203      	movs	r2, #3
   b4fea:	4620      	mov	r0, r4
   b4fec:	f7ff fe89 	bl	b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b4ff0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4ff4:	2b01      	cmp	r3, #1
   b4ff6:	bf0c      	ite	eq
   b4ff8:	219f      	moveq	r1, #159	; 0x9f
   b4ffa:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4ffc:	4620      	mov	r0, r4
   b4ffe:	f7ff fe11 	bl	b4c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5002:	e795      	b.n	b4f30 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5004:	4a17      	ldr	r2, [pc, #92]	; (b5064 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5006:	4293      	cmp	r3, r2
   b5008:	d192      	bne.n	b4f30 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b500a:	4917      	ldr	r1, [pc, #92]	; (b5068 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b500c:	2203      	movs	r2, #3
   b500e:	4620      	mov	r0, r4
   b5010:	f7ff fe77 	bl	b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5014:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5018:	2b01      	cmp	r3, #1
   b501a:	bf0c      	ite	eq
   b501c:	2110      	moveq	r1, #16
   b501e:	21af      	movne	r1, #175	; 0xaf
   b5020:	e7ec      	b.n	b4ffc <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5022:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5026:	2101      	movs	r1, #1
   b5028:	b280      	uxth	r0, r0
   b502a:	f002 fb36 	bl	b769a <digitalWrite>
   b502e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5030:	2800      	cmp	r0, #0
   b5032:	d095      	beq.n	b4f60 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5034:	f001 fd14 	bl	b6a60 <_ZN8SPIClass14endTransactionEv>
   b5038:	e792      	b.n	b4f60 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b503a:	bf00      	nop
   b503c:	000bac44 	.word	0x000bac44
   b5040:	000ba984 	.word	0x000ba984
   b5044:	000bae8c 	.word	0x000bae8c
   b5048:	000bae90 	.word	0x000bae90
   b504c:	000bae94 	.word	0x000bae94
   b5050:	00200080 	.word	0x00200080
   b5054:	000bae9e 	.word	0x000bae9e
   b5058:	000bae98 	.word	0x000bae98
   b505c:	00400080 	.word	0x00400080
   b5060:	000baea2 	.word	0x000baea2
   b5064:	00100060 	.word	0x00100060
   b5068:	000baea5 	.word	0x000baea5

000b506c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b506c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b506e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5070:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5074:	db3d      	blt.n	b50f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5076:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b507a:	4294      	cmp	r4, r2
   b507c:	dd39      	ble.n	b50f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b507e:	2900      	cmp	r1, #0
      w += x;
   b5080:	bfbe      	ittt	lt
   b5082:	185b      	addlt	r3, r3, r1
   b5084:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5086:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5088:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b508c:	18ce      	adds	r6, r1, r3
   b508e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5090:	bfc4      	itt	gt
   b5092:	1a63      	subgt	r3, r4, r1
   b5094:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5096:	2b00      	cmp	r3, #0
   b5098:	dd2b      	ble.n	b50f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b509a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b509c:	10d6      	asrs	r6, r2, #3
   b509e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b50a2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b50a4:	f002 0007 	and.w	r0, r2, #7
   b50a8:	2201      	movs	r2, #1
   b50aa:	4082      	lsls	r2, r0
      switch(color) {
   b50ac:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b50ae:	b2d2      	uxtb	r2, r2
      switch(color) {
   b50b0:	d016      	beq.n	b50e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b50b2:	2d02      	cmp	r5, #2
   b50b4:	d00b      	beq.n	b50ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b50b6:	b9e5      	cbnz	r5, b50f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b50b8:	43d2      	mvns	r2, r2
   b50ba:	b2d2      	uxtb	r2, r2
   b50bc:	440b      	add	r3, r1
   b50be:	4299      	cmp	r1, r3
   b50c0:	d017      	beq.n	b50f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b50c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b50c6:	4010      	ands	r0, r2
   b50c8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b50cc:	e7f7      	b.n	b50be <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b50ce:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b50d0:	4299      	cmp	r1, r3
   b50d2:	d00e      	beq.n	b50f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b50d4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b50d8:	4050      	eors	r0, r2
   b50da:	f801 0c01 	strb.w	r0, [r1, #-1]
   b50de:	e7f7      	b.n	b50d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b50e0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b50e2:	4299      	cmp	r1, r3
   b50e4:	d005      	beq.n	b50f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b50e6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b50ea:	4310      	orrs	r0, r2
   b50ec:	f801 0c01 	strb.w	r0, [r1, #-1]
   b50f0:	e7f7      	b.n	b50e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b50f2:	bd70      	pop	{r4, r5, r6, pc}

000b50f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b50f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b50f6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b50f8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b50fc:	db76      	blt.n	b51ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b50fe:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5102:	42b1      	cmp	r1, r6
   b5104:	da72      	bge.n	b51ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5106:	2a00      	cmp	r2, #0
      __h += __y;
   b5108:	bfbe      	ittt	lt
   b510a:	189b      	addlt	r3, r3, r2
   b510c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b510e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5110:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5114:	18d7      	adds	r7, r2, r3
   b5116:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5118:	bfc4      	itt	gt
   b511a:	1aa3      	subgt	r3, r4, r2
   b511c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b511e:	2b00      	cmp	r3, #0
   b5120:	dd64      	ble.n	b51ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5122:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5126:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5128:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b512c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5130:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5132:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5136:	d023      	beq.n	b5180 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5138:	f1c2 0208 	rsb	r2, r2, #8
   b513c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b513e:	492d      	ldr	r1, [pc, #180]	; (b51f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5140:	4293      	cmp	r3, r2
   b5142:	bf3c      	itt	cc
   b5144:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5148:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b514c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b514e:	bf3c      	itt	cc
   b5150:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5154:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5158:	2d01      	cmp	r5, #1
   b515a:	d007      	beq.n	b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b515c:	2d02      	cmp	r5, #2
   b515e:	d02e      	beq.n	b51be <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5160:	b94d      	cbnz	r5, b5176 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5162:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5166:	ea2c 0101 	bic.w	r1, ip, r1
   b516a:	e003      	b.n	b5174 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b516c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5170:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5174:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5176:	4293      	cmp	r3, r2
   b5178:	d338      	bcc.n	b51ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b517a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b517e:	440c      	add	r4, r1
        h -= mod;
   b5180:	1a9a      	subs	r2, r3, r2
   b5182:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5184:	2a07      	cmp	r2, #7
   b5186:	d90e      	bls.n	b51a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5188:	2d02      	cmp	r5, #2
   b518a:	d11d      	bne.n	b51c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b518c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b518e:	7821      	ldrb	r1, [r4, #0]
   b5190:	43c9      	mvns	r1, r1
   b5192:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5194:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5196:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b519a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b519c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b519e:	440c      	add	r4, r1
            } while(h >= 8);
   b51a0:	d8f5      	bhi.n	b518e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b51a2:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b51a6:	b30a      	cbz	r2, b51ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b51a8:	4b13      	ldr	r3, [pc, #76]	; (b51f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b51aa:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b51ac:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b51ae:	d01a      	beq.n	b51e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b51b0:	2d02      	cmp	r5, #2
   b51b2:	d01c      	beq.n	b51ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b51b4:	b9d5      	cbnz	r5, b51ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b51b6:	7822      	ldrb	r2, [r4, #0]
   b51b8:	ea22 0303 	bic.w	r3, r2, r3
   b51bc:	e015      	b.n	b51ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b51be:	f817 c006 	ldrb.w	ip, [r7, r6]
   b51c2:	ea81 010c 	eor.w	r1, r1, ip
   b51c6:	e7d5      	b.n	b5174 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b51c8:	1e29      	subs	r1, r5, #0
   b51ca:	bf18      	it	ne
   b51cc:	2101      	movne	r1, #1
   b51ce:	4249      	negs	r1, r1
   b51d0:	b2c9      	uxtb	r1, r1
   b51d2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b51d4:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b51d6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b51d8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b51dc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b51de:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b51e0:	4434      	add	r4, r6
            } while(h >= 8);
   b51e2:	d8f7      	bhi.n	b51d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b51e4:	e7dd      	b.n	b51a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b51e6:	7822      	ldrb	r2, [r4, #0]
   b51e8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b51ea:	7023      	strb	r3, [r4, #0]
}
   b51ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b51ee:	7822      	ldrb	r2, [r4, #0]
   b51f0:	4053      	eors	r3, r2
   b51f2:	e7fa      	b.n	b51ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b51f4:	000bae7c 	.word	0x000bae7c
   b51f8:	000bae84 	.word	0x000bae84

000b51fc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b51fc:	b470      	push	{r4, r5, r6}
   b51fe:	4614      	mov	r4, r2
  switch(rotation) {
   b5200:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5202:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5206:	2a02      	cmp	r2, #2
   b5208:	d00d      	beq.n	b5226 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b520a:	2a03      	cmp	r2, #3
   b520c:	d018      	beq.n	b5240 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b520e:	2a01      	cmp	r2, #1
   b5210:	d111      	bne.n	b5236 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5212:	8902      	ldrh	r2, [r0, #8]
   b5214:	43e4      	mvns	r4, r4
   b5216:	4414      	add	r4, r2
   b5218:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b521a:	9603      	str	r6, [sp, #12]
   b521c:	460a      	mov	r2, r1
   b521e:	4621      	mov	r1, r4
}
   b5220:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5222:	f7ff bf67 	b.w	b50f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5226:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5228:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b522a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b522c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b522e:	4414      	add	r4, r2
    x -= (w-1);
   b5230:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5232:	b224      	sxth	r4, r4
    x -= (w-1);
   b5234:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5236:	9603      	str	r6, [sp, #12]
   b5238:	4622      	mov	r2, r4
}
   b523a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b523c:	f7ff bf16 	b.w	b506c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5240:	8945      	ldrh	r5, [r0, #10]
   b5242:	4419      	add	r1, r3
   b5244:	1a69      	subs	r1, r5, r1
   b5246:	b209      	sxth	r1, r1
    break;
   b5248:	e7e7      	b.n	b521a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b524a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b524a:	b430      	push	{r4, r5}
   b524c:	4614      	mov	r4, r2
  switch(rotation) {
   b524e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5250:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5254:	2a02      	cmp	r2, #2
   b5256:	d00d      	beq.n	b5274 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5258:	2a03      	cmp	r2, #3
   b525a:	d018      	beq.n	b528e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b525c:	2a01      	cmp	r2, #1
   b525e:	d111      	bne.n	b5284 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5260:	18e2      	adds	r2, r4, r3
   b5262:	8904      	ldrh	r4, [r0, #8]
   b5264:	1aa4      	subs	r4, r4, r2
   b5266:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5268:	9502      	str	r5, [sp, #8]
   b526a:	460a      	mov	r2, r1
   b526c:	4621      	mov	r1, r4
}
   b526e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5270:	f7ff befc 	b.w	b506c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5274:	8902      	ldrh	r2, [r0, #8]
   b5276:	43c9      	mvns	r1, r1
   b5278:	4411      	add	r1, r2
    y -= (h-1);
   b527a:	18e2      	adds	r2, r4, r3
   b527c:	8944      	ldrh	r4, [r0, #10]
   b527e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5280:	b209      	sxth	r1, r1
    y -= (h-1);
   b5282:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5284:	9502      	str	r5, [sp, #8]
   b5286:	4622      	mov	r2, r4
}
   b5288:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b528a:	f7ff bf33 	b.w	b50f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b528e:	8942      	ldrh	r2, [r0, #10]
   b5290:	43c9      	mvns	r1, r1
   b5292:	4411      	add	r1, r2
   b5294:	b209      	sxth	r1, r1
    break;
   b5296:	e7e7      	b.n	b5268 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5298 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b529c:	4604      	mov	r4, r0
  TRANSACTION_START
   b529e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b52a0:	2800      	cmp	r0, #0
   b52a2:	d042      	beq.n	b532a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b52a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b52a6:	f001 f8f3 	bl	b6490 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b52aa:	4947      	ldr	r1, [pc, #284]	; (b53c8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b52ac:	2205      	movs	r2, #5
   b52ae:	4620      	mov	r0, r4
   b52b0:	f7ff fd27 	bl	b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b52b4:	8921      	ldrh	r1, [r4, #8]
   b52b6:	3901      	subs	r1, #1
   b52b8:	4620      	mov	r0, r4
   b52ba:	b2c9      	uxtb	r1, r1
   b52bc:	f7ff fcb2 	bl	b4c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b52c0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b52c4:	1dde      	adds	r6, r3, #7
   b52c6:	bf48      	it	mi
   b52c8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b52cc:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b52d0:	8923      	ldrh	r3, [r4, #8]
   b52d2:	10f6      	asrs	r6, r6, #3
   b52d4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b52d8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b52dc:	2800      	cmp	r0, #0
   b52de:	d03a      	beq.n	b5356 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b52e0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b52e4:	f001 f8e2 	bl	b64ac <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b52e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b52ea:	6803      	ldr	r3, [r0, #0]
   b52ec:	2140      	movs	r1, #64	; 0x40
   b52ee:	689b      	ldr	r3, [r3, #8]
   b52f0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b52f2:	2701      	movs	r7, #1
    while(count--) {
   b52f4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b52f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b52f8:	d024      	beq.n	b5344 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b52fa:	2f1f      	cmp	r7, #31
   b52fc:	d90c      	bls.n	b5318 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b52fe:	f001 f8dc 	bl	b64ba <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5302:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5306:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5308:	f001 f8d0 	bl	b64ac <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b530c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b530e:	6803      	ldr	r3, [r0, #0]
   b5310:	2140      	movs	r1, #64	; 0x40
   b5312:	689b      	ldr	r3, [r3, #8]
   b5314:	4798      	blx	r3
        bytesOut = 1;
   b5316:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5318:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b531a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b531e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5320:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5322:	689b      	ldr	r3, [r3, #8]
   b5324:	4798      	blx	r3
      bytesOut++;
   b5326:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5328:	e7e4      	b.n	b52f4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b532a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b532c:	b118      	cbz	r0, b5336 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b532e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5332:	f001 fbaf 	bl	b6a94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5336:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b533a:	2100      	movs	r1, #0
   b533c:	b280      	uxth	r0, r0
   b533e:	f002 f9ac 	bl	b769a <digitalWrite>
   b5342:	e7b2      	b.n	b52aa <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5344:	f001 f8b9 	bl	b64ba <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5348:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b534a:	b378      	cbz	r0, b53ac <_ZN16Adafruit_SSD13067displayEv+0x114>
   b534c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b534e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5352:	f001 b89d 	b.w	b6490 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5356:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b535a:	2101      	movs	r1, #1
   b535c:	b280      	uxth	r0, r0
   b535e:	f002 f99c 	bl	b769a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5362:	42ae      	cmp	r6, r5
   b5364:	d0f0      	beq.n	b5348 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b5366:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5368:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b536c:	b118      	cbz	r0, b5376 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b536e:	4649      	mov	r1, r9
   b5370:	f001 fbfe 	bl	b6b70 <_ZN8SPIClass8transferEh>
   b5374:	e7f5      	b.n	b5362 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5376:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5378:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b537c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5380:	ea09 0108 	and.w	r1, r9, r8
   b5384:	b280      	uxth	r0, r0
   b5386:	f002 f988 	bl	b769a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b538a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b538e:	2101      	movs	r1, #1
   b5390:	b280      	uxth	r0, r0
   b5392:	f002 f982 	bl	b769a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5396:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b539a:	2100      	movs	r1, #0
   b539c:	b280      	uxth	r0, r0
   b539e:	f002 f97c 	bl	b769a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b53a2:	3f01      	subs	r7, #1
   b53a4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b53a8:	d1e8      	bne.n	b537c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b53aa:	e7da      	b.n	b5362 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b53ac:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b53b0:	2101      	movs	r1, #1
   b53b2:	b280      	uxth	r0, r0
   b53b4:	f002 f971 	bl	b769a <digitalWrite>
   b53b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b53ba:	b118      	cbz	r0, b53c4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b53bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b53c0:	f001 bb4e 	b.w	b6a60 <_ZN8SPIClass14endTransactionEv>
}
   b53c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b53c8:	000baea8 	.word	0x000baea8

000b53cc <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b53cc:	2100      	movs	r1, #0
   b53ce:	220a      	movs	r2, #10
   b53d0:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b53d4:	4770      	bx	lr

000b53d6 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b53d6:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b53d8:	b510      	push	{r4, lr}
   b53da:	4604      	mov	r4, r0
    this->pin = pin;
   b53dc:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b53de:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b53e0:	b288      	uxth	r0, r1
   b53e2:	f002 f973 	bl	b76cc <digitalRead>
   b53e6:	b108      	cbz	r0, b53ec <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b53e8:	2303      	movs	r3, #3
   b53ea:	71a3      	strb	r3, [r4, #6]
   b53ec:	f000 fd44 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b53f0:	6020      	str	r0, [r4, #0]
#endif
}
   b53f2:	bd10      	pop	{r4, pc}

000b53f4 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b53f4:	b538      	push	{r3, r4, r5, lr}
   b53f6:	460c      	mov	r4, r1
   b53f8:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b53fa:	4611      	mov	r1, r2
   b53fc:	b2a0      	uxth	r0, r4
   b53fe:	f002 f93b 	bl	b7678 <pinMode>
  
  this->attach(pin);
   b5402:	4621      	mov	r1, r4
   b5404:	4628      	mov	r0, r5
}
   b5406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b540a:	f7ff bfe4 	b.w	b53d6 <_ZN8Debounce6attachEi>

000b540e <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b540e:	b538      	push	{r3, r4, r5, lr}
   b5410:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5412:	79c0      	ldrb	r0, [r0, #7]
   b5414:	f002 f95a 	bl	b76cc <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5418:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b541a:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b541c:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5420:	bf18      	it	ne
   b5422:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5424:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5428:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b542a:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b542c:	d00a      	beq.n	b5444 <_ZN8Debounce6updateEv+0x36>
   b542e:	f000 fd23 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5432:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5434:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5436:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b543a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b543c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b543e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5442:	bd38      	pop	{r3, r4, r5, pc}
   b5444:	f000 fd18 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5448:	6823      	ldr	r3, [r4, #0]
   b544a:	1ac0      	subs	r0, r0, r3
   b544c:	88a3      	ldrh	r3, [r4, #4]
   b544e:	4298      	cmp	r0, r3
   b5450:	d3f4      	bcc.n	b543c <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5452:	79a3      	ldrb	r3, [r4, #6]
   b5454:	f003 0301 	and.w	r3, r3, #1
   b5458:	42ab      	cmp	r3, r5
   b545a:	d0ef      	beq.n	b543c <_ZN8Debounce6updateEv+0x2e>
   b545c:	f000 fd0c 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5460:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5462:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5464:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5468:	f043 0308 	orr.w	r3, r3, #8
   b546c:	e7e5      	b.n	b543a <_ZN8Debounce6updateEv+0x2c>

000b546e <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b546e:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5472:	b510      	push	{r4, lr}
   b5474:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5476:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5478:	b113      	cbz	r3, b5480 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b547a:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b547c:	f000 fcd4 	bl	b5e28 <os_mutex_lock>
#endif
#endif
#endif
        }
   b5480:	4620      	mov	r0, r4
   b5482:	bd10      	pop	{r4, pc}

000b5484 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5484:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5486:	6803      	ldr	r3, [r0, #0]
   b5488:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b548c:	4604      	mov	r4, r0
            if (mqtt->thread)
   b548e:	b112      	cbz	r2, b5496 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5490:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5492:	f000 fcd1 	bl	b5e38 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5496:	4620      	mov	r0, r4
   b5498:	bd10      	pop	{r4, pc}

000b549a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b549a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b549c:	461f      	mov	r7, r3
   b549e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b54a2:	4604      	mov	r4, r0
   b54a4:	460d      	mov	r5, r1
   b54a6:	4616      	mov	r6, r2
    if (thread) {
   b54a8:	b12b      	cbz	r3, b54b6 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b54aa:	2301      	movs	r3, #1
   b54ac:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b54b0:	3058      	adds	r0, #88	; 0x58
   b54b2:	f000 fca9 	bl	b5e08 <os_mutex_create>
    }
    this->callback = callback;
   b54b6:	9b08      	ldr	r3, [sp, #32]
   b54b8:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b54ba:	2300      	movs	r3, #0
   b54bc:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b54be:	b106      	cbz	r6, b54c2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b54c0:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b54c2:	b125      	cbz	r5, b54ce <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b54c4:	4629      	mov	r1, r5
   b54c6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b54ca:	f001 fbb6 	bl	b6c3a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b54ce:	9b06      	ldr	r3, [sp, #24]
   b54d0:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b54d2:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b54d4:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b54d6:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b54da:	2bff      	cmp	r3, #255	; 0xff
   b54dc:	bfb8      	it	lt
   b54de:	23ff      	movlt	r3, #255	; 0xff
   b54e0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b54e4:	b108      	cbz	r0, b54ea <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b54e6:	f7fe fdda 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b54ea:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b54ee:	f7fe fdd4 	bl	b409a <_Znaj>
   b54f2:	61e0      	str	r0, [r4, #28]
}
   b54f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b54f8 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b54f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b54fc:	4604      	mov	r4, r0
            bool thread) {
   b54fe:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5500:	4617      	mov	r7, r2
   b5502:	4698      	mov	r8, r3
   b5504:	460e      	mov	r6, r1
            bool thread) {
   b5506:	f001 feab 	bl	b7260 <_ZN9TCPClientC1Ev>
   b550a:	490d      	ldr	r1, [pc, #52]	; (b5540 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b550c:	61e5      	str	r5, [r4, #28]
   b550e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5512:	f001 fb7e 	bl	b6c12 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5516:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b551a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b551c:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5520:	22ff      	movs	r2, #255	; 0xff
   b5522:	230f      	movs	r3, #15
   b5524:	e9cd 3200 	strd	r3, r2, [sp]
   b5528:	4620      	mov	r0, r4
            bool thread) {
   b552a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b552e:	463b      	mov	r3, r7
   b5530:	462a      	mov	r2, r5
   b5532:	4631      	mov	r1, r6
   b5534:	f7ff ffb1 	bl	b549a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5538:	4620      	mov	r0, r4
   b553a:	b004      	add	sp, #16
   b553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5540:	000ba3bc 	.word	0x000ba3bc

000b5544 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5544:	b510      	push	{r4, lr}
   b5546:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5548:	4620      	mov	r0, r4
   b554a:	f001 fde5 	bl	b7118 <_ZN9TCPClient9availableEv>
   b554e:	2800      	cmp	r0, #0
   b5550:	d0fa      	beq.n	b5548 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5552:	4620      	mov	r0, r4
   b5554:	f001 fbca 	bl	b6cec <_ZN9TCPClient4readEv>
}
   b5558:	b2c0      	uxtb	r0, r0
   b555a:	bd10      	pop	{r4, pc}

000b555c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b555c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5560:	4605      	mov	r5, r0
   b5562:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5564:	f7ff ffee 	bl	b5544 <_ZN4MQTT8readByteEv>
   b5568:	69eb      	ldr	r3, [r5, #28]
   b556a:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b556c:	69eb      	ldr	r3, [r5, #28]
   b556e:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b5572:	f04f 0901 	mov.w	r9, #1
   b5576:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b557a:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b557c:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b557e:	4628      	mov	r0, r5
   b5580:	f7ff ffe0 	bl	b5544 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5584:	4626      	mov	r6, r4
   b5586:	69eb      	ldr	r3, [r5, #28]
   b5588:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b558a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b558e:	fb13 f309 	smulbb	r3, r3, r9
   b5592:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5594:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5596:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5598:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b559a:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b559c:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b55a0:	d4ed      	bmi.n	b557e <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b55a2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b55a4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b55a8:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b55ac:	d11e      	bne.n	b55ec <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b55ae:	4628      	mov	r0, r5
   b55b0:	f7ff ffc8 	bl	b5544 <_ZN4MQTT8readByteEv>
   b55b4:	69eb      	ldr	r3, [r5, #28]
   b55b6:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b55b8:	4628      	mov	r0, r5
   b55ba:	f7ff ffc3 	bl	b5544 <_ZN4MQTT8readByteEv>
   b55be:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b55c0:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b55c2:	b2b6      	uxth	r6, r6
   b55c4:	69eb      	ldr	r3, [r5, #28]
   b55c6:	b2a4      	uxth	r4, r4
   b55c8:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b55ca:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b55cc:	b2b6      	uxth	r6, r6
   b55ce:	42be      	cmp	r6, r7
   b55d0:	d20e      	bcs.n	b55f0 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b55d2:	4628      	mov	r0, r5
   b55d4:	f7ff ffb6 	bl	b5544 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b55d8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b55dc:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b55de:	bf84      	itt	hi
   b55e0:	69eb      	ldrhi	r3, [r5, #28]
   b55e2:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b55e4:	3401      	adds	r4, #1
   b55e6:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b55e8:	3601      	adds	r6, #1
   b55ea:	e7ef      	b.n	b55cc <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b55ec:	2600      	movs	r6, #0
   b55ee:	e7ed      	b.n	b55cc <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b55f0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b55f4:	42a3      	cmp	r3, r4
   b55f6:	bf2c      	ite	cs
   b55f8:	4620      	movcs	r0, r4
   b55fa:	2000      	movcc	r0, #0
   b55fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5600 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5604:	4615      	mov	r5, r2
   b5606:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5608:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b560a:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b560c:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b560e:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5610:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5612:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b5616:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b561a:	f103 0401 	add.w	r4, r3, #1
   b561e:	4403      	add	r3, r0
            digit |= 0x80;
   b5620:	bf88      	it	hi
   b5622:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b5626:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b562a:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b562e:	b2e4      	uxtb	r4, r4
   b5630:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5634:	d81e      	bhi.n	b5674 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b5636:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b563a:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b563e:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5640:	4622      	mov	r2, r4
   b5642:	a901      	add	r1, sp, #4
   b5644:	4428      	add	r0, r5
    buf[4-llen] = header;
   b5646:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b564a:	f002 ff0c 	bl	b8466 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b564e:	1c72      	adds	r2, r6, #1
   b5650:	4422      	add	r2, r4
   b5652:	4641      	mov	r1, r8
   b5654:	4638      	mov	r0, r7
   b5656:	f001 fb34 	bl	b6cc2 <_ZN9TCPClient5writeEPKhj>
   b565a:	4605      	mov	r5, r0
   b565c:	f000 fc0c 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5660:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b5662:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5664:	4432      	add	r2, r6
   b5666:	b2a8      	uxth	r0, r5
}
   b5668:	1a13      	subs	r3, r2, r0
   b566a:	4258      	negs	r0, r3
   b566c:	4158      	adcs	r0, r3
   b566e:	b002      	add	sp, #8
   b5670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5674:	4623      	mov	r3, r4
   b5676:	e7ca      	b.n	b560e <_ZN4MQTT5writeEhPht+0xe>

000b5678 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5678:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b567a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b567c:	4605      	mov	r5, r0
    pos += 2;
   b567e:	b298      	uxth	r0, r3
   b5680:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b5682:	5cce      	ldrb	r6, [r1, r3]
   b5684:	b29c      	uxth	r4, r3
   b5686:	b156      	cbz	r6, b569e <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5688:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b568c:	4584      	cmp	ip, r0
   b568e:	f103 0701 	add.w	r7, r3, #1
   b5692:	d904      	bls.n	b569e <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5694:	1c44      	adds	r4, r0, #1
   b5696:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5698:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b569a:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b569c:	e7f1      	b.n	b5682 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b569e:	b299      	uxth	r1, r3
   b56a0:	1a41      	subs	r1, r0, r1
   b56a2:	440a      	add	r2, r1
   b56a4:	0a21      	lsrs	r1, r4, #8
   b56a6:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b56aa:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b56ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b56b0 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b56b0:	b538      	push	{r3, r4, r5, lr}
   b56b2:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b56b4:	f001 fc52 	bl	b6f5c <_ZN9TCPClient9connectedEv>
   b56b8:	2800      	cmp	r0, #0
   b56ba:	bf14      	ite	ne
   b56bc:	2501      	movne	r5, #1
   b56be:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b56c0:	d102      	bne.n	b56c8 <_ZN4MQTT11isConnectedEv+0x18>
   b56c2:	4620      	mov	r0, r4
   b56c4:	f001 fd82 	bl	b71cc <_ZN9TCPClient4stopEv>
    return rc;
}
   b56c8:	4628      	mov	r0, r5
   b56ca:	bd38      	pop	{r3, r4, r5, pc}

000b56cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b56cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b56d0:	b088      	sub	sp, #32
   b56d2:	4604      	mov	r4, r0
   b56d4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b56d8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b56dc:	4689      	mov	r9, r1
   b56de:	4617      	mov	r7, r2
   b56e0:	461e      	mov	r6, r3
    if (!isConnected()) {
   b56e2:	f7ff ffe5 	bl	b56b0 <_ZN4MQTT11isConnectedEv>
   b56e6:	4605      	mov	r5, r0
   b56e8:	2800      	cmp	r0, #0
   b56ea:	f040 80cd 	bne.w	b5888 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b56ee:	4621      	mov	r1, r4
   b56f0:	a801      	add	r0, sp, #4
   b56f2:	f7ff febc 	bl	b546e <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b56f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b56f8:	2900      	cmp	r1, #0
   b56fa:	f040 8088 	bne.w	b580e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b56fe:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5702:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5704:	462b      	mov	r3, r5
   b5706:	4620      	mov	r0, r4
   b5708:	f001 fbaa 	bl	b6e60 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b570c:	2800      	cmp	r0, #0
   b570e:	d07a      	beq.n	b5806 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5710:	2301      	movs	r3, #1
   b5712:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b5714:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5718:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b571a:	2b04      	cmp	r3, #4
   b571c:	4b5b      	ldr	r3, [pc, #364]	; (b588c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b571e:	f040 8081 	bne.w	b5824 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b5722:	6818      	ldr	r0, [r3, #0]
   b5724:	8899      	ldrh	r1, [r3, #4]
   b5726:	799b      	ldrb	r3, [r3, #6]
   b5728:	f8ad 100c 	strh.w	r1, [sp, #12]
   b572c:	f88d 300e 	strb.w	r3, [sp, #14]
   b5730:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5732:	f8c2 0005 	str.w	r0, [r2, #5]
   b5736:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b573a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b573e:	f8a2 1009 	strh.w	r1, [r2, #9]
   b5742:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b5744:	230c      	movs	r3, #12
            if (willTopic) {
   b5746:	f1b8 0f00 	cmp.w	r8, #0
   b574a:	f000 8081 	beq.w	b5850 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b574e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b5752:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b5756:	0140      	lsls	r0, r0, #5
   b5758:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b575c:	f040 0006 	orr.w	r0, r0, #6
   b5760:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b5762:	f1ba 0f00 	cmp.w	sl, #0
   b5766:	d101      	bne.n	b576c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5768:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b576c:	b11f      	cbz	r7, b5776 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b576e:	2e00      	cmp	r6, #0
   b5770:	d170      	bne.n	b5854 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b5772:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b5776:	69e2      	ldr	r2, [r4, #28]
   b5778:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b577a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b577c:	69e1      	ldr	r1, [r4, #28]
   b577e:	1c58      	adds	r0, r3, #1
   b5780:	1212      	asrs	r2, r2, #8
   b5782:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b5784:	1c9a      	adds	r2, r3, #2
   b5786:	69e1      	ldr	r1, [r4, #28]
   b5788:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b578a:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b578c:	3303      	adds	r3, #3
   b578e:	69e2      	ldr	r2, [r4, #28]
   b5790:	4649      	mov	r1, r9
   b5792:	4620      	mov	r0, r4
   b5794:	f7ff ff70 	bl	b5678 <_ZN4MQTT11writeStringEPKcPht>
   b5798:	4603      	mov	r3, r0
            if (willTopic) {
   b579a:	f1b8 0f00 	cmp.w	r8, #0
   b579e:	d00b      	beq.n	b57b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b57a0:	69e2      	ldr	r2, [r4, #28]
   b57a2:	4641      	mov	r1, r8
   b57a4:	4620      	mov	r0, r4
   b57a6:	f7ff ff67 	bl	b5678 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b57aa:	69e2      	ldr	r2, [r4, #28]
   b57ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b57ae:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b57b0:	4620      	mov	r0, r4
   b57b2:	f7ff ff61 	bl	b5678 <_ZN4MQTT11writeStringEPKcPht>
   b57b6:	4603      	mov	r3, r0
            if(user != NULL) {
   b57b8:	b167      	cbz	r7, b57d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b57ba:	69e2      	ldr	r2, [r4, #28]
   b57bc:	4639      	mov	r1, r7
   b57be:	4620      	mov	r0, r4
   b57c0:	f7ff ff5a 	bl	b5678 <_ZN4MQTT11writeStringEPKcPht>
   b57c4:	4603      	mov	r3, r0
                if(pass != NULL) {
   b57c6:	b12e      	cbz	r6, b57d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b57c8:	69e2      	ldr	r2, [r4, #28]
   b57ca:	4631      	mov	r1, r6
   b57cc:	4620      	mov	r0, r4
   b57ce:	f7ff ff53 	bl	b5678 <_ZN4MQTT11writeStringEPKcPht>
   b57d2:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b57d4:	3b05      	subs	r3, #5
   b57d6:	69e2      	ldr	r2, [r4, #28]
   b57d8:	b29b      	uxth	r3, r3
   b57da:	2110      	movs	r1, #16
   b57dc:	4620      	mov	r0, r4
   b57de:	f7ff ff0f 	bl	b5600 <_ZN4MQTT5writeEhPht>
   b57e2:	f000 fb49 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b57e6:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b57ea:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b57ee:	4620      	mov	r0, r4
   b57f0:	f001 fc92 	bl	b7118 <_ZN9TCPClient9availableEv>
   b57f4:	bb88      	cbnz	r0, b585a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b57f6:	f000 fb3f 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b57fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b57fc:	1ac0      	subs	r0, r0, r3
   b57fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5800:	4373      	muls	r3, r6
   b5802:	4298      	cmp	r0, r3
   b5804:	d9f3      	bls.n	b57ee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5806:	4620      	mov	r0, r4
   b5808:	f001 fce0 	bl	b71cc <_ZN9TCPClient4stopEv>
   b580c:	e035      	b.n	b587a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b580e:	a802      	add	r0, sp, #8
   b5810:	f000 fed4 	bl	b65bc <_ZN9IPAddressC1EPKh>
   b5814:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5818:	462b      	mov	r3, r5
   b581a:	a902      	add	r1, sp, #8
   b581c:	4620      	mov	r0, r4
   b581e:	f001 fbff 	bl	b7020 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5822:	e773      	b.n	b570c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5824:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5828:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b582c:	7bdb      	ldrb	r3, [r3, #15]
   b582e:	f10d 0c08 	add.w	ip, sp, #8
   b5832:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b5836:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b583a:	ab02      	add	r3, sp, #8
   b583c:	cb03      	ldmia	r3!, {r0, r1}
   b583e:	f8c2 0005 	str.w	r0, [r2, #5]
   b5842:	f8c2 1009 	str.w	r1, [r2, #9]
   b5846:	f89c 3000 	ldrb.w	r3, [ip]
   b584a:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b584c:	230e      	movs	r3, #14
   b584e:	e77a      	b.n	b5746 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5850:	2002      	movs	r0, #2
   b5852:	e786      	b.n	b5762 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5854:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5858:	e78d      	b.n	b5776 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b585a:	a902      	add	r1, sp, #8
   b585c:	4620      	mov	r0, r4
   b585e:	f7ff fe7d 	bl	b555c <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b5862:	2804      	cmp	r0, #4
   b5864:	d1cf      	bne.n	b5806 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b5866:	69e3      	ldr	r3, [r4, #28]
   b5868:	78de      	ldrb	r6, [r3, #3]
   b586a:	2e00      	cmp	r6, #0
   b586c:	d1cb      	bne.n	b5806 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b586e:	f000 fb03 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b5872:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b5874:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b5876:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b587a:	a801      	add	r0, sp, #4
   b587c:	f7ff fe02 	bl	b5484 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5880:	4628      	mov	r0, r5
   b5882:	b008      	add	sp, #32
   b5884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b5888:	2500      	movs	r5, #0
   b588a:	e7f9      	b.n	b5880 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b588c:	000baead 	.word	0x000baead

000b5890 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b5890:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b5892:	2301      	movs	r3, #1
   b5894:	2204      	movs	r2, #4
   b5896:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b589a:	2300      	movs	r3, #0
   b589c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b58a0:	e9cd 3300 	strd	r3, r3, [sp]
   b58a4:	461a      	mov	r2, r3
   b58a6:	f7ff ff11 	bl	b56cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b58aa:	b007      	add	sp, #28
   b58ac:	f85d fb04 	ldr.w	pc, [sp], #4

000b58b0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b58b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58b4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b58b8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b58bc:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b58c0:	4604      	mov	r4, r0
   b58c2:	468b      	mov	fp, r1
   b58c4:	4616      	mov	r6, r2
   b58c6:	461f      	mov	r7, r3
    if (isConnected()) {
   b58c8:	f7ff fef2 	bl	b56b0 <_ZN4MQTT11isConnectedEv>
   b58cc:	4682      	mov	sl, r0
   b58ce:	2800      	cmp	r0, #0
   b58d0:	d051      	beq.n	b5976 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b58d2:	4621      	mov	r1, r4
   b58d4:	a801      	add	r0, sp, #4
   b58d6:	f7ff fdca 	bl	b546e <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b58da:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b58de:	69e0      	ldr	r0, [r4, #28]
   b58e0:	2100      	movs	r1, #0
   b58e2:	f002 fdce 	bl	b8482 <memset>
        length = writeString(topic, buffer, length);
   b58e6:	2305      	movs	r3, #5
   b58e8:	69e2      	ldr	r2, [r4, #28]
   b58ea:	4659      	mov	r1, fp
   b58ec:	4620      	mov	r0, r4
   b58ee:	f7ff fec3 	bl	b5678 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b58f2:	1e6b      	subs	r3, r5, #1
   b58f4:	2b01      	cmp	r3, #1
   b58f6:	d815      	bhi.n	b5924 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b58f8:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b58fa:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b58fc:	3101      	adds	r1, #1
   b58fe:	b289      	uxth	r1, r1
   b5900:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5902:	0a09      	lsrs	r1, r1, #8
   b5904:	5419      	strb	r1, [r3, r0]
   b5906:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5908:	69e3      	ldr	r3, [r4, #28]
   b590a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b590c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b590e:	3002      	adds	r0, #2
   b5910:	5499      	strb	r1, [r3, r2]
   b5912:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5914:	f1b8 0f00 	cmp.w	r8, #0
   b5918:	d004      	beq.n	b5924 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b591a:	8c23      	ldrh	r3, [r4, #32]
   b591c:	1c5a      	adds	r2, r3, #1
   b591e:	8422      	strh	r2, [r4, #32]
   b5920:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5924:	2100      	movs	r1, #0
   b5926:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5928:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b592a:	69e2      	ldr	r2, [r4, #28]
   b592c:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b592e:	d90a      	bls.n	b5946 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5930:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b5934:	459c      	cmp	ip, r3
   b5936:	d906      	bls.n	b5946 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5938:	f816 c001 	ldrb.w	ip, [r6, r1]
   b593c:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5940:	3101      	adds	r1, #1
   b5942:	b289      	uxth	r1, r1
   b5944:	e7ef      	b.n	b5926 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b5946:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b594a:	2900      	cmp	r1, #0
   b594c:	bf0c      	ite	eq
   b594e:	2130      	moveq	r1, #48	; 0x30
   b5950:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b5952:	f1b9 0f00 	cmp.w	r9, #0
   b5956:	d001      	beq.n	b595c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b5958:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b595c:	2d02      	cmp	r5, #2
   b595e:	d10e      	bne.n	b597e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b5960:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b5964:	3b05      	subs	r3, #5
   b5966:	b29b      	uxth	r3, r3
   b5968:	4620      	mov	r0, r4
   b596a:	f7ff fe49 	bl	b5600 <_ZN4MQTT5writeEhPht>
   b596e:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b5970:	a801      	add	r0, sp, #4
   b5972:	f7ff fd87 	bl	b5484 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5976:	4650      	mov	r0, sl
   b5978:	b003      	add	sp, #12
   b597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b597e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b5980:	bf08      	it	eq
   b5982:	f041 0102 	orreq.w	r1, r1, #2
   b5986:	e7ed      	b.n	b5964 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b5988 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b5988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b598a:	9c08      	ldr	r4, [sp, #32]
   b598c:	9403      	str	r4, [sp, #12]
   b598e:	2400      	movs	r4, #0
   b5990:	9402      	str	r4, [sp, #8]
   b5992:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b5996:	9401      	str	r4, [sp, #4]
   b5998:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b599c:	9400      	str	r4, [sp, #0]
   b599e:	f7ff ff87 	bl	b58b0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b59a2:	b004      	add	sp, #16
   b59a4:	bd10      	pop	{r4, pc}

000b59a6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b59a6:	b530      	push	{r4, r5, lr}
   b59a8:	b087      	sub	sp, #28
   b59aa:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b59ac:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b59ae:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b59b0:	9204      	str	r2, [sp, #16]
   b59b2:	f002 fda7 	bl	b8504 <strlen>
   b59b6:	2500      	movs	r5, #0
   b59b8:	4603      	mov	r3, r0
   b59ba:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b59be:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b59c2:	9500      	str	r5, [sp, #0]
   b59c4:	4620      	mov	r0, r4
   b59c6:	f7ff ffdf 	bl	b5988 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b59ca:	b007      	add	sp, #28
   b59cc:	bd30      	pop	{r4, r5, pc}

000b59ce <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b59ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b59d0:	4604      	mov	r4, r0
   b59d2:	460e      	mov	r6, r1
    if (isConnected()) {
   b59d4:	f7ff fe6c 	bl	b56b0 <_ZN4MQTT11isConnectedEv>
   b59d8:	4605      	mov	r5, r0
   b59da:	b1c8      	cbz	r0, b5a10 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b59dc:	4621      	mov	r1, r4
   b59de:	a801      	add	r0, sp, #4
   b59e0:	f7ff fd45 	bl	b546e <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b59e4:	69e3      	ldr	r3, [r4, #28]
   b59e6:	2262      	movs	r2, #98	; 0x62
   b59e8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b59ea:	69e3      	ldr	r3, [r4, #28]
   b59ec:	2202      	movs	r2, #2
   b59ee:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b59f0:	69e3      	ldr	r3, [r4, #28]
   b59f2:	0a32      	lsrs	r2, r6, #8
   b59f4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b59f6:	69e3      	ldr	r3, [r4, #28]
   b59f8:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b59fa:	69e1      	ldr	r1, [r4, #28]
   b59fc:	2204      	movs	r2, #4
   b59fe:	4620      	mov	r0, r4
   b5a00:	f001 f95f 	bl	b6cc2 <_ZN9TCPClient5writeEPKhj>
   b5a04:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5a06:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5a08:	bf18      	it	ne
   b5a0a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a0c:	f7ff fd3a 	bl	b5484 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a10:	4628      	mov	r0, r5
   b5a12:	b002      	add	sp, #8
   b5a14:	bd70      	pop	{r4, r5, r6, pc}

000b5a16 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a18:	4604      	mov	r4, r0
   b5a1a:	460e      	mov	r6, r1
    if (isConnected()) {
   b5a1c:	f7ff fe48 	bl	b56b0 <_ZN4MQTT11isConnectedEv>
   b5a20:	4605      	mov	r5, r0
   b5a22:	b1c8      	cbz	r0, b5a58 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5a24:	4621      	mov	r1, r4
   b5a26:	a801      	add	r0, sp, #4
   b5a28:	f7ff fd21 	bl	b546e <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5a2c:	69e3      	ldr	r3, [r4, #28]
   b5a2e:	2272      	movs	r2, #114	; 0x72
   b5a30:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5a32:	69e3      	ldr	r3, [r4, #28]
   b5a34:	2202      	movs	r2, #2
   b5a36:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5a38:	69e3      	ldr	r3, [r4, #28]
   b5a3a:	0a32      	lsrs	r2, r6, #8
   b5a3c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5a3e:	69e3      	ldr	r3, [r4, #28]
   b5a40:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5a42:	69e1      	ldr	r1, [r4, #28]
   b5a44:	2204      	movs	r2, #4
   b5a46:	4620      	mov	r0, r4
   b5a48:	f001 f93b 	bl	b6cc2 <_ZN9TCPClient5writeEPKhj>
   b5a4c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5a4e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5a50:	bf18      	it	ne
   b5a52:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a54:	f7ff fd16 	bl	b5484 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a58:	4628      	mov	r0, r5
   b5a5a:	b002      	add	sp, #8
   b5a5c:	bd70      	pop	{r4, r5, r6, pc}

000b5a5e <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5a5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a62:	ed2d 8b02 	vpush	{d8}
   b5a66:	b087      	sub	sp, #28
   b5a68:	af00      	add	r7, sp, #0
   b5a6a:	4604      	mov	r4, r0
    if (isConnected()) {
   b5a6c:	f7ff fe20 	bl	b56b0 <_ZN4MQTT11isConnectedEv>
   b5a70:	4681      	mov	r9, r0
   b5a72:	b1f8      	cbz	r0, b5ab4 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b5a74:	4621      	mov	r1, r4
   b5a76:	f107 0014 	add.w	r0, r7, #20
   b5a7a:	f7ff fcf8 	bl	b546e <_ZN4MQTT11MutexLockerC1EPS_>
   b5a7e:	f000 f9fb 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5a82:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5a88:	4353      	muls	r3, r2
   b5a8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5a8c:	1a82      	subs	r2, r0, r2
   b5a8e:	429a      	cmp	r2, r3
   b5a90:	4606      	mov	r6, r0
   b5a92:	d803      	bhi.n	b5a9c <_ZN4MQTT4loopEv+0x3e>
   b5a94:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5a96:	1a82      	subs	r2, r0, r2
   b5a98:	4293      	cmp	r3, r2
   b5a9a:	d221      	bcs.n	b5ae0 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5a9c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5aa0:	b17b      	cbz	r3, b5ac2 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	f001 fb92 	bl	b71cc <_ZN9TCPClient4stopEv>
                return false;
   b5aa8:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5aac:	f107 0014 	add.w	r0, r7, #20
   b5ab0:	f7ff fce8 	bl	b5484 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5ab4:	4648      	mov	r0, r9
   b5ab6:	371c      	adds	r7, #28
   b5ab8:	46bd      	mov	sp, r7
   b5aba:	ecbd 8b02 	vpop	{d8}
   b5abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5ac2:	69e2      	ldr	r2, [r4, #28]
   b5ac4:	21c0      	movs	r1, #192	; 0xc0
   b5ac6:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5ac8:	69e2      	ldr	r2, [r4, #28]
   b5aca:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5acc:	69e1      	ldr	r1, [r4, #28]
   b5ace:	2202      	movs	r2, #2
   b5ad0:	4620      	mov	r0, r4
   b5ad2:	f001 f8f6 	bl	b6cc2 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5ad6:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5ada:	2301      	movs	r3, #1
   b5adc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5ae0:	4620      	mov	r0, r4
   b5ae2:	f001 fb19 	bl	b7118 <_ZN9TCPClient9availableEv>
   b5ae6:	2800      	cmp	r0, #0
   b5ae8:	d0e0      	beq.n	b5aac <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5aea:	f107 0113 	add.w	r1, r7, #19
   b5aee:	4620      	mov	r0, r4
   b5af0:	f7ff fd34 	bl	b555c <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5af4:	4683      	mov	fp, r0
   b5af6:	2800      	cmp	r0, #0
   b5af8:	d0d8      	beq.n	b5aac <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5afa:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5afc:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5afe:	7819      	ldrb	r1, [r3, #0]
   b5b00:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5b04:	2a30      	cmp	r2, #48	; 0x30
   b5b06:	d17f      	bne.n	b5c08 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5b08:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5b0c:	f1ba 0f00 	cmp.w	sl, #0
   b5b10:	d0cc      	beq.n	b5aac <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b12:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5b16:	466a      	mov	r2, sp
   b5b18:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b1c:	eb03 020c 	add.w	r2, r3, ip
   b5b20:	7851      	ldrb	r1, [r2, #1]
   b5b22:	7895      	ldrb	r5, [r2, #2]
   b5b24:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5b28:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5b2a:	f105 0208 	add.w	r2, r5, #8
   b5b2e:	4669      	mov	r1, sp
   b5b30:	08d2      	lsrs	r2, r2, #3
   b5b32:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5b36:	4695      	mov	sp, r2
   b5b38:	f10c 0203 	add.w	r2, ip, #3
   b5b3c:	60fa      	str	r2, [r7, #12]
   b5b3e:	eb03 0e02 	add.w	lr, r3, r2
   b5b42:	eb0d 0205 	add.w	r2, sp, r5
   b5b46:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5b48:	f8c7 d008 	str.w	sp, [r7, #8]
   b5b4c:	607a      	str	r2, [r7, #4]
   b5b4e:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5b52:	428a      	cmp	r2, r1
   b5b54:	d006      	beq.n	b5b64 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5b56:	460a      	mov	r2, r1
   b5b58:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5b5c:	f802 8b01 	strb.w	r8, [r2], #1
   b5b60:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5b62:	e7f4      	b.n	b5b4e <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5b64:	2200      	movs	r2, #0
   b5b66:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b68:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b6c:	68f9      	ldr	r1, [r7, #12]
   b5b6e:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5b72:	ebab 020c 	sub.w	r2, fp, ip
   b5b76:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b78:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5b7c:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b80:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b82:	d125      	bne.n	b5bd0 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b84:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5b88:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5b8a:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b8c:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5b90:	f10c 0105 	add.w	r1, ip, #5
   b5b94:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5b96:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b98:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5b9c:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5b9e:	69e3      	ldr	r3, [r4, #28]
   b5ba0:	2240      	movs	r2, #64	; 0x40
   b5ba2:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5ba4:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5ba6:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5baa:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5bae:	69e3      	ldr	r3, [r4, #28]
   b5bb0:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5bb4:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5bb6:	69e3      	ldr	r3, [r4, #28]
   b5bb8:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5bbc:	69e1      	ldr	r1, [r4, #28]
   b5bbe:	2204      	movs	r2, #4
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	f001 f87e 	bl	b6cc2 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5bc6:	6266      	str	r6, [r4, #36]	; 0x24
   b5bc8:	ee18 3a10 	vmov	r3, s16
   b5bcc:	469d      	mov	sp, r3
   b5bce:	e76d      	b.n	b5aac <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5bd0:	f1b8 0f04 	cmp.w	r8, #4
   b5bd4:	d115      	bne.n	b5c02 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bd6:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5bda:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5bdc:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bde:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5be2:	f10c 0105 	add.w	r1, ip, #5
   b5be6:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5be8:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bea:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5bee:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5bf0:	69e3      	ldr	r3, [r4, #28]
   b5bf2:	2250      	movs	r2, #80	; 0x50
   b5bf4:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5bf6:	69e3      	ldr	r3, [r4, #28]
   b5bf8:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bfa:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5bfe:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5c00:	e7d5      	b.n	b5bae <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5c02:	4419      	add	r1, r3
   b5c04:	47d0      	blx	sl
   b5c06:	e7df      	b.n	b5bc8 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5c08:	2a50      	cmp	r2, #80	; 0x50
   b5c0a:	d108      	bne.n	b5c1e <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5c0c:	789a      	ldrb	r2, [r3, #2]
   b5c0e:	78d9      	ldrb	r1, [r3, #3]
   b5c10:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5c14:	b289      	uxth	r1, r1
   b5c16:	4620      	mov	r0, r4
   b5c18:	f7ff fed9 	bl	b59ce <_ZN4MQTT14publishReleaseEt>
   b5c1c:	e746      	b.n	b5aac <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5c1e:	2a40      	cmp	r2, #64	; 0x40
   b5c20:	d112      	bne.n	b5c48 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5c22:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5c24:	2a00      	cmp	r2, #0
   b5c26:	f43f af41 	beq.w	b5aac <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5c2a:	f1bb 0f04 	cmp.w	fp, #4
   b5c2e:	f47f af3d 	bne.w	b5aac <_ZN4MQTT4loopEv+0x4e>
   b5c32:	f011 0f06 	tst.w	r1, #6
   b5c36:	f47f af39 	bne.w	b5aac <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5c3a:	7899      	ldrb	r1, [r3, #2]
   b5c3c:	78d8      	ldrb	r0, [r3, #3]
   b5c3e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5c42:	b280      	uxth	r0, r0
   b5c44:	4790      	blx	r2
   b5c46:	e731      	b.n	b5aac <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5c48:	2a60      	cmp	r2, #96	; 0x60
   b5c4a:	d108      	bne.n	b5c5e <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5c4c:	789a      	ldrb	r2, [r3, #2]
   b5c4e:	78d9      	ldrb	r1, [r3, #3]
   b5c50:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5c54:	b289      	uxth	r1, r1
   b5c56:	4620      	mov	r0, r4
   b5c58:	f7ff fedd 	bl	b5a16 <_ZN4MQTT15publishCompleteEt>
   b5c5c:	e726      	b.n	b5aac <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5c5e:	2a70      	cmp	r2, #112	; 0x70
   b5c60:	d0df      	beq.n	b5c22 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5c62:	2a90      	cmp	r2, #144	; 0x90
   b5c64:	f43f af22 	beq.w	b5aac <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5c68:	2ac0      	cmp	r2, #192	; 0xc0
   b5c6a:	d10a      	bne.n	b5c82 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5c6c:	22d0      	movs	r2, #208	; 0xd0
   b5c6e:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5c70:	69e3      	ldr	r3, [r4, #28]
   b5c72:	2200      	movs	r2, #0
   b5c74:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5c76:	69e1      	ldr	r1, [r4, #28]
   b5c78:	2202      	movs	r2, #2
   b5c7a:	4620      	mov	r0, r4
   b5c7c:	f001 f821 	bl	b6cc2 <_ZN9TCPClient5writeEPKhj>
   b5c80:	e714      	b.n	b5aac <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5c82:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5c84:	bf04      	itt	eq
   b5c86:	2300      	moveq	r3, #0
   b5c88:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5c8c:	e70e      	b.n	b5aac <_ZN4MQTT4loopEv+0x4e>

000b5c8e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5c8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5c90:	4604      	mov	r4, r0
   b5c92:	460f      	mov	r7, r1
   b5c94:	4616      	mov	r6, r2
    if (isConnected()) {
   b5c96:	f7ff fd0b 	bl	b56b0 <_ZN4MQTT11isConnectedEv>
   b5c9a:	4605      	mov	r5, r0
   b5c9c:	b310      	cbz	r0, b5ce4 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5c9e:	4621      	mov	r1, r4
   b5ca0:	a801      	add	r0, sp, #4
   b5ca2:	f7ff fbe4 	bl	b546e <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5ca6:	8c23      	ldrh	r3, [r4, #32]
   b5ca8:	3301      	adds	r3, #1
   b5caa:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5cac:	b1eb      	cbz	r3, b5cea <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5cae:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5cb0:	8c23      	ldrh	r3, [r4, #32]
   b5cb2:	69e2      	ldr	r2, [r4, #28]
   b5cb4:	0a1b      	lsrs	r3, r3, #8
   b5cb6:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5cb8:	69e3      	ldr	r3, [r4, #28]
   b5cba:	8c22      	ldrh	r2, [r4, #32]
   b5cbc:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5cbe:	69e2      	ldr	r2, [r4, #28]
   b5cc0:	2307      	movs	r3, #7
   b5cc2:	4639      	mov	r1, r7
   b5cc4:	4620      	mov	r0, r4
   b5cc6:	f7ff fcd7 	bl	b5678 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5cca:	69e3      	ldr	r3, [r4, #28]
   b5ccc:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5cce:	3804      	subs	r0, #4
   b5cd0:	b283      	uxth	r3, r0
   b5cd2:	69e2      	ldr	r2, [r4, #28]
   b5cd4:	2182      	movs	r1, #130	; 0x82
   b5cd6:	4620      	mov	r0, r4
   b5cd8:	f7ff fc92 	bl	b5600 <_ZN4MQTT5writeEhPht>
   b5cdc:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5cde:	a801      	add	r0, sp, #4
   b5ce0:	f7ff fbd0 	bl	b5484 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5ce4:	4628      	mov	r0, r5
   b5ce6:	b003      	add	sp, #12
   b5ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5cea:	2301      	movs	r3, #1
   b5cec:	e7df      	b.n	b5cae <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5cee <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5cee:	2200      	movs	r2, #0
   b5cf0:	f7ff bfcd 	b.w	b5c8e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5cf4 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5cf4:	b510      	push	{r4, lr}
   b5cf6:	4b06      	ldr	r3, [pc, #24]	; (b5d10 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5cf8:	6003      	str	r3, [r0, #0]
   b5cfa:	4604      	mov	r4, r0
	if (mutex) {
   b5cfc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b5cfe:	b108      	cbz	r0, b5d04 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5d00:	f000 f88a 	bl	b5e18 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5d04:	4620      	mov	r0, r4
   b5d06:	f7fe fee7 	bl	b4ad8 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5d0a:	4620      	mov	r0, r4
   b5d0c:	bd10      	pop	{r4, pc}
   b5d0e:	bf00      	nop
   b5d10:	000baec8 	.word	0x000baec8

000b5d14 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5d14:	b510      	push	{r4, lr}
   b5d16:	4604      	mov	r4, r0
}
   b5d18:	f7ff ffec 	bl	b5cf4 <_ZN16OledWingAdafruitD1Ev>
   b5d1c:	4620      	mov	r0, r4
   b5d1e:	2170      	movs	r1, #112	; 0x70
   b5d20:	f7fe f9bf 	bl	b40a2 <_ZdlPvj>
   b5d24:	4620      	mov	r0, r4
   b5d26:	bd10      	pop	{r4, pc}

000b5d28 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5d28:	b530      	push	{r4, r5, lr}
   b5d2a:	b085      	sub	sp, #20
   b5d2c:	4604      	mov	r4, r0
   b5d2e:	460d      	mov	r5, r1
   b5d30:	f001 fcf6 	bl	b7720 <_Z19__fetch_global_Wirev>
   b5d34:	4a10      	ldr	r2, [pc, #64]	; (b5d78 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b5d36:	4911      	ldr	r1, [pc, #68]	; (b5d7c <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5d38:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5d40:	2180      	movs	r1, #128	; 0x80
   b5d42:	4603      	mov	r3, r0
   b5d44:	9200      	str	r2, [sp, #0]
   b5d46:	4620      	mov	r0, r4
   b5d48:	2220      	movs	r2, #32
   b5d4a:	f7fe ff3d 	bl	b4bc8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b5d4e:	4b0c      	ldr	r3, [pc, #48]	; (b5d80 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5d50:	6023      	str	r3, [r4, #0]
   b5d52:	2300      	movs	r3, #0
   b5d54:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5d58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5d5c:	f7ff fb36 	bl	b53cc <_ZN8DebounceC1Ev>
   b5d60:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5d64:	f7ff fb32 	bl	b53cc <_ZN8DebounceC1Ev>
   b5d68:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5d6c:	f7ff fb2e 	bl	b53cc <_ZN8DebounceC1Ev>
}
   b5d70:	4620      	mov	r0, r4
   b5d72:	b005      	add	sp, #20
   b5d74:	bd30      	pop	{r4, r5, pc}
   b5d76:	bf00      	nop
   b5d78:	00061a80 	.word	0x00061a80
   b5d7c:	000186a0 	.word	0x000186a0
   b5d80:	000baec8 	.word	0x000baec8

000b5d84 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5d84:	b513      	push	{r0, r1, r4, lr}
   b5d86:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5d88:	3050      	adds	r0, #80	; 0x50
   b5d8a:	f000 f83d 	bl	b5e08 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b5d8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5d90:	07d9      	lsls	r1, r3, #31
   b5d92:	d505      	bpl.n	b5da0 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5d94:	2202      	movs	r2, #2
   b5d96:	2104      	movs	r1, #4
   b5d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5d9c:	f7ff fb2a 	bl	b53f4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5da0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5da2:	079a      	lsls	r2, r3, #30
   b5da4:	d505      	bpl.n	b5db2 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5da6:	2200      	movs	r2, #0
   b5da8:	2103      	movs	r1, #3
   b5daa:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5dae:	f7ff fb21 	bl	b53f4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b5db2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5db4:	075b      	lsls	r3, r3, #29
   b5db6:	d505      	bpl.n	b5dc4 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5db8:	2202      	movs	r2, #2
   b5dba:	4611      	mov	r1, r2
   b5dbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5dc0:	f7ff fb18 	bl	b53f4 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5dc4:	2301      	movs	r3, #1
   b5dc6:	9300      	str	r3, [sp, #0]
   b5dc8:	223c      	movs	r2, #60	; 0x3c
   b5dca:	2102      	movs	r1, #2
   b5dcc:	4620      	mov	r0, r4
   b5dce:	f7ff f803 	bl	b4dd8 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5dd2:	b002      	add	sp, #8
   b5dd4:	bd10      	pop	{r4, pc}

000b5dd6 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b5dd6:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5dd8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5dda:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5ddc:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5dde:	d502      	bpl.n	b5de6 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5de0:	3058      	adds	r0, #88	; 0x58
   b5de2:	f7ff fb14 	bl	b540e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5de6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5de8:	079a      	lsls	r2, r3, #30
   b5dea:	d503      	bpl.n	b5df4 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5dec:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5df0:	f7ff fb0d 	bl	b540e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5df4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5df6:	075b      	lsls	r3, r3, #29
   b5df8:	d505      	bpl.n	b5e06 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5dfa:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b5e02:	f7ff bb04 	b.w	b540e <_ZN8Debounce6updateEv>
}
   b5e06:	bd10      	pop	{r4, pc}

000b5e08 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5e08:	b508      	push	{r3, lr}
   b5e0a:	4b02      	ldr	r3, [pc, #8]	; (b5e14 <os_mutex_create+0xc>)
   b5e0c:	681b      	ldr	r3, [r3, #0]
   b5e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e10:	9301      	str	r3, [sp, #4]
   b5e12:	bd08      	pop	{r3, pc}
   b5e14:	00030248 	.word	0x00030248

000b5e18 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b02      	ldr	r3, [pc, #8]	; (b5e24 <os_mutex_destroy+0xc>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e20:	9301      	str	r3, [sp, #4]
   b5e22:	bd08      	pop	{r3, pc}
   b5e24:	00030248 	.word	0x00030248

000b5e28 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5e28:	b508      	push	{r3, lr}
   b5e2a:	4b02      	ldr	r3, [pc, #8]	; (b5e34 <os_mutex_lock+0xc>)
   b5e2c:	681b      	ldr	r3, [r3, #0]
   b5e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5e30:	9301      	str	r3, [sp, #4]
   b5e32:	bd08      	pop	{r3, pc}
   b5e34:	00030248 	.word	0x00030248

000b5e38 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5e38:	b508      	push	{r3, lr}
   b5e3a:	4b02      	ldr	r3, [pc, #8]	; (b5e44 <os_mutex_unlock+0xc>)
   b5e3c:	681b      	ldr	r3, [r3, #0]
   b5e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e40:	9301      	str	r3, [sp, #4]
   b5e42:	bd08      	pop	{r3, pc}
   b5e44:	00030248 	.word	0x00030248

000b5e48 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5e48:	b508      	push	{r3, lr}
   b5e4a:	4b02      	ldr	r3, [pc, #8]	; (b5e54 <os_mutex_recursive_create+0xc>)
   b5e4c:	681b      	ldr	r3, [r3, #0]
   b5e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e50:	9301      	str	r3, [sp, #4]
   b5e52:	bd08      	pop	{r3, pc}
   b5e54:	00030248 	.word	0x00030248

000b5e58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5e58:	b508      	push	{r3, lr}
   b5e5a:	4b02      	ldr	r3, [pc, #8]	; (b5e64 <HAL_RNG_GetRandomNumber+0xc>)
   b5e5c:	681b      	ldr	r3, [r3, #0]
   b5e5e:	685b      	ldr	r3, [r3, #4]
   b5e60:	9301      	str	r3, [sp, #4]
   b5e62:	bd08      	pop	{r3, pc}
   b5e64:	00030218 	.word	0x00030218

000b5e68 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b02      	ldr	r3, [pc, #8]	; (b5e74 <HAL_Delay_Microseconds+0xc>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	68db      	ldr	r3, [r3, #12]
   b5e70:	9301      	str	r3, [sp, #4]
   b5e72:	bd08      	pop	{r3, pc}
   b5e74:	00030218 	.word	0x00030218

000b5e78 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5e78:	b508      	push	{r3, lr}
   b5e7a:	4b02      	ldr	r3, [pc, #8]	; (b5e84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5e7c:	681b      	ldr	r3, [r3, #0]
   b5e7e:	695b      	ldr	r3, [r3, #20]
   b5e80:	9301      	str	r3, [sp, #4]
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	00030218 	.word	0x00030218

000b5e88 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5e88:	b508      	push	{r3, lr}
   b5e8a:	4b02      	ldr	r3, [pc, #8]	; (b5e94 <HAL_Pin_Mode+0xc>)
   b5e8c:	681b      	ldr	r3, [r3, #0]
   b5e8e:	689b      	ldr	r3, [r3, #8]
   b5e90:	9301      	str	r3, [sp, #4]
   b5e92:	bd08      	pop	{r3, pc}
   b5e94:	0003022c 	.word	0x0003022c

000b5e98 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <HAL_Get_Pin_Mode+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	68db      	ldr	r3, [r3, #12]
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	0003022c 	.word	0x0003022c

000b5ea8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <HAL_GPIO_Write+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	691b      	ldr	r3, [r3, #16]
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	0003022c 	.word	0x0003022c

000b5eb8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <HAL_GPIO_Read+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	695b      	ldr	r3, [r3, #20]
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	0003022c 	.word	0x0003022c

000b5ec8 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <hal_i2c_set_speed+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	681b      	ldr	r3, [r3, #0]
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030228 	.word	0x00030228

000b5ed8 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <hal_i2c_begin+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	68db      	ldr	r3, [r3, #12]
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	00030228 	.word	0x00030228

000b5ee8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <hal_i2c_begin_transmission+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	699b      	ldr	r3, [r3, #24]
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	00030228 	.word	0x00030228

000b5ef8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <hal_i2c_end_transmission+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	69db      	ldr	r3, [r3, #28]
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	00030228 	.word	0x00030228

000b5f08 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <hal_i2c_write+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	6a1b      	ldr	r3, [r3, #32]
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	00030228 	.word	0x00030228

000b5f18 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <hal_i2c_available+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	00030228 	.word	0x00030228

000b5f28 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <hal_i2c_read+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	00030228 	.word	0x00030228

000b5f38 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <hal_i2c_peek+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	00030228 	.word	0x00030228

000b5f48 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <hal_i2c_flush+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	00030228 	.word	0x00030228

000b5f58 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <hal_i2c_is_enabled+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030228 	.word	0x00030228

000b5f68 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <hal_i2c_init+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	00030228 	.word	0x00030228

000b5f78 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <if_index_to_name+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	695b      	ldr	r3, [r3, #20]
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	0003026c 	.word	0x0003026c

000b5f88 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <inet_inet_ntop+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	695b      	ldr	r3, [r3, #20]
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	00030264 	.word	0x00030264

000b5f98 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <inet_htonl+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	6a1b      	ldr	r3, [r3, #32]
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	00030264 	.word	0x00030264

000b5fa8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <inet_htons+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	00030264 	.word	0x00030264

000b5fb8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <netdb_freeaddrinfo+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	689b      	ldr	r3, [r3, #8]
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	00030268 	.word	0x00030268

000b5fc8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <netdb_getaddrinfo+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	68db      	ldr	r3, [r3, #12]
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030268 	.word	0x00030268

000b5fd8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <sock_setsockopt+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	699b      	ldr	r3, [r3, #24]
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	00030238 	.word	0x00030238

000b5fe8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <sock_close+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	69db      	ldr	r3, [r3, #28]
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030238 	.word	0x00030238

000b5ff8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <sock_connect+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	6a1b      	ldr	r3, [r3, #32]
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030238 	.word	0x00030238

000b6008 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <sock_recv+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	00030238 	.word	0x00030238

000b6018 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <sock_send+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	00030238 	.word	0x00030238

000b6028 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <sock_socket+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	00030238 	.word	0x00030238

000b6038 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <hal_spi_begin+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	681b      	ldr	r3, [r3, #0]
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	00030230 	.word	0x00030230

000b6048 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <hal_spi_transfer+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	695b      	ldr	r3, [r3, #20]
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	00030230 	.word	0x00030230

000b6058 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <hal_spi_init+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	69db      	ldr	r3, [r3, #28]
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	00030230 	.word	0x00030230

000b6068 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <hal_spi_is_enabled+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	6a1b      	ldr	r3, [r3, #32]
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	00030230 	.word	0x00030230

000b6078 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <hal_spi_info+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	00030230 	.word	0x00030230

000b6088 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <hal_spi_set_settings+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	00030230 	.word	0x00030230

000b6098 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6098:	b508      	push	{r3, lr}
   b609a:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <hal_spi_acquire+0xc>)
   b609c:	681b      	ldr	r3, [r3, #0]
   b609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	bd08      	pop	{r3, pc}
   b60a4:	00030230 	.word	0x00030230

000b60a8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <hal_spi_release+0xc>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b60b0:	9301      	str	r3, [sp, #4]
   b60b2:	bd08      	pop	{r3, pc}
   b60b4:	00030230 	.word	0x00030230

000b60b8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b60b8:	b508      	push	{r3, lr}
   b60ba:	4b02      	ldr	r3, [pc, #8]	; (b60c4 <hal_usart_write+0xc>)
   b60bc:	681b      	ldr	r3, [r3, #0]
   b60be:	68db      	ldr	r3, [r3, #12]
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	bd08      	pop	{r3, pc}
   b60c4:	0003023c 	.word	0x0003023c

000b60c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b02      	ldr	r3, [pc, #8]	; (b60d4 <hal_usart_available+0xc>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	691b      	ldr	r3, [r3, #16]
   b60d0:	9301      	str	r3, [sp, #4]
   b60d2:	bd08      	pop	{r3, pc}
   b60d4:	0003023c 	.word	0x0003023c

000b60d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b60d8:	b508      	push	{r3, lr}
   b60da:	4b02      	ldr	r3, [pc, #8]	; (b60e4 <hal_usart_read+0xc>)
   b60dc:	681b      	ldr	r3, [r3, #0]
   b60de:	695b      	ldr	r3, [r3, #20]
   b60e0:	9301      	str	r3, [sp, #4]
   b60e2:	bd08      	pop	{r3, pc}
   b60e4:	0003023c 	.word	0x0003023c

000b60e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b60e8:	b508      	push	{r3, lr}
   b60ea:	4b02      	ldr	r3, [pc, #8]	; (b60f4 <hal_usart_peek+0xc>)
   b60ec:	681b      	ldr	r3, [r3, #0]
   b60ee:	699b      	ldr	r3, [r3, #24]
   b60f0:	9301      	str	r3, [sp, #4]
   b60f2:	bd08      	pop	{r3, pc}
   b60f4:	0003023c 	.word	0x0003023c

000b60f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b60f8:	b508      	push	{r3, lr}
   b60fa:	4b02      	ldr	r3, [pc, #8]	; (b6104 <hal_usart_flush+0xc>)
   b60fc:	681b      	ldr	r3, [r3, #0]
   b60fe:	69db      	ldr	r3, [r3, #28]
   b6100:	9301      	str	r3, [sp, #4]
   b6102:	bd08      	pop	{r3, pc}
   b6104:	0003023c 	.word	0x0003023c

000b6108 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <hal_usart_is_enabled+0xc>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	6a1b      	ldr	r3, [r3, #32]
   b6110:	9301      	str	r3, [sp, #4]
   b6112:	bd08      	pop	{r3, pc}
   b6114:	0003023c 	.word	0x0003023c

000b6118 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <hal_usart_available_data_for_write+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	0003023c 	.word	0x0003023c

000b6128 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <hal_usart_init_ex+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	0003023c 	.word	0x0003023c

000b6138 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <HAL_USB_USART_Init+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	681b      	ldr	r3, [r3, #0]
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	0003024c 	.word	0x0003024c

000b6148 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <HAL_USB_USART_Begin+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	685b      	ldr	r3, [r3, #4]
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	0003024c 	.word	0x0003024c

000b6158 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <HAL_USB_USART_Available_Data+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	691b      	ldr	r3, [r3, #16]
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	0003024c 	.word	0x0003024c

000b6168 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b02      	ldr	r3, [pc, #8]	; (b6174 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	695b      	ldr	r3, [r3, #20]
   b6170:	9301      	str	r3, [sp, #4]
   b6172:	bd08      	pop	{r3, pc}
   b6174:	0003024c 	.word	0x0003024c

000b6178 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b02      	ldr	r3, [pc, #8]	; (b6184 <HAL_USB_USART_Receive_Data+0xc>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	699b      	ldr	r3, [r3, #24]
   b6180:	9301      	str	r3, [sp, #4]
   b6182:	bd08      	pop	{r3, pc}
   b6184:	0003024c 	.word	0x0003024c

000b6188 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6188:	b508      	push	{r3, lr}
   b618a:	4b02      	ldr	r3, [pc, #8]	; (b6194 <HAL_USB_USART_Send_Data+0xc>)
   b618c:	681b      	ldr	r3, [r3, #0]
   b618e:	69db      	ldr	r3, [r3, #28]
   b6190:	9301      	str	r3, [sp, #4]
   b6192:	bd08      	pop	{r3, pc}
   b6194:	0003024c 	.word	0x0003024c

000b6198 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6198:	b508      	push	{r3, lr}
   b619a:	4b02      	ldr	r3, [pc, #8]	; (b61a4 <HAL_USB_USART_Flush_Data+0xc>)
   b619c:	681b      	ldr	r3, [r3, #0]
   b619e:	6a1b      	ldr	r3, [r3, #32]
   b61a0:	9301      	str	r3, [sp, #4]
   b61a2:	bd08      	pop	{r3, pc}
   b61a4:	0003024c 	.word	0x0003024c

000b61a8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <panic_+0xc>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b61b0:	9301      	str	r3, [sp, #4]
   b61b2:	bd08      	pop	{r3, pc}
   b61b4:	00030260 	.word	0x00030260

000b61b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b61b8:	b508      	push	{r3, lr}
   b61ba:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <log_message+0xc>)
   b61bc:	681b      	ldr	r3, [r3, #0]
   b61be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b61c0:	9301      	str	r3, [sp, #4]
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	00030260 	.word	0x00030260

000b61c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b02      	ldr	r3, [pc, #8]	; (b61d4 <set_system_mode+0xc>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	685b      	ldr	r3, [r3, #4]
   b61d0:	9301      	str	r3, [sp, #4]
   b61d2:	bd08      	pop	{r3, pc}
   b61d4:	00030220 	.word	0x00030220

000b61d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b61d8:	b508      	push	{r3, lr}
   b61da:	4b02      	ldr	r3, [pc, #8]	; (b61e4 <system_delay_ms+0xc>)
   b61dc:	681b      	ldr	r3, [r3, #0]
   b61de:	695b      	ldr	r3, [r3, #20]
   b61e0:	9301      	str	r3, [sp, #4]
   b61e2:	bd08      	pop	{r3, pc}
   b61e4:	00030220 	.word	0x00030220

000b61e8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <system_thread_set_state+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	00030220 	.word	0x00030220

000b61f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b03      	ldr	r3, [pc, #12]	; (b6208 <system_ctrl_set_app_request_handler+0x10>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6202:	9301      	str	r3, [sp, #4]
   b6204:	bd08      	pop	{r3, pc}
   b6206:	0000      	.short	0x0000
   b6208:	00030220 	.word	0x00030220

000b620c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b620c:	b508      	push	{r3, lr}
   b620e:	4b03      	ldr	r3, [pc, #12]	; (b621c <system_ctrl_set_result+0x10>)
   b6210:	681b      	ldr	r3, [r3, #0]
   b6212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6216:	9301      	str	r3, [sp, #4]
   b6218:	bd08      	pop	{r3, pc}
   b621a:	0000      	.short	0x0000
   b621c:	00030220 	.word	0x00030220

000b6220 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <spark_deviceID+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	69db      	ldr	r3, [r3, #28]
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	00030244 	.word	0x00030244

000b6230 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	00030244 	.word	0x00030244

000b6240 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <network_connect+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	685b      	ldr	r3, [r3, #4]
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	00030240 	.word	0x00030240

000b6250 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <network_connecting+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	689b      	ldr	r3, [r3, #8]
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	00030240 	.word	0x00030240

000b6260 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <network_disconnect+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	68db      	ldr	r3, [r3, #12]
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	00030240 	.word	0x00030240

000b6270 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <network_ready+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	691b      	ldr	r3, [r3, #16]
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	00030240 	.word	0x00030240

000b6280 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <network_on+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	695b      	ldr	r3, [r3, #20]
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	00030240 	.word	0x00030240

000b6290 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <network_off+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	699b      	ldr	r3, [r3, #24]
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	00030240 	.word	0x00030240

000b62a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <network_listen+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	69db      	ldr	r3, [r3, #28]
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030240 	.word	0x00030240

000b62b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <network_listening+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	6a1b      	ldr	r3, [r3, #32]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	00030240 	.word	0x00030240

000b62c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <network_set_listen_timeout+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	00030240 	.word	0x00030240

000b62d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <network_get_listen_timeout+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	00030240 	.word	0x00030240

000b62e0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <network_is_on+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	00030240 	.word	0x00030240

000b62f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <network_is_off+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	00030240 	.word	0x00030240

000b6300 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <malloc+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	681b      	ldr	r3, [r3, #0]
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	0003021c 	.word	0x0003021c

000b6310 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <free+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	685b      	ldr	r3, [r3, #4]
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	0003021c 	.word	0x0003021c

000b6320 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <realloc+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	689b      	ldr	r3, [r3, #8]
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	0003021c 	.word	0x0003021c

000b6330 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <vsnprintf+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	0003021c 	.word	0x0003021c

000b6340 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <_malloc_r+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	0003021c 	.word	0x0003021c

000b6350 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <__errno+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	0003021c 	.word	0x0003021c

000b6360 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <__assert_func+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	0003021c 	.word	0x0003021c

000b6370 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <newlib_impure_ptr_callback+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	0003021c 	.word	0x0003021c

000b6380 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6380:	2100      	movs	r1, #0
   b6382:	f7ff bf29 	b.w	b61d8 <system_delay_ms>
	...

000b6388 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6388:	4802      	ldr	r0, [pc, #8]	; (b6394 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b638a:	2300      	movs	r3, #0
   b638c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b638e:	f7ff bd5b 	b.w	b5e48 <os_mutex_recursive_create>
   b6392:	bf00      	nop
   b6394:	2003e6c8 	.word	0x2003e6c8

000b6398 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6398:	2200      	movs	r2, #0
   b639a:	6840      	ldr	r0, [r0, #4]
   b639c:	4611      	mov	r1, r2
   b639e:	f7ff bf87 	b.w	b62b0 <network_listening>

000b63a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b63a2:	2200      	movs	r2, #0
   b63a4:	6840      	ldr	r0, [r0, #4]
   b63a6:	4611      	mov	r1, r2
   b63a8:	f7ff bf92 	b.w	b62d0 <network_get_listen_timeout>

000b63ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b63ac:	6840      	ldr	r0, [r0, #4]
   b63ae:	2200      	movs	r2, #0
   b63b0:	f7ff bf86 	b.w	b62c0 <network_set_listen_timeout>

000b63b4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b63b4:	6840      	ldr	r0, [r0, #4]
   b63b6:	2200      	movs	r2, #0
   b63b8:	f081 0101 	eor.w	r1, r1, #1
   b63bc:	f7ff bf70 	b.w	b62a0 <network_listen>

000b63c0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b63c0:	2300      	movs	r3, #0
   b63c2:	6840      	ldr	r0, [r0, #4]
   b63c4:	461a      	mov	r2, r3
   b63c6:	4619      	mov	r1, r3
   b63c8:	f7ff bf62 	b.w	b6290 <network_off>

000b63cc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b63cc:	2300      	movs	r3, #0
   b63ce:	6840      	ldr	r0, [r0, #4]
   b63d0:	461a      	mov	r2, r3
   b63d2:	4619      	mov	r1, r3
   b63d4:	f7ff bf54 	b.w	b6280 <network_on>

000b63d8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b63d8:	2200      	movs	r2, #0
   b63da:	6840      	ldr	r0, [r0, #4]
   b63dc:	4611      	mov	r1, r2
   b63de:	f7ff bf47 	b.w	b6270 <network_ready>

000b63e2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b63e2:	2200      	movs	r2, #0
   b63e4:	6840      	ldr	r0, [r0, #4]
   b63e6:	4611      	mov	r1, r2
   b63e8:	f7ff bf32 	b.w	b6250 <network_connecting>

000b63ec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b63ec:	6840      	ldr	r0, [r0, #4]
   b63ee:	2200      	movs	r2, #0
   b63f0:	2102      	movs	r1, #2
   b63f2:	f7ff bf35 	b.w	b6260 <network_disconnect>

000b63f6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b63f6:	2300      	movs	r3, #0
   b63f8:	6840      	ldr	r0, [r0, #4]
   b63fa:	461a      	mov	r2, r3
   b63fc:	f7ff bf20 	b.w	b6240 <network_connect>

000b6400 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6400:	4b02      	ldr	r3, [pc, #8]	; (b640c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6402:	2203      	movs	r2, #3
   b6404:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6406:	4a02      	ldr	r2, [pc, #8]	; (b6410 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6408:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b640a:	4770      	bx	lr
   b640c:	2003e6cc 	.word	0x2003e6cc
   b6410:	000baf28 	.word	0x000baf28

000b6414 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6414:	4770      	bx	lr

000b6416 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6418:	4606      	mov	r6, r0
   b641a:	4615      	mov	r5, r2
   b641c:	460c      	mov	r4, r1
   b641e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6420:	42bc      	cmp	r4, r7
   b6422:	d006      	beq.n	b6432 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6424:	6833      	ldr	r3, [r6, #0]
   b6426:	f814 1b01 	ldrb.w	r1, [r4], #1
   b642a:	689b      	ldr	r3, [r3, #8]
   b642c:	4630      	mov	r0, r6
   b642e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6430:	e7f6      	b.n	b6420 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6432:	4628      	mov	r0, r5
   b6434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6436 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6436:	7c00      	ldrb	r0, [r0, #16]
   b6438:	2200      	movs	r2, #0
   b643a:	f7ff bd65 	b.w	b5f08 <hal_i2c_write>

000b643e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b643e:	7c00      	ldrb	r0, [r0, #16]
   b6440:	2100      	movs	r1, #0
   b6442:	f7ff bd69 	b.w	b5f18 <hal_i2c_available>

000b6446 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6446:	7c00      	ldrb	r0, [r0, #16]
   b6448:	2100      	movs	r1, #0
   b644a:	f7ff bd6d 	b.w	b5f28 <hal_i2c_read>

000b644e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b644e:	7c00      	ldrb	r0, [r0, #16]
   b6450:	2100      	movs	r1, #0
   b6452:	f7ff bd71 	b.w	b5f38 <hal_i2c_peek>

000b6456 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6456:	7c00      	ldrb	r0, [r0, #16]
   b6458:	2100      	movs	r1, #0
   b645a:	f7ff bd75 	b.w	b5f48 <hal_i2c_flush>

000b645e <_ZN7TwoWireD0Ev>:
   b645e:	b510      	push	{r4, lr}
   b6460:	2114      	movs	r1, #20
   b6462:	4604      	mov	r4, r0
   b6464:	f7fd fe1d 	bl	b40a2 <_ZdlPvj>
   b6468:	4620      	mov	r0, r4
   b646a:	bd10      	pop	{r4, pc}

000b646c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b646c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b646e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6472:	4604      	mov	r4, r0
   b6474:	4608      	mov	r0, r1
   b6476:	2100      	movs	r1, #0
   b6478:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b647c:	4b03      	ldr	r3, [pc, #12]	; (b648c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b647e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6480:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6482:	4611      	mov	r1, r2
   b6484:	f7ff fd70 	bl	b5f68 <hal_i2c_init>
}
   b6488:	4620      	mov	r0, r4
   b648a:	bd10      	pop	{r4, pc}
   b648c:	000baf64 	.word	0x000baf64

000b6490 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6490:	7c00      	ldrb	r0, [r0, #16]
   b6492:	2200      	movs	r2, #0
   b6494:	f7ff bd18 	b.w	b5ec8 <hal_i2c_set_speed>

000b6498 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6498:	2300      	movs	r3, #0
   b649a:	7c00      	ldrb	r0, [r0, #16]
   b649c:	461a      	mov	r2, r3
   b649e:	4619      	mov	r1, r3
   b64a0:	f7ff bd1a 	b.w	b5ed8 <hal_i2c_begin>

000b64a4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b64a4:	7c00      	ldrb	r0, [r0, #16]
   b64a6:	2200      	movs	r2, #0
   b64a8:	f7ff bd1e 	b.w	b5ee8 <hal_i2c_begin_transmission>

000b64ac <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b64ac:	b2c9      	uxtb	r1, r1
   b64ae:	f7ff bff9 	b.w	b64a4 <_ZN7TwoWire17beginTransmissionEh>

000b64b2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b64b2:	7c00      	ldrb	r0, [r0, #16]
   b64b4:	2200      	movs	r2, #0
   b64b6:	f7ff bd1f 	b.w	b5ef8 <hal_i2c_end_transmission>

000b64ba <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b64ba:	2101      	movs	r1, #1
   b64bc:	f7ff bff9 	b.w	b64b2 <_ZN7TwoWire15endTransmissionEh>

000b64c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b64c0:	4770      	bx	lr

000b64c2 <_ZN9IPAddressD0Ev>:
   b64c2:	b510      	push	{r4, lr}
   b64c4:	2118      	movs	r1, #24
   b64c6:	4604      	mov	r4, r0
   b64c8:	f7fd fdeb 	bl	b40a2 <_ZdlPvj>
   b64cc:	4620      	mov	r0, r4
   b64ce:	bd10      	pop	{r4, pc}

000b64d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b64d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b64d2:	7d03      	ldrb	r3, [r0, #20]
   b64d4:	2b06      	cmp	r3, #6
{
   b64d6:	b08d      	sub	sp, #52	; 0x34
   b64d8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b64da:	f100 0704 	add.w	r7, r0, #4
   b64de:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b64e2:	d012      	beq.n	b650a <_ZNK9IPAddress7printToER5Print+0x3a>
   b64e4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b64e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b64ec:	220a      	movs	r2, #10
   b64ee:	4630      	mov	r0, r6
   b64f0:	f000 f969 	bl	b67c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b64f4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b64f6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b64f8:	d019      	beq.n	b652e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b64fa:	2c00      	cmp	r4, #0
   b64fc:	d0f4      	beq.n	b64e8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b64fe:	212e      	movs	r1, #46	; 0x2e
   b6500:	4630      	mov	r0, r6
   b6502:	f000 f951 	bl	b67a8 <_ZN5Print5printEc>
   b6506:	4404      	add	r4, r0
   b6508:	e7ee      	b.n	b64e8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b650a:	232f      	movs	r3, #47	; 0x2f
   b650c:	466a      	mov	r2, sp
   b650e:	4639      	mov	r1, r7
   b6510:	200a      	movs	r0, #10
		buf[0] = 0;
   b6512:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6516:	f7ff fd37 	bl	b5f88 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b651a:	4668      	mov	r0, sp
   b651c:	f001 fff2 	bl	b8504 <strlen>
   b6520:	6833      	ldr	r3, [r6, #0]
   b6522:	4602      	mov	r2, r0
   b6524:	68db      	ldr	r3, [r3, #12]
   b6526:	4669      	mov	r1, sp
   b6528:	4630      	mov	r0, r6
   b652a:	4798      	blx	r3
   b652c:	4604      	mov	r4, r0
    }
    return n;
}
   b652e:	4620      	mov	r0, r4
   b6530:	b00d      	add	sp, #52	; 0x34
   b6532:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6534 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6534:	b510      	push	{r4, lr}
   b6536:	4b05      	ldr	r3, [pc, #20]	; (b654c <_ZN9IPAddressC1Ev+0x18>)
   b6538:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b653a:	2211      	movs	r2, #17
   b653c:	f840 3b04 	str.w	r3, [r0], #4
   b6540:	2100      	movs	r1, #0
   b6542:	f001 ff9e 	bl	b8482 <memset>
}
   b6546:	4620      	mov	r0, r4
   b6548:	bd10      	pop	{r4, pc}
   b654a:	bf00      	nop
   b654c:	000baf8c 	.word	0x000baf8c

000b6550 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6550:	4603      	mov	r3, r0
   b6552:	4a07      	ldr	r2, [pc, #28]	; (b6570 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6554:	b510      	push	{r4, lr}
   b6556:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b655a:	f101 0210 	add.w	r2, r1, #16
   b655e:	f851 4b04 	ldr.w	r4, [r1], #4
   b6562:	f843 4b04 	str.w	r4, [r3], #4
   b6566:	4291      	cmp	r1, r2
   b6568:	d1f9      	bne.n	b655e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b656a:	780a      	ldrb	r2, [r1, #0]
   b656c:	701a      	strb	r2, [r3, #0]
}
   b656e:	bd10      	pop	{r4, pc}
   b6570:	000baf8c 	.word	0x000baf8c

000b6574 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6574:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6576:	2b04      	cmp	r3, #4
   b6578:	d104      	bne.n	b6584 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b657a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b657c:	3800      	subs	r0, #0
   b657e:	bf18      	it	ne
   b6580:	2001      	movne	r0, #1
   b6582:	4770      	bx	lr
    } else if (version() == 6) {
   b6584:	2b06      	cmp	r3, #6
   b6586:	d107      	bne.n	b6598 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6588:	6843      	ldr	r3, [r0, #4]
   b658a:	b93b      	cbnz	r3, b659c <_ZNK9IPAddresscvbEv+0x28>
   b658c:	6883      	ldr	r3, [r0, #8]
   b658e:	b92b      	cbnz	r3, b659c <_ZNK9IPAddresscvbEv+0x28>
   b6590:	68c3      	ldr	r3, [r0, #12]
   b6592:	b91b      	cbnz	r3, b659c <_ZNK9IPAddresscvbEv+0x28>
   b6594:	6900      	ldr	r0, [r0, #16]
   b6596:	e7f1      	b.n	b657c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6598:	2000      	movs	r0, #0
   b659a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b659c:	2001      	movs	r0, #1
}
   b659e:	4770      	bx	lr

000b65a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b65a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b65a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b65a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b65aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b65ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b65b2:	2304      	movs	r3, #4
   b65b4:	6041      	str	r1, [r0, #4]
   b65b6:	7503      	strb	r3, [r0, #20]
}
   b65b8:	bd10      	pop	{r4, pc}
	...

000b65bc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b65bc:	b507      	push	{r0, r1, r2, lr}
   b65be:	4b06      	ldr	r3, [pc, #24]	; (b65d8 <_ZN9IPAddressC1EPKh+0x1c>)
   b65c0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b65c2:	78cb      	ldrb	r3, [r1, #3]
   b65c4:	9300      	str	r3, [sp, #0]
   b65c6:	788b      	ldrb	r3, [r1, #2]
   b65c8:	784a      	ldrb	r2, [r1, #1]
   b65ca:	7809      	ldrb	r1, [r1, #0]
   b65cc:	f7ff ffe8 	bl	b65a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b65d0:	b003      	add	sp, #12
   b65d2:	f85d fb04 	ldr.w	pc, [sp], #4
   b65d6:	bf00      	nop
   b65d8:	000baf8c 	.word	0x000baf8c

000b65dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b65dc:	4b01      	ldr	r3, [pc, #4]	; (b65e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b65de:	4a02      	ldr	r2, [pc, #8]	; (b65e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b65e0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b65e2:	4770      	bx	lr
   b65e4:	2003e6d4 	.word	0x2003e6d4
   b65e8:	000baf98 	.word	0x000baf98

000b65ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b65ec:	2300      	movs	r3, #0
   b65ee:	6840      	ldr	r0, [r0, #4]
   b65f0:	461a      	mov	r2, r3
   b65f2:	f7ff be25 	b.w	b6240 <network_connect>

000b65f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b65f6:	6840      	ldr	r0, [r0, #4]
   b65f8:	2200      	movs	r2, #0
   b65fa:	2102      	movs	r1, #2
   b65fc:	f7ff be30 	b.w	b6260 <network_disconnect>

000b6600 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6600:	2200      	movs	r2, #0
   b6602:	6840      	ldr	r0, [r0, #4]
   b6604:	4611      	mov	r1, r2
   b6606:	f7ff be23 	b.w	b6250 <network_connecting>

000b660a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b660a:	2200      	movs	r2, #0
   b660c:	6840      	ldr	r0, [r0, #4]
   b660e:	4611      	mov	r1, r2
   b6610:	f7ff be2e 	b.w	b6270 <network_ready>

000b6614 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6614:	2300      	movs	r3, #0
   b6616:	6840      	ldr	r0, [r0, #4]
   b6618:	461a      	mov	r2, r3
   b661a:	4619      	mov	r1, r3
   b661c:	f7ff be30 	b.w	b6280 <network_on>

000b6620 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6620:	2300      	movs	r3, #0
   b6622:	6840      	ldr	r0, [r0, #4]
   b6624:	461a      	mov	r2, r3
   b6626:	4619      	mov	r1, r3
   b6628:	f7ff be32 	b.w	b6290 <network_off>

000b662c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b662c:	6840      	ldr	r0, [r0, #4]
   b662e:	2100      	movs	r1, #0
   b6630:	f7ff be56 	b.w	b62e0 <network_is_on>

000b6634 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6634:	6840      	ldr	r0, [r0, #4]
   b6636:	2100      	movs	r1, #0
   b6638:	f7ff be5a 	b.w	b62f0 <network_is_off>

000b663c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b663c:	6840      	ldr	r0, [r0, #4]
   b663e:	2200      	movs	r2, #0
   b6640:	f081 0101 	eor.w	r1, r1, #1
   b6644:	f7ff be2c 	b.w	b62a0 <network_listen>

000b6648 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6648:	6840      	ldr	r0, [r0, #4]
   b664a:	2200      	movs	r2, #0
   b664c:	f7ff be38 	b.w	b62c0 <network_set_listen_timeout>

000b6650 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6650:	2200      	movs	r2, #0
   b6652:	6840      	ldr	r0, [r0, #4]
   b6654:	4611      	mov	r1, r2
   b6656:	f7ff be3b 	b.w	b62d0 <network_get_listen_timeout>

000b665a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b665a:	2200      	movs	r2, #0
   b665c:	6840      	ldr	r0, [r0, #4]
   b665e:	4611      	mov	r1, r2
   b6660:	f7ff be26 	b.w	b62b0 <network_listening>

000b6664 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6668:	b095      	sub	sp, #84	; 0x54
   b666a:	4614      	mov	r4, r2
   b666c:	460d      	mov	r5, r1
   b666e:	4607      	mov	r7, r0
    IPAddress addr;
   b6670:	f7ff ff60 	bl	b6534 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6674:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6676:	221c      	movs	r2, #28
   b6678:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b667a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b667c:	f001 ff01 	bl	b8482 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6680:	2340      	movs	r3, #64	; 0x40
   b6682:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6684:	4620      	mov	r0, r4
   b6686:	466b      	mov	r3, sp
   b6688:	aa0c      	add	r2, sp, #48	; 0x30
   b668a:	2100      	movs	r1, #0
   b668c:	f7ff fc9c 	bl	b5fc8 <netdb_getaddrinfo>
    if (!r) {
   b6690:	4604      	mov	r4, r0
   b6692:	2800      	cmp	r0, #0
   b6694:	d14b      	bne.n	b672e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6696:	4602      	mov	r2, r0
   b6698:	2101      	movs	r1, #1
   b669a:	6868      	ldr	r0, [r5, #4]
   b669c:	f7ff fde8 	bl	b6270 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b66a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b66a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b66a4:	4622      	mov	r2, r4
   b66a6:	6868      	ldr	r0, [r5, #4]
   b66a8:	f7ff fde2 	bl	b6270 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b66ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b66ae:	4681      	mov	r9, r0
        bool ok = false;
   b66b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b66b2:	2e00      	cmp	r6, #0
   b66b4:	d03b      	beq.n	b672e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b66b6:	2900      	cmp	r1, #0
   b66b8:	d139      	bne.n	b672e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b66ba:	6873      	ldr	r3, [r6, #4]
   b66bc:	2b02      	cmp	r3, #2
   b66be:	d003      	beq.n	b66c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b66c0:	2b0a      	cmp	r3, #10
   b66c2:	d011      	beq.n	b66e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b66c4:	69f6      	ldr	r6, [r6, #28]
   b66c6:	e7f4      	b.n	b66b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b66c8:	f1b8 0f00 	cmp.w	r8, #0
   b66cc:	d0fa      	beq.n	b66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b66ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b66d0:	a806      	add	r0, sp, #24
   b66d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b66d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b66d6:	f7ff ff71 	bl	b65bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b66da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66dc:	1d3c      	adds	r4, r7, #4
   b66de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66e0:	682b      	ldr	r3, [r5, #0]
   b66e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b66e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b66e6:	e7ed      	b.n	b66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b66e8:	f1b9 0f00 	cmp.w	r9, #0
   b66ec:	d0ea      	beq.n	b66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b66ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b66f0:	2210      	movs	r2, #16
   b66f2:	a801      	add	r0, sp, #4
   b66f4:	f001 fec5 	bl	b8482 <memset>
                    a.v = 6;
   b66f8:	2306      	movs	r3, #6
   b66fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b66fe:	ad01      	add	r5, sp, #4
   b6700:	f104 0308 	add.w	r3, r4, #8
   b6704:	3418      	adds	r4, #24
   b6706:	6818      	ldr	r0, [r3, #0]
   b6708:	6859      	ldr	r1, [r3, #4]
   b670a:	462a      	mov	r2, r5
   b670c:	c203      	stmia	r2!, {r0, r1}
   b670e:	3308      	adds	r3, #8
   b6710:	42a3      	cmp	r3, r4
   b6712:	4615      	mov	r5, r2
   b6714:	d1f7      	bne.n	b6706 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6716:	a901      	add	r1, sp, #4
   b6718:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b671a:	ad07      	add	r5, sp, #28
   b671c:	f7ff ff18 	bl	b6550 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6722:	1d3c      	adds	r4, r7, #4
   b6724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6726:	682b      	ldr	r3, [r5, #0]
   b6728:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b672a:	4649      	mov	r1, r9
   b672c:	e7ca      	b.n	b66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b672e:	9800      	ldr	r0, [sp, #0]
   b6730:	f7ff fc42 	bl	b5fb8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6734:	4638      	mov	r0, r7
   b6736:	b015      	add	sp, #84	; 0x54
   b6738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b673c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b673c:	4b02      	ldr	r3, [pc, #8]	; (b6748 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b673e:	4a03      	ldr	r2, [pc, #12]	; (b674c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6740:	601a      	str	r2, [r3, #0]
   b6742:	2200      	movs	r2, #0
   b6744:	605a      	str	r2, [r3, #4]

} // spark
   b6746:	4770      	bx	lr
   b6748:	2003e6d8 	.word	0x2003e6d8
   b674c:	000bafa4 	.word	0x000bafa4

000b6750 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6752:	4606      	mov	r6, r0
   b6754:	460d      	mov	r5, r1
  size_t n = 0;
   b6756:	188f      	adds	r7, r1, r2
   b6758:	2400      	movs	r4, #0
  while (size--) {
   b675a:	42bd      	cmp	r5, r7
   b675c:	d00c      	beq.n	b6778 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b675e:	6833      	ldr	r3, [r6, #0]
   b6760:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6764:	689b      	ldr	r3, [r3, #8]
   b6766:	4630      	mov	r0, r6
   b6768:	4798      	blx	r3
     if (chunk>=0)
   b676a:	1e03      	subs	r3, r0, #0
   b676c:	db01      	blt.n	b6772 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b676e:	441c      	add	r4, r3
  while (size--) {
   b6770:	e7f3      	b.n	b675a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6772:	2c00      	cmp	r4, #0
   b6774:	bf08      	it	eq
   b6776:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6778:	4620      	mov	r0, r4
   b677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b677c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b677c:	b513      	push	{r0, r1, r4, lr}
   b677e:	4604      	mov	r4, r0
    }
   b6780:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6782:	b159      	cbz	r1, b679c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6784:	9101      	str	r1, [sp, #4]
   b6786:	f001 febd 	bl	b8504 <strlen>
   b678a:	6823      	ldr	r3, [r4, #0]
   b678c:	9901      	ldr	r1, [sp, #4]
   b678e:	68db      	ldr	r3, [r3, #12]
   b6790:	4602      	mov	r2, r0
   b6792:	4620      	mov	r0, r4
    }
   b6794:	b002      	add	sp, #8
   b6796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b679a:	4718      	bx	r3
    }
   b679c:	b002      	add	sp, #8
   b679e:	bd10      	pop	{r4, pc}

000b67a0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b67a0:	b508      	push	{r3, lr}
  return write(str);
   b67a2:	f7ff ffeb 	bl	b677c <_ZN5Print5writeEPKc>
}
   b67a6:	bd08      	pop	{r3, pc}

000b67a8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b67a8:	6803      	ldr	r3, [r0, #0]
   b67aa:	689b      	ldr	r3, [r3, #8]
   b67ac:	4718      	bx	r3

000b67ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b67ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b67b0:	210d      	movs	r1, #13
{
   b67b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b67b4:	f7ff fff8 	bl	b67a8 <_ZN5Print5printEc>
  n += print('\n');
   b67b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b67ba:	4604      	mov	r4, r0
  n += print('\n');
   b67bc:	4628      	mov	r0, r5
   b67be:	f7ff fff3 	bl	b67a8 <_ZN5Print5printEc>
  return n;
}
   b67c2:	4420      	add	r0, r4
   b67c4:	bd38      	pop	{r3, r4, r5, pc}

000b67c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b67c6:	b530      	push	{r4, r5, lr}
   b67c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b67ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b67cc:	2a01      	cmp	r2, #1
  *str = '\0';
   b67ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b67d2:	bf98      	it	ls
   b67d4:	220a      	movls	r2, #10
   b67d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b67d8:	460d      	mov	r5, r1
   b67da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b67de:	fb01 5312 	mls	r3, r1, r2, r5
   b67e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b67e6:	2b09      	cmp	r3, #9
   b67e8:	bf94      	ite	ls
   b67ea:	3330      	addls	r3, #48	; 0x30
   b67ec:	3337      	addhi	r3, #55	; 0x37
   b67ee:	b2db      	uxtb	r3, r3
  } while(n);
   b67f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b67f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b67f6:	d9ef      	bls.n	b67d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b67f8:	4621      	mov	r1, r4
   b67fa:	f7ff ffbf 	bl	b677c <_ZN5Print5writeEPKc>
}
   b67fe:	b00b      	add	sp, #44	; 0x2c
   b6800:	bd30      	pop	{r4, r5, pc}
	...

000b6804 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6808:	ec55 4b10 	vmov	r4, r5, d0
   b680c:	4606      	mov	r6, r0
   b680e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b6810:	ee10 2a10 	vmov	r2, s0
   b6814:	ee10 0a10 	vmov	r0, s0
   b6818:	462b      	mov	r3, r5
   b681a:	4629      	mov	r1, r5
   b681c:	f001 fd4e 	bl	b82bc <__aeabi_dcmpun>
   b6820:	b140      	cbz	r0, b6834 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b6822:	4953      	ldr	r1, [pc, #332]	; (b6970 <_ZN5Print10printFloatEdh+0x16c>)
   b6824:	4630      	mov	r0, r6
   b6826:	f7ff ffa9 	bl	b677c <_ZN5Print5writeEPKc>
   b682a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b682c:	4650      	mov	r0, sl
   b682e:	b003      	add	sp, #12
   b6830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6834:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6838:	4b4e      	ldr	r3, [pc, #312]	; (b6974 <_ZN5Print10printFloatEdh+0x170>)
   b683a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b683e:	4620      	mov	r0, r4
   b6840:	4649      	mov	r1, r9
   b6842:	f001 fd3b 	bl	b82bc <__aeabi_dcmpun>
   b6846:	b948      	cbnz	r0, b685c <_ZN5Print10printFloatEdh+0x58>
   b6848:	4b4a      	ldr	r3, [pc, #296]	; (b6974 <_ZN5Print10printFloatEdh+0x170>)
   b684a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b684e:	4620      	mov	r0, r4
   b6850:	4649      	mov	r1, r9
   b6852:	f001 fd15 	bl	b8280 <__aeabi_dcmple>
   b6856:	b908      	cbnz	r0, b685c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6858:	4947      	ldr	r1, [pc, #284]	; (b6978 <_ZN5Print10printFloatEdh+0x174>)
   b685a:	e7e3      	b.n	b6824 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b685c:	4b47      	ldr	r3, [pc, #284]	; (b697c <_ZN5Print10printFloatEdh+0x178>)
   b685e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6862:	4620      	mov	r0, r4
   b6864:	4629      	mov	r1, r5
   b6866:	f001 fd1f 	bl	b82a8 <__aeabi_dcmpgt>
   b686a:	b108      	cbz	r0, b6870 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b686c:	4944      	ldr	r1, [pc, #272]	; (b6980 <_ZN5Print10printFloatEdh+0x17c>)
   b686e:	e7d9      	b.n	b6824 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b6870:	4b44      	ldr	r3, [pc, #272]	; (b6984 <_ZN5Print10printFloatEdh+0x180>)
   b6872:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6876:	4620      	mov	r0, r4
   b6878:	4629      	mov	r1, r5
   b687a:	f001 fcf7 	bl	b826c <__aeabi_dcmplt>
   b687e:	2800      	cmp	r0, #0
   b6880:	d1f4      	bne.n	b686c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b6882:	2200      	movs	r2, #0
   b6884:	2300      	movs	r3, #0
   b6886:	4620      	mov	r0, r4
   b6888:	4629      	mov	r1, r5
   b688a:	f001 fcef 	bl	b826c <__aeabi_dcmplt>
   b688e:	b1d0      	cbz	r0, b68c6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b6890:	212d      	movs	r1, #45	; 0x2d
   b6892:	4630      	mov	r0, r6
   b6894:	f7ff ff88 	bl	b67a8 <_ZN5Print5printEc>
     number = -number;
   b6898:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b689c:	4682      	mov	sl, r0
     number = -number;
   b689e:	461d      	mov	r5, r3
  double rounding = 0.5;
   b68a0:	4939      	ldr	r1, [pc, #228]	; (b6988 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b68a2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b6990 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b68a6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b68aa:	2000      	movs	r0, #0
    rounding /= 10.0;
   b68ac:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b68b0:	fa5f f38b 	uxtb.w	r3, fp
   b68b4:	429f      	cmp	r7, r3
   b68b6:	d908      	bls.n	b68ca <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b68b8:	4642      	mov	r2, r8
   b68ba:	464b      	mov	r3, r9
   b68bc:	f001 fb8e 	bl	b7fdc <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b68c0:	f10b 0b01 	add.w	fp, fp, #1
   b68c4:	e7f4      	b.n	b68b0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b68c6:	4682      	mov	sl, r0
   b68c8:	e7ea      	b.n	b68a0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b68ca:	4622      	mov	r2, r4
   b68cc:	462b      	mov	r3, r5
   b68ce:	f001 f8a5 	bl	b7a1c <__adddf3>
   b68d2:	460d      	mov	r5, r1
   b68d4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b68d6:	f001 fd2f 	bl	b8338 <__aeabi_d2uiz>
   b68da:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b68dc:	f001 f9da 	bl	b7c94 <__aeabi_ui2d>
   b68e0:	4602      	mov	r2, r0
   b68e2:	460b      	mov	r3, r1
   b68e4:	4620      	mov	r0, r4
   b68e6:	4629      	mov	r1, r5
   b68e8:	f001 f896 	bl	b7a18 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b68ec:	220a      	movs	r2, #10
   b68ee:	4604      	mov	r4, r0
   b68f0:	460d      	mov	r5, r1
   b68f2:	4630      	mov	r0, r6
   b68f4:	4641      	mov	r1, r8
   b68f6:	f7ff ff66 	bl	b67c6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b68fa:	4482      	add	sl, r0
  if (digits > 0) {
   b68fc:	2f00      	cmp	r7, #0
   b68fe:	d095      	beq.n	b682c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6900:	4922      	ldr	r1, [pc, #136]	; (b698c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6902:	f8df 908c 	ldr.w	r9, [pc, #140]	; b6990 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b6906:	4630      	mov	r0, r6
   b6908:	f7ff ff38 	bl	b677c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b690c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b6910:	4482      	add	sl, r0
  while (digits-- > 0)
   b6912:	2f00      	cmp	r7, #0
   b6914:	d08a      	beq.n	b682c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b6916:	4642      	mov	r2, r8
   b6918:	464b      	mov	r3, r9
   b691a:	4620      	mov	r0, r4
   b691c:	4629      	mov	r1, r5
   b691e:	f001 fa33 	bl	b7d88 <__aeabi_dmul>
   b6922:	4604      	mov	r4, r0
   b6924:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b6926:	f001 fcdf 	bl	b82e8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b692a:	f1b0 0b00 	subs.w	fp, r0, #0
   b692e:	da1c      	bge.n	b696a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6930:	212d      	movs	r1, #45	; 0x2d
   b6932:	4630      	mov	r0, r6
   b6934:	f7ff ff38 	bl	b67a8 <_ZN5Print5printEc>
            val = -n;
   b6938:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b693c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b693e:	220a      	movs	r2, #10
   b6940:	4630      	mov	r0, r6
   b6942:	9301      	str	r3, [sp, #4]
   b6944:	f7ff ff3f 	bl	b67c6 <_ZN5Print11printNumberEmh>
   b6948:	9b01      	ldr	r3, [sp, #4]
   b694a:	4418      	add	r0, r3
    n += print(toPrint);
   b694c:	4482      	add	sl, r0
    remainder -= toPrint;
   b694e:	4658      	mov	r0, fp
   b6950:	f001 f9b0 	bl	b7cb4 <__aeabi_i2d>
   b6954:	4602      	mov	r2, r0
   b6956:	460b      	mov	r3, r1
   b6958:	4620      	mov	r0, r4
   b695a:	4629      	mov	r1, r5
   b695c:	f001 f85c 	bl	b7a18 <__aeabi_dsub>
   b6960:	3f01      	subs	r7, #1
   b6962:	4604      	mov	r4, r0
   b6964:	460d      	mov	r5, r1
   b6966:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6968:	e7d3      	b.n	b6912 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b696a:	4659      	mov	r1, fp
        size_t t = 0;
   b696c:	2300      	movs	r3, #0
   b696e:	e7e6      	b.n	b693e <_ZN5Print10printFloatEdh+0x13a>
   b6970:	000bafd8 	.word	0x000bafd8
   b6974:	7fefffff 	.word	0x7fefffff
   b6978:	000bafdc 	.word	0x000bafdc
   b697c:	41efffff 	.word	0x41efffff
   b6980:	000bafe0 	.word	0x000bafe0
   b6984:	c1efffff 	.word	0xc1efffff
   b6988:	3fe00000 	.word	0x3fe00000
   b698c:	000bafe4 	.word	0x000bafe4
   b6990:	40240000 	.word	0x40240000

000b6994 <_ZN5Print7printlnEdi>:
{
   b6994:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b6996:	b2c9      	uxtb	r1, r1
{
   b6998:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b699a:	f7ff ff33 	bl	b6804 <_ZN5Print10printFloatEdh>
   b699e:	4604      	mov	r4, r0
  n += println();
   b69a0:	4628      	mov	r0, r5
   b69a2:	f7ff ff04 	bl	b67ae <_ZN5Print7printlnEv>
}
   b69a6:	4420      	add	r0, r4
   b69a8:	bd38      	pop	{r3, r4, r5, pc}

000b69aa <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b69aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69ae:	b086      	sub	sp, #24
   b69b0:	af00      	add	r7, sp, #0
   b69b2:	4605      	mov	r5, r0
   b69b4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b69b6:	1d38      	adds	r0, r7, #4
   b69b8:	2114      	movs	r1, #20
{
   b69ba:	4614      	mov	r4, r2
    va_copy(args2, args);
   b69bc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b69be:	f7ff fcb7 	bl	b6330 <vsnprintf>

    if (n<bufsize)
   b69c2:	2813      	cmp	r0, #19
   b69c4:	d80e      	bhi.n	b69e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b69c6:	1d39      	adds	r1, r7, #4
   b69c8:	4628      	mov	r0, r5
   b69ca:	f7ff fed7 	bl	b677c <_ZN5Print5writeEPKc>
   b69ce:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b69d0:	b11e      	cbz	r6, b69da <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b69d2:	4628      	mov	r0, r5
   b69d4:	f7ff feeb 	bl	b67ae <_ZN5Print7printlnEv>
   b69d8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b69da:	4620      	mov	r0, r4
   b69dc:	3718      	adds	r7, #24
   b69de:	46bd      	mov	sp, r7
   b69e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b69e4:	f100 0308 	add.w	r3, r0, #8
   b69e8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b69ec:	46e8      	mov	r8, sp
        char bigger[n+1];
   b69ee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b69f2:	4622      	mov	r2, r4
   b69f4:	1c41      	adds	r1, r0, #1
   b69f6:	683b      	ldr	r3, [r7, #0]
   b69f8:	4668      	mov	r0, sp
   b69fa:	f7ff fc99 	bl	b6330 <vsnprintf>
  return write(str);
   b69fe:	4669      	mov	r1, sp
   b6a00:	4628      	mov	r0, r5
   b6a02:	f7ff febb 	bl	b677c <_ZN5Print5writeEPKc>
   b6a06:	4604      	mov	r4, r0
   b6a08:	46c5      	mov	sp, r8
   b6a0a:	e7e1      	b.n	b69d0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6a0c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6a0c:	4b01      	ldr	r3, [pc, #4]	; (b6a14 <_GLOBAL__sub_I_RGB+0x8>)
   b6a0e:	2200      	movs	r2, #0
   b6a10:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6a12:	4770      	bx	lr
   b6a14:	2003e6e0 	.word	0x2003e6e0

000b6a18 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6a18:	2100      	movs	r1, #0
   b6a1a:	f7ff bb45 	b.w	b60a8 <hal_spi_release>

000b6a1e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6a1e:	2100      	movs	r1, #0
   b6a20:	f7ff bb3a 	b.w	b6098 <hal_spi_acquire>

000b6a24 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6a24:	b510      	push	{r4, lr}
   b6a26:	4604      	mov	r4, r0
   b6a28:	4608      	mov	r0, r1
{
    _spi = spi;
   b6a2a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6a2c:	f7ff fb14 	bl	b6058 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6a30:	2300      	movs	r3, #0
   b6a32:	6063      	str	r3, [r4, #4]
}
   b6a34:	4620      	mov	r0, r4
   b6a36:	bd10      	pop	{r4, pc}

000b6a38 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6a38:	b513      	push	{r0, r1, r4, lr}
   b6a3a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6a3c:	7800      	ldrb	r0, [r0, #0]
   b6a3e:	f7ff ffee 	bl	b6a1e <_ZN8SPIClass4lockEv.isra.0>
   b6a42:	b958      	cbnz	r0, b6a5c <_ZN8SPIClass5beginEv+0x24>
   b6a44:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6a46:	9001      	str	r0, [sp, #4]
   b6a48:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6a4c:	f7ff faf4 	bl	b6038 <hal_spi_begin>
        unlock();
   b6a50:	9801      	ldr	r0, [sp, #4]
    }
}
   b6a52:	b002      	add	sp, #8
   b6a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6a58:	f7ff bfde 	b.w	b6a18 <_ZN8SPIClass6unlockEv.isra.0>
   b6a5c:	b002      	add	sp, #8
   b6a5e:	bd10      	pop	{r4, pc}

000b6a60 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6a60:	7800      	ldrb	r0, [r0, #0]
   b6a62:	f7ff bfd9 	b.w	b6a18 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6a68 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6a68:	0840      	lsrs	r0, r0, #1
{
   b6a6a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6a6c:	6018      	str	r0, [r3, #0]
   b6a6e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6a70:	6818      	ldr	r0, [r3, #0]
   b6a72:	4288      	cmp	r0, r1
   b6a74:	b2e5      	uxtb	r5, r4
   b6a76:	d906      	bls.n	b6a86 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6a78:	3401      	adds	r4, #1
   b6a7a:	2c08      	cmp	r4, #8
   b6a7c:	d002      	beq.n	b6a84 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6a7e:	0840      	lsrs	r0, r0, #1
   b6a80:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6a82:	e7f5      	b.n	b6a70 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6a84:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6a86:	4b02      	ldr	r3, [pc, #8]	; (b6a90 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6a88:	5d5b      	ldrb	r3, [r3, r5]
   b6a8a:	7013      	strb	r3, [r2, #0]
}
   b6a8c:	bd30      	pop	{r4, r5, pc}
   b6a8e:	bf00      	nop
   b6a90:	000bafe6 	.word	0x000bafe6

000b6a94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a98:	4606      	mov	r6, r0
   b6a9a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6a9c:	7800      	ldrb	r0, [r0, #0]
{
   b6a9e:	460c      	mov	r4, r1
    CHECK(lock());
   b6aa0:	f7ff ffbd 	bl	b6a1e <_ZN8SPIClass4lockEv.isra.0>
   b6aa4:	2800      	cmp	r0, #0
   b6aa6:	db1b      	blt.n	b6ae0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6aa8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6aaa:	2214      	movs	r2, #20
   b6aac:	2100      	movs	r1, #0
   b6aae:	a809      	add	r0, sp, #36	; 0x24
   b6ab0:	f001 fce7 	bl	b8482 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6ab4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6ab6:	2200      	movs	r2, #0
   b6ab8:	a909      	add	r1, sp, #36	; 0x24
   b6aba:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6abc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6ac0:	f7ff fada 	bl	b6078 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6ac4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6ac8:	b113      	cbz	r3, b6ad0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6aca:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6ace:	b155      	cbz	r5, b6ae6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6ad0:	2700      	movs	r7, #0
   b6ad2:	46b9      	mov	r9, r7
   b6ad4:	46b8      	mov	r8, r7
   b6ad6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6ad8:	7923      	ldrb	r3, [r4, #4]
   b6ada:	b15d      	cbz	r5, b6af4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6adc:	b1c3      	cbz	r3, b6b10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6ade:	2000      	movs	r0, #0
}
   b6ae0:	b00f      	add	sp, #60	; 0x3c
   b6ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6ae6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6aea:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6aee:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6af2:	e7f1      	b.n	b6ad8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6af4:	2b00      	cmp	r3, #0
   b6af6:	d135      	bne.n	b6b64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6af8:	68a3      	ldr	r3, [r4, #8]
   b6afa:	4543      	cmp	r3, r8
   b6afc:	d108      	bne.n	b6b10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6afe:	f88d 9020 	strb.w	r9, [sp, #32]
   b6b02:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6b06:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6b0a:	89a3      	ldrh	r3, [r4, #12]
   b6b0c:	429a      	cmp	r2, r3
   b6b0e:	d0e6      	beq.n	b6ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6b10:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6b12:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6b14:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6b18:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6b1a:	ab04      	add	r3, sp, #16
   b6b1c:	f10d 020f 	add.w	r2, sp, #15
   b6b20:	f7ff ffa2 	bl	b6a68 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6b24:	7921      	ldrb	r1, [r4, #4]
   b6b26:	b985      	cbnz	r5, b6b4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6b28:	b989      	cbnz	r1, b6b4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6b2a:	68a3      	ldr	r3, [r4, #8]
   b6b2c:	4543      	cmp	r3, r8
   b6b2e:	d30e      	bcc.n	b6b4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6b30:	f88d 9020 	strb.w	r9, [sp, #32]
   b6b34:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6b38:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6b3c:	89a3      	ldrh	r3, [r4, #12]
   b6b3e:	429a      	cmp	r2, r3
   b6b40:	d105      	bne.n	b6b4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6b42:	9b04      	ldr	r3, [sp, #16]
   b6b44:	4543      	cmp	r3, r8
   b6b46:	d102      	bne.n	b6b4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6b48:	e7c9      	b.n	b6ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6b4a:	2900      	cmp	r1, #0
   b6b4c:	d1f9      	bne.n	b6b42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6b4e:	2300      	movs	r3, #0
   b6b50:	9301      	str	r3, [sp, #4]
   b6b52:	7b63      	ldrb	r3, [r4, #13]
   b6b54:	9300      	str	r3, [sp, #0]
   b6b56:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6b5a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6b5c:	7830      	ldrb	r0, [r6, #0]
   b6b5e:	f7ff fa93 	bl	b6088 <hal_spi_set_settings>
   b6b62:	e7bc      	b.n	b6ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6b64:	e9cd 5500 	strd	r5, r5, [sp]
   b6b68:	462b      	mov	r3, r5
   b6b6a:	462a      	mov	r2, r5
   b6b6c:	2101      	movs	r1, #1
   b6b6e:	e7f5      	b.n	b6b5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6b70 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6b70:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6b72:	7800      	ldrb	r0, [r0, #0]
   b6b74:	f7ff fa68 	bl	b6048 <hal_spi_transfer>
}
   b6b78:	b2c0      	uxtb	r0, r0
   b6b7a:	bd08      	pop	{r3, pc}

000b6b7c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6b7c:	b510      	push	{r4, lr}
   b6b7e:	4604      	mov	r4, r0
{
	free(buffer);
   b6b80:	6800      	ldr	r0, [r0, #0]
   b6b82:	f7ff fbc5 	bl	b6310 <free>
}
   b6b86:	4620      	mov	r0, r4
   b6b88:	bd10      	pop	{r4, pc}

000b6b8a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6b8a:	b510      	push	{r4, lr}
   b6b8c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6b8e:	6800      	ldr	r0, [r0, #0]
   b6b90:	b108      	cbz	r0, b6b96 <_ZN6String10invalidateEv+0xc>
   b6b92:	f7ff fbbd 	bl	b6310 <free>
	buffer = NULL;
   b6b96:	2300      	movs	r3, #0
	capacity = len = 0;
   b6b98:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6b9c:	6023      	str	r3, [r4, #0]
}
   b6b9e:	bd10      	pop	{r4, pc}

000b6ba0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6ba0:	b538      	push	{r3, r4, r5, lr}
   b6ba2:	4604      	mov	r4, r0
   b6ba4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6ba6:	6800      	ldr	r0, [r0, #0]
   b6ba8:	3101      	adds	r1, #1
   b6baa:	f7ff fbb9 	bl	b6320 <realloc>
	if (newbuffer) {
   b6bae:	b110      	cbz	r0, b6bb6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6bb0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6bb4:	2001      	movs	r0, #1
	}
	return 0;
}
   b6bb6:	bd38      	pop	{r3, r4, r5, pc}

000b6bb8 <_ZN6String7reserveEj>:
{
   b6bb8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6bba:	6803      	ldr	r3, [r0, #0]
{
   b6bbc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6bbe:	b123      	cbz	r3, b6bca <_ZN6String7reserveEj+0x12>
   b6bc0:	6843      	ldr	r3, [r0, #4]
   b6bc2:	428b      	cmp	r3, r1
   b6bc4:	d301      	bcc.n	b6bca <_ZN6String7reserveEj+0x12>
   b6bc6:	2001      	movs	r0, #1
}
   b6bc8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6bca:	4620      	mov	r0, r4
   b6bcc:	f7ff ffe8 	bl	b6ba0 <_ZN6String12changeBufferEj>
   b6bd0:	2800      	cmp	r0, #0
   b6bd2:	d0f9      	beq.n	b6bc8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6bd4:	68a3      	ldr	r3, [r4, #8]
   b6bd6:	2b00      	cmp	r3, #0
   b6bd8:	d1f5      	bne.n	b6bc6 <_ZN6String7reserveEj+0xe>
   b6bda:	6822      	ldr	r2, [r4, #0]
   b6bdc:	7013      	strb	r3, [r2, #0]
   b6bde:	e7f2      	b.n	b6bc6 <_ZN6String7reserveEj+0xe>

000b6be0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6be2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6be4:	4611      	mov	r1, r2
   b6be6:	9201      	str	r2, [sp, #4]
{
   b6be8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6bea:	f7ff ffe5 	bl	b6bb8 <_ZN6String7reserveEj>
   b6bee:	9a01      	ldr	r2, [sp, #4]
   b6bf0:	b928      	cbnz	r0, b6bfe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6bf2:	4620      	mov	r0, r4
   b6bf4:	f7ff ffc9 	bl	b6b8a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6bf8:	4620      	mov	r0, r4
   b6bfa:	b003      	add	sp, #12
   b6bfc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6bfe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6c00:	4629      	mov	r1, r5
   b6c02:	6820      	ldr	r0, [r4, #0]
   b6c04:	f001 fc2f 	bl	b8466 <memcpy>
	buffer[len] = 0;
   b6c08:	6822      	ldr	r2, [r4, #0]
   b6c0a:	68a3      	ldr	r3, [r4, #8]
   b6c0c:	2100      	movs	r1, #0
   b6c0e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6c10:	e7f2      	b.n	b6bf8 <_ZN6String4copyEPKcj+0x18>

000b6c12 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6c12:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6c14:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6c16:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6c1a:	4604      	mov	r4, r0
	len = 0;
   b6c1c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c1e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6c20:	b141      	cbz	r1, b6c34 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6c22:	4608      	mov	r0, r1
   b6c24:	9101      	str	r1, [sp, #4]
   b6c26:	f001 fc6d 	bl	b8504 <strlen>
   b6c2a:	9901      	ldr	r1, [sp, #4]
   b6c2c:	4602      	mov	r2, r0
   b6c2e:	4620      	mov	r0, r4
   b6c30:	f7ff ffd6 	bl	b6be0 <_ZN6String4copyEPKcj>
}
   b6c34:	4620      	mov	r0, r4
   b6c36:	b002      	add	sp, #8
   b6c38:	bd10      	pop	{r4, pc}

000b6c3a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6c3a:	b513      	push	{r0, r1, r4, lr}
   b6c3c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6c3e:	b159      	cbz	r1, b6c58 <_ZN6StringaSEPKc+0x1e>
   b6c40:	4608      	mov	r0, r1
   b6c42:	9101      	str	r1, [sp, #4]
   b6c44:	f001 fc5e 	bl	b8504 <strlen>
   b6c48:	9901      	ldr	r1, [sp, #4]
   b6c4a:	4602      	mov	r2, r0
   b6c4c:	4620      	mov	r0, r4
   b6c4e:	f7ff ffc7 	bl	b6be0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6c52:	4620      	mov	r0, r4
   b6c54:	b002      	add	sp, #8
   b6c56:	bd10      	pop	{r4, pc}
	else invalidate();
   b6c58:	f7ff ff97 	bl	b6b8a <_ZN6String10invalidateEv>
   b6c5c:	e7f9      	b.n	b6c52 <_ZN6StringaSEPKc+0x18>
	...

000b6c60 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b6c60:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b6c62:	6800      	ldr	r0, [r0, #0]
   b6c64:	b140      	cbz	r0, b6c78 <_ZNK6String7toFloatEv+0x18>
   b6c66:	f001 fbfb 	bl	b8460 <atof>
   b6c6a:	ec51 0b10 	vmov	r0, r1, d0
   b6c6e:	f001 fb83 	bl	b8378 <__aeabi_d2f>
   b6c72:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b6c76:	bd08      	pop	{r3, pc}
	return 0;
   b6c78:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6c80 <_ZNK6String7toFloatEv+0x20>
   b6c7c:	e7fb      	b.n	b6c76 <_ZNK6String7toFloatEv+0x16>
   b6c7e:	bf00      	nop
   b6c80:	00000000 	.word	0x00000000

000b6c84 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6c84:	4b05      	ldr	r3, [pc, #20]	; (b6c9c <_GLOBAL__sub_I_System+0x18>)
   b6c86:	2202      	movs	r2, #2
   b6c88:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6c8a:	4b05      	ldr	r3, [pc, #20]	; (b6ca0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6c8c:	4a05      	ldr	r2, [pc, #20]	; (b6ca4 <_GLOBAL__sub_I_System+0x20>)
   b6c8e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6c90:	2000      	movs	r0, #0
   b6c92:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6c96:	f7ff ba97 	b.w	b61c8 <set_system_mode>
   b6c9a:	bf00      	nop
   b6c9c:	2003e6fc 	.word	0x2003e6fc
   b6ca0:	2003e6f0 	.word	0x2003e6f0
   b6ca4:	ffff0000 	.word	0xffff0000

000b6ca8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6ca8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6caa:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6cac:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6cb0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6cb2:	2201      	movs	r2, #1
   b6cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6cb8:	f10d 0107 	add.w	r1, sp, #7
   b6cbc:	47a0      	blx	r4
}
   b6cbe:	b002      	add	sp, #8
   b6cc0:	bd10      	pop	{r4, pc}

000b6cc2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6cc2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6cc4:	6803      	ldr	r3, [r0, #0]
   b6cc6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6ccc:	46a4      	mov	ip, r4
}
   b6cce:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6cd2:	4760      	bx	ip

000b6cd4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6cd4:	b513      	push	{r0, r1, r4, lr}
   b6cd6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6cd8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6cda:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6cde:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6ce0:	f10d 0107 	add.w	r1, sp, #7
   b6ce4:	2201      	movs	r2, #1
   b6ce6:	47a0      	blx	r4
}
   b6ce8:	b002      	add	sp, #8
   b6cea:	bd10      	pop	{r4, pc}

000b6cec <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6cec:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6cee:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6cf0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6cf4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6cf8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6cfa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6cfc:	d008      	beq.n	b6d10 <_ZN9TCPClient4readEv+0x24>
   b6cfe:	6963      	ldr	r3, [r4, #20]
   b6d00:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6d04:	1c51      	adds	r1, r2, #1
   b6d06:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6d0a:	4413      	add	r3, r2
   b6d0c:	7918      	ldrb	r0, [r3, #4]
}
   b6d0e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6d10:	6803      	ldr	r3, [r0, #0]
   b6d12:	691b      	ldr	r3, [r3, #16]
   b6d14:	4798      	blx	r3
   b6d16:	2800      	cmp	r0, #0
   b6d18:	d1f1      	bne.n	b6cfe <_ZN9TCPClient4readEv+0x12>
   b6d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d1e:	e7f6      	b.n	b6d0e <_ZN9TCPClient4readEv+0x22>

000b6d20 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6d20:	4770      	bx	lr

000b6d22 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6d22:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6d24:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6d26:	43c0      	mvns	r0, r0
   b6d28:	0fc0      	lsrs	r0, r0, #31
   b6d2a:	4770      	bx	lr

000b6d2c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6d2c:	4770      	bx	lr
	...

000b6d30 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6d30:	4b06      	ldr	r3, [pc, #24]	; (b6d4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6d32:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6d34:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6d36:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6d3a:	d005      	beq.n	b6d48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6d3c:	4608      	mov	r0, r1
   b6d3e:	f000 fd55 	bl	b77ec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6d42:	2800      	cmp	r0, #0
   b6d44:	bf08      	it	eq
   b6d46:	2400      	moveq	r4, #0
      }
   b6d48:	4620      	mov	r0, r4
   b6d4a:	bd10      	pop	{r4, pc}
   b6d4c:	000baf18 	.word	0x000baf18

000b6d50 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6d50:	b510      	push	{r4, lr}
   b6d52:	21ac      	movs	r1, #172	; 0xac
   b6d54:	4604      	mov	r4, r0
   b6d56:	f7fd f9a4 	bl	b40a2 <_ZdlPvj>
   b6d5a:	4620      	mov	r0, r4
   b6d5c:	bd10      	pop	{r4, pc}

000b6d5e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6d5e:	21ac      	movs	r1, #172	; 0xac
   b6d60:	f7fd b99f 	b.w	b40a2 <_ZdlPvj>

000b6d64 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6d68:	f04f 0800 	mov.w	r8, #0
   b6d6c:	b086      	sub	sp, #24
   b6d6e:	461c      	mov	r4, r3
   b6d70:	f8c0 8004 	str.w	r8, [r0, #4]
   b6d74:	4605      	mov	r5, r0
   b6d76:	460e      	mov	r6, r1
   b6d78:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6d7a:	4641      	mov	r1, r8
   b6d7c:	2210      	movs	r2, #16
   b6d7e:	a802      	add	r0, sp, #8
   b6d80:	f001 fb7f 	bl	b8482 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6d84:	1c63      	adds	r3, r4, #1
   b6d86:	d009      	beq.n	b6d9c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d8c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6d90:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6d94:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6d98:	435c      	muls	r4, r3
   b6d9a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6d9c:	6968      	ldr	r0, [r5, #20]
   b6d9e:	2310      	movs	r3, #16
   b6da0:	9300      	str	r3, [sp, #0]
   b6da2:	6800      	ldr	r0, [r0, #0]
   b6da4:	ab02      	add	r3, sp, #8
   b6da6:	f241 0205 	movw	r2, #4101	; 0x1005
   b6daa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6dae:	f7ff f913 	bl	b5fd8 <sock_setsockopt>
    if (ret < 0) {
   b6db2:	2800      	cmp	r0, #0
   b6db4:	da07      	bge.n	b6dc6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6db6:	f7ff facb 	bl	b6350 <__errno>
   b6dba:	6803      	ldr	r3, [r0, #0]
   b6dbc:	606b      	str	r3, [r5, #4]
        return 0;
   b6dbe:	2000      	movs	r0, #0
}
   b6dc0:	b006      	add	sp, #24
   b6dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6dc6:	6968      	ldr	r0, [r5, #20]
   b6dc8:	2300      	movs	r3, #0
   b6dca:	6800      	ldr	r0, [r0, #0]
   b6dcc:	463a      	mov	r2, r7
   b6dce:	4631      	mov	r1, r6
   b6dd0:	f7ff f922 	bl	b6018 <sock_send>
    if (ret < 0) {
   b6dd4:	1e03      	subs	r3, r0, #0
   b6dd6:	dbee      	blt.n	b6db6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6dd8:	4618      	mov	r0, r3
   b6dda:	e7f1      	b.n	b6dc0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6ddc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6ddc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6dde:	6984      	ldr	r4, [r0, #24]
   b6de0:	4b0a      	ldr	r3, [pc, #40]	; (b6e0c <_ZN9TCPClientD1Ev+0x30>)
   b6de2:	6003      	str	r3, [r0, #0]
   b6de4:	4605      	mov	r5, r0
   b6de6:	b17c      	cbz	r4, b6e08 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b6de8:	6863      	ldr	r3, [r4, #4]
   b6dea:	3b01      	subs	r3, #1
   b6dec:	6063      	str	r3, [r4, #4]
   b6dee:	b95b      	cbnz	r3, b6e08 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6df0:	6823      	ldr	r3, [r4, #0]
   b6df2:	4620      	mov	r0, r4
   b6df4:	689b      	ldr	r3, [r3, #8]
   b6df6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6df8:	68a3      	ldr	r3, [r4, #8]
   b6dfa:	3b01      	subs	r3, #1
   b6dfc:	60a3      	str	r3, [r4, #8]
   b6dfe:	b91b      	cbnz	r3, b6e08 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b6e00:	6823      	ldr	r3, [r4, #0]
   b6e02:	4620      	mov	r0, r4
   b6e04:	68db      	ldr	r3, [r3, #12]
   b6e06:	4798      	blx	r3
   b6e08:	4628      	mov	r0, r5
   b6e0a:	bd38      	pop	{r3, r4, r5, pc}
   b6e0c:	000bb02c 	.word	0x000bb02c

000b6e10 <_ZN9TCPClientD0Ev>:
   b6e10:	b510      	push	{r4, lr}
   b6e12:	4604      	mov	r4, r0
   b6e14:	f7ff ffe2 	bl	b6ddc <_ZN9TCPClientD1Ev>
   b6e18:	4620      	mov	r0, r4
   b6e1a:	211c      	movs	r1, #28
   b6e1c:	f7fd f941 	bl	b40a2 <_ZdlPvj>
   b6e20:	4620      	mov	r0, r4
   b6e22:	bd10      	pop	{r4, pc}

000b6e24 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6e24:	b530      	push	{r4, r5, lr}
   b6e26:	b087      	sub	sp, #28
   b6e28:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6e2a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6e2c:	4668      	mov	r0, sp
   b6e2e:	f7ff fbc5 	bl	b65bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e34:	3404      	adds	r4, #4
   b6e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e38:	682b      	ldr	r3, [r5, #0]
   b6e3a:	7023      	strb	r3, [r4, #0]
    }
   b6e3c:	b007      	add	sp, #28
   b6e3e:	bd30      	pop	{r4, r5, pc}

000b6e40 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6e40:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6e42:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6e44:	4b05      	ldr	r3, [pc, #20]	; (b6e5c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6e46:	4604      	mov	r4, r0
   b6e48:	358c      	adds	r5, #140	; 0x8c
   b6e4a:	f844 3b04 	str.w	r3, [r4], #4
   b6e4e:	4606      	mov	r6, r0
   b6e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e54:	682b      	ldr	r3, [r5, #0]
   b6e56:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6e58:	4630      	mov	r0, r6
   b6e5a:	bd70      	pop	{r4, r5, r6, pc}
   b6e5c:	000baf8c 	.word	0x000baf8c

000b6e60 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e64:	4698      	mov	r8, r3
    stop();
   b6e66:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e68:	b093      	sub	sp, #76	; 0x4c
   b6e6a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6e6c:	2400      	movs	r4, #0
    stop();
   b6e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e70:	4606      	mov	r6, r0
   b6e72:	4617      	mov	r7, r2
    stop();
   b6e74:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6e76:	4628      	mov	r0, r5
   b6e78:	466b      	mov	r3, sp
   b6e7a:	4622      	mov	r2, r4
   b6e7c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6e7e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6e80:	f7ff f8a2 	bl	b5fc8 <netdb_getaddrinfo>
   b6e84:	4605      	mov	r5, r0
   b6e86:	2800      	cmp	r0, #0
   b6e88:	d163      	bne.n	b6f52 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6e8a:	9b00      	ldr	r3, [sp, #0]
   b6e8c:	2b00      	cmp	r3, #0
   b6e8e:	d04b      	beq.n	b6f28 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6e90:	695b      	ldr	r3, [r3, #20]
   b6e92:	2b00      	cmp	r3, #0
   b6e94:	d048      	beq.n	b6f28 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6e96:	a806      	add	r0, sp, #24
   b6e98:	f7ff fb4c 	bl	b6534 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6e9c:	9b00      	ldr	r3, [sp, #0]
   b6e9e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6ea0:	7863      	ldrb	r3, [r4, #1]
   b6ea2:	2b02      	cmp	r3, #2
   b6ea4:	d104      	bne.n	b6eb0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6ea6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6ea8:	a806      	add	r0, sp, #24
   b6eaa:	f7ff ffbb 	bl	b6e24 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6eae:	e026      	b.n	b6efe <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6eb0:	2b0a      	cmp	r3, #10
   b6eb2:	d124      	bne.n	b6efe <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6eb4:	2211      	movs	r2, #17
   b6eb6:	4629      	mov	r1, r5
   b6eb8:	a801      	add	r0, sp, #4
   b6eba:	f001 fae2 	bl	b8482 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6ebe:	68a3      	ldr	r3, [r4, #8]
   b6ec0:	2b00      	cmp	r3, #0
   b6ec2:	d038      	beq.n	b6f36 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6ec4:	f104 0308 	add.w	r3, r4, #8
   b6ec8:	f10d 0c04 	add.w	ip, sp, #4
   b6ecc:	3418      	adds	r4, #24
   b6ece:	6818      	ldr	r0, [r3, #0]
   b6ed0:	6859      	ldr	r1, [r3, #4]
   b6ed2:	4662      	mov	r2, ip
   b6ed4:	c203      	stmia	r2!, {r0, r1}
   b6ed6:	3308      	adds	r3, #8
   b6ed8:	42a3      	cmp	r3, r4
   b6eda:	4694      	mov	ip, r2
   b6edc:	d1f7      	bne.n	b6ece <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6ede:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6ee0:	a901      	add	r1, sp, #4
   b6ee2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6ee4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6ee8:	f7ff fb32 	bl	b6550 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6eec:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6ef0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6ef4:	ac07      	add	r4, sp, #28
   b6ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ef8:	f8dc 3000 	ldr.w	r3, [ip]
   b6efc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6efe:	a806      	add	r0, sp, #24
   b6f00:	f7ff fb38 	bl	b6574 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6f04:	b180      	cbz	r0, b6f28 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6f06:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6f08:	ad07      	add	r5, sp, #28
   b6f0a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6f0e:	4b12      	ldr	r3, [pc, #72]	; (b6f58 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6f10:	930c      	str	r3, [sp, #48]	; 0x30
   b6f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f14:	ac0d      	add	r4, sp, #52	; 0x34
   b6f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f18:	682b      	ldr	r3, [r5, #0]
   b6f1a:	7023      	strb	r3, [r4, #0]
   b6f1c:	463a      	mov	r2, r7
   b6f1e:	4643      	mov	r3, r8
   b6f20:	a90c      	add	r1, sp, #48	; 0x30
   b6f22:	4630      	mov	r0, r6
   b6f24:	47c8      	blx	r9
   b6f26:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6f28:	9800      	ldr	r0, [sp, #0]
   b6f2a:	f7ff f845 	bl	b5fb8 <netdb_freeaddrinfo>
}
   b6f2e:	4628      	mov	r0, r5
   b6f30:	b013      	add	sp, #76	; 0x4c
   b6f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6f36:	68e3      	ldr	r3, [r4, #12]
   b6f38:	2b00      	cmp	r3, #0
   b6f3a:	d1c3      	bne.n	b6ec4 <_ZN9TCPClient7connectEPKctm+0x64>
   b6f3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6f40:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6f44:	f7ff f828 	bl	b5f98 <inet_htonl>
   b6f48:	4581      	cmp	r9, r0
   b6f4a:	d1bb      	bne.n	b6ec4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6f4c:	f104 0114 	add.w	r1, r4, #20
   b6f50:	e7aa      	b.n	b6ea8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6f52:	4625      	mov	r5, r4
   b6f54:	e7e8      	b.n	b6f28 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6f56:	bf00      	nop
   b6f58:	000baf8c 	.word	0x000baf8c

000b6f5c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6f5c:	b538      	push	{r3, r4, r5, lr}
   b6f5e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6f60:	681a      	ldr	r2, [r3, #0]
   b6f62:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6f64:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6f66:	da10      	bge.n	b6f8a <_ZN9TCPClient9connectedEv+0x2e>
   b6f68:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f6c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f70:	429a      	cmp	r2, r3
   b6f72:	d10a      	bne.n	b6f8a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6f74:	6803      	ldr	r3, [r0, #0]
   b6f76:	691b      	ldr	r3, [r3, #16]
   b6f78:	4798      	blx	r3
        if (!rv) {
   b6f7a:	4604      	mov	r4, r0
   b6f7c:	b928      	cbnz	r0, b6f8a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6f7e:	682b      	ldr	r3, [r5, #0]
   b6f80:	4628      	mov	r0, r5
   b6f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f84:	4798      	blx	r3
        rv = available();
   b6f86:	4620      	mov	r0, r4
}
   b6f88:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6f8a:	2001      	movs	r0, #1
   b6f8c:	e7fc      	b.n	b6f88 <_ZN9TCPClient9connectedEv+0x2c>

000b6f8e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6f8e:	b510      	push	{r4, lr}
   b6f90:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6f92:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f96:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f9a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6f9c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6f9e:	d005      	beq.n	b6fac <_ZN9TCPClient4peekEv+0x1e>
   b6fa0:	6963      	ldr	r3, [r4, #20]
   b6fa2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6fa6:	4413      	add	r3, r2
   b6fa8:	7918      	ldrb	r0, [r3, #4]
}
   b6faa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6fac:	6803      	ldr	r3, [r0, #0]
   b6fae:	691b      	ldr	r3, [r3, #16]
   b6fb0:	4798      	blx	r3
   b6fb2:	2800      	cmp	r0, #0
   b6fb4:	d1f4      	bne.n	b6fa0 <_ZN9TCPClient4peekEv+0x12>
   b6fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6fba:	e7f6      	b.n	b6faa <_ZN9TCPClient4peekEv+0x1c>

000b6fbc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fbe:	6943      	ldr	r3, [r0, #20]
   b6fc0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6fc2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6fc6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6fca:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6fcc:	4605      	mov	r5, r0
   b6fce:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6fd0:	d016      	beq.n	b7000 <_ZN9TCPClient4readEPhj+0x44>
   b6fd2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6fd4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6fd8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6fdc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6fde:	42bc      	cmp	r4, r7
   b6fe0:	bf28      	it	cs
   b6fe2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6fe4:	3304      	adds	r3, #4
   b6fe6:	4622      	mov	r2, r4
   b6fe8:	4419      	add	r1, r3
   b6fea:	4630      	mov	r0, r6
   b6fec:	f001 fa3b 	bl	b8466 <memcpy>
   b6ff0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6ff2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6ff6:	4423      	add	r3, r4
   b6ff8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6ffc:	4620      	mov	r0, r4
   b6ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7000:	6803      	ldr	r3, [r0, #0]
   b7002:	691b      	ldr	r3, [r3, #16]
   b7004:	4798      	blx	r3
   b7006:	2800      	cmp	r0, #0
   b7008:	d1e3      	bne.n	b6fd2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b700a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b700e:	e7f5      	b.n	b6ffc <_ZN9TCPClient4readEPhj+0x40>

000b7010 <_ZN9TCPClient12flush_bufferEv>:
   b7010:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7012:	2300      	movs	r3, #0
   b7014:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7018:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b701a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b701e:	4770      	bx	lr

000b7020 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7024:	461f      	mov	r7, r3
    stop();
   b7026:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7028:	460c      	mov	r4, r1
    stop();
   b702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b702c:	b08a      	sub	sp, #40	; 0x28
   b702e:	4605      	mov	r5, r0
   b7030:	4616      	mov	r6, r2
    stop();
   b7032:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7034:	7d23      	ldrb	r3, [r4, #20]
   b7036:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b703a:	2b04      	cmp	r3, #4
   b703c:	bf0c      	ite	eq
   b703e:	2002      	moveq	r0, #2
   b7040:	200a      	movne	r0, #10
   b7042:	2206      	movs	r2, #6
   b7044:	2101      	movs	r1, #1
   b7046:	f7fe ffef 	bl	b6028 <sock_socket>
   b704a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b704e:	696b      	ldr	r3, [r5, #20]
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	2b00      	cmp	r3, #0
   b7054:	da08      	bge.n	b7068 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7056:	682b      	ldr	r3, [r5, #0]
   b7058:	4628      	mov	r0, r5
   b705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b705c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b705e:	4798      	blx	r3
}
   b7060:	4620      	mov	r0, r4
   b7062:	b00a      	add	sp, #40	; 0x28
   b7064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7068:	4628      	mov	r0, r5
   b706a:	f7ff ffd1 	bl	b7010 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b706e:	b1b7      	cbz	r7, b709e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7070:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7072:	a903      	add	r1, sp, #12
   b7074:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7076:	9303      	str	r3, [sp, #12]
   b7078:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b707c:	f7fe ff7c 	bl	b5f78 <if_index_to_name>
   b7080:	2800      	cmp	r0, #0
   b7082:	d1e8      	bne.n	b7056 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7084:	6968      	ldr	r0, [r5, #20]
   b7086:	2306      	movs	r3, #6
   b7088:	9300      	str	r3, [sp, #0]
   b708a:	6800      	ldr	r0, [r0, #0]
   b708c:	ab03      	add	r3, sp, #12
   b708e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7092:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7096:	f7fe ff9f 	bl	b5fd8 <sock_setsockopt>
   b709a:	2800      	cmp	r0, #0
   b709c:	d1db      	bne.n	b7056 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b709e:	221c      	movs	r2, #28
   b70a0:	2100      	movs	r1, #0
   b70a2:	a803      	add	r0, sp, #12
   b70a4:	f001 f9ed 	bl	b8482 <memset>
    if (ip.version() == 4) {
   b70a8:	7d23      	ldrb	r3, [r4, #20]
   b70aa:	2b04      	cmp	r3, #4
   b70ac:	d11d      	bne.n	b70ea <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b70ae:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b70b2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b70b4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b70b8:	f7fe ff76 	bl	b5fa8 <inet_htons>
   b70bc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b70c0:	6860      	ldr	r0, [r4, #4]
   b70c2:	f7fe ff69 	bl	b5f98 <inet_htonl>
   b70c6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b70c8:	696b      	ldr	r3, [r5, #20]
   b70ca:	221c      	movs	r2, #28
   b70cc:	6818      	ldr	r0, [r3, #0]
   b70ce:	a903      	add	r1, sp, #12
   b70d0:	f7fe ff92 	bl	b5ff8 <sock_connect>
   b70d4:	2800      	cmp	r0, #0
   b70d6:	d1be      	bne.n	b7056 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b70d8:	3404      	adds	r4, #4
   b70da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b70dc:	696d      	ldr	r5, [r5, #20]
   b70de:	358c      	adds	r5, #140	; 0x8c
   b70e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b70e2:	6823      	ldr	r3, [r4, #0]
   b70e4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b70e6:	2401      	movs	r4, #1
   b70e8:	e7ba      	b.n	b7060 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b70ea:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b70ee:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b70f0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b70f4:	f7fe ff58 	bl	b5fa8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b70f8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b70fa:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b70fe:	1d23      	adds	r3, r4, #4
   b7100:	f104 0714 	add.w	r7, r4, #20
   b7104:	6818      	ldr	r0, [r3, #0]
   b7106:	6859      	ldr	r1, [r3, #4]
   b7108:	4632      	mov	r2, r6
   b710a:	c203      	stmia	r2!, {r0, r1}
   b710c:	3308      	adds	r3, #8
   b710e:	42bb      	cmp	r3, r7
   b7110:	4616      	mov	r6, r2
   b7112:	d1f7      	bne.n	b7104 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7114:	e7d8      	b.n	b70c8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7118 <_ZN9TCPClient9availableEv>:
{
   b7118:	b530      	push	{r4, r5, lr}
   b711a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b711c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7120:	b08b      	sub	sp, #44	; 0x2c
   b7122:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7124:	b12b      	cbz	r3, b7132 <_ZN9TCPClient9availableEv+0x1a>
   b7126:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b712a:	429a      	cmp	r2, r3
   b712c:	d101      	bne.n	b7132 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b712e:	f7ff ff6f 	bl	b7010 <_ZN9TCPClient12flush_bufferEv>
   b7132:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7134:	6808      	ldr	r0, [r1, #0]
   b7136:	2800      	cmp	r0, #0
   b7138:	db18      	blt.n	b716c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b713a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b713e:	2d7f      	cmp	r5, #127	; 0x7f
   b7140:	d814      	bhi.n	b716c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7142:	3104      	adds	r1, #4
   b7144:	2308      	movs	r3, #8
   b7146:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b714a:	4429      	add	r1, r5
   b714c:	f7fe ff5c 	bl	b6008 <sock_recv>
            if (ret > 0) {
   b7150:	2800      	cmp	r0, #0
   b7152:	dd13      	ble.n	b717c <_ZN9TCPClient9availableEv+0x64>
   b7154:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7156:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b715a:	b90a      	cbnz	r2, b7160 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b715c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7160:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7162:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7166:	4410      	add	r0, r2
   b7168:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b716c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b716e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7172:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7176:	1ac0      	subs	r0, r0, r3
   b7178:	b00b      	add	sp, #44	; 0x2c
   b717a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b717c:	f7ff f8e8 	bl	b6350 <__errno>
   b7180:	6803      	ldr	r3, [r0, #0]
   b7182:	2b0b      	cmp	r3, #11
   b7184:	d0f2      	beq.n	b716c <_ZN9TCPClient9availableEv+0x54>
   b7186:	f7ff f8e3 	bl	b6350 <__errno>
   b718a:	6803      	ldr	r3, [r0, #0]
   b718c:	2b0b      	cmp	r3, #11
   b718e:	d0ed      	beq.n	b716c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7190:	2320      	movs	r3, #32
   b7192:	2500      	movs	r5, #0
   b7194:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7198:	f7ff f8da 	bl	b6350 <__errno>
   b719c:	6803      	ldr	r3, [r0, #0]
   b719e:	9301      	str	r3, [sp, #4]
   b71a0:	4b08      	ldr	r3, [pc, #32]	; (b71c4 <_ZN9TCPClient9availableEv+0xac>)
   b71a2:	4909      	ldr	r1, [pc, #36]	; (b71c8 <_ZN9TCPClient9availableEv+0xb0>)
   b71a4:	9300      	str	r3, [sp, #0]
   b71a6:	aa02      	add	r2, sp, #8
   b71a8:	462b      	mov	r3, r5
   b71aa:	2032      	movs	r0, #50	; 0x32
   b71ac:	f7ff f804 	bl	b61b8 <log_message>
                    sock_close(d_->sock);
   b71b0:	6963      	ldr	r3, [r4, #20]
   b71b2:	6818      	ldr	r0, [r3, #0]
   b71b4:	f7fe ff18 	bl	b5fe8 <sock_close>
   b71b8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b71ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b71be:	601a      	str	r2, [r3, #0]
   b71c0:	e7d4      	b.n	b716c <_ZN9TCPClient9availableEv+0x54>
   b71c2:	bf00      	nop
   b71c4:	000baff5 	.word	0x000baff5
   b71c8:	000bafee 	.word	0x000bafee

000b71cc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b71cc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b71ce:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b71d0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b71d2:	6818      	ldr	r0, [r3, #0]
   b71d4:	2800      	cmp	r0, #0
   b71d6:	db01      	blt.n	b71dc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b71d8:	f7fe ff06 	bl	b5fe8 <sock_close>
   b71dc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b71de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b71e2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b71e4:	6960      	ldr	r0, [r4, #20]
   b71e6:	2211      	movs	r2, #17
   b71e8:	2100      	movs	r1, #0
   b71ea:	308c      	adds	r0, #140	; 0x8c
   b71ec:	f001 f949 	bl	b8482 <memset>
    flush_buffer();
   b71f0:	4620      	mov	r0, r4
}
   b71f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b71f6:	f7ff bf0b 	b.w	b7010 <_ZN9TCPClient12flush_bufferEv>

000b71fa <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b71fa:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b71fc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b71fe:	4604      	mov	r4, r0
          total(0) {
   b7200:	6001      	str	r1, [r0, #0]
   b7202:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7206:	3088      	adds	r0, #136	; 0x88
   b7208:	f7ff f994 	bl	b6534 <_ZN9IPAddressC1Ev>
}
   b720c:	4620      	mov	r0, r4
   b720e:	bd10      	pop	{r4, pc}

000b7210 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7210:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7212:	2300      	movs	r3, #0
   b7214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7218:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b721c:	4a0e      	ldr	r2, [pc, #56]	; (b7258 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b721e:	6103      	str	r3, [r0, #16]
   b7220:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7222:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7224:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7226:	20ac      	movs	r0, #172	; 0xac
   b7228:	9101      	str	r1, [sp, #4]
   b722a:	f7fc ff34 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b722e:	1e05      	subs	r5, r0, #0
   b7230:	f105 060c 	add.w	r6, r5, #12
   b7234:	d008      	beq.n	b7248 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7236:	2301      	movs	r3, #1
   b7238:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b723c:	4b07      	ldr	r3, [pc, #28]	; (b725c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b723e:	9901      	ldr	r1, [sp, #4]
   b7240:	602b      	str	r3, [r5, #0]
   b7242:	4630      	mov	r0, r6
   b7244:	f7ff ffd9 	bl	b71fa <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7248:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b724a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b724e:	f7ff fedf 	bl	b7010 <_ZN9TCPClient12flush_bufferEv>
}
   b7252:	b002      	add	sp, #8
   b7254:	bd70      	pop	{r4, r5, r6, pc}
   b7256:	bf00      	nop
   b7258:	000bb02c 	.word	0x000bb02c
   b725c:	000bb010 	.word	0x000bb010

000b7260 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7260:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7262:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7266:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7268:	f7ff ffd2 	bl	b7210 <_ZN9TCPClientC1Ei>
}
   b726c:	4620      	mov	r0, r4
   b726e:	bd10      	pop	{r4, pc}

000b7270 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7270:	b510      	push	{r4, lr}
   b7272:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7274:	6800      	ldr	r0, [r0, #0]
   b7276:	2800      	cmp	r0, #0
   b7278:	db01      	blt.n	b727e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b727a:	f7fe feb5 	bl	b5fe8 <sock_close>
    }
}
   b727e:	4620      	mov	r0, r4
   b7280:	bd10      	pop	{r4, pc}

000b7282 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7282:	300c      	adds	r0, #12
   b7284:	f7ff bff4 	b.w	b7270 <_ZN9TCPClient4DataD1Ev>

000b7288 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7288:	4b02      	ldr	r3, [pc, #8]	; (b7294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b728a:	681a      	ldr	r2, [r3, #0]
   b728c:	4b02      	ldr	r3, [pc, #8]	; (b7298 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b728e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7290:	4770      	bx	lr
   b7292:	bf00      	nop
   b7294:	2003e3f8 	.word	0x2003e3f8
   b7298:	2003e700 	.word	0x2003e700

000b729c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b729c:	4770      	bx	lr

000b729e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b729e:	7441      	strb	r1, [r0, #17]
}
   b72a0:	4770      	bx	lr

000b72a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b72a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b72a4:	7c00      	ldrb	r0, [r0, #16]
   b72a6:	f7fe ff37 	bl	b6118 <hal_usart_available_data_for_write>
}
   b72aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b72ae:	bd08      	pop	{r3, pc}

000b72b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b72b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b72b2:	7c00      	ldrb	r0, [r0, #16]
   b72b4:	f7fe ff08 	bl	b60c8 <hal_usart_available>
}
   b72b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b72bc:	bd08      	pop	{r3, pc}

000b72be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b72be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b72c0:	7c00      	ldrb	r0, [r0, #16]
   b72c2:	f7fe ff11 	bl	b60e8 <hal_usart_peek>
}
   b72c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b72ca:	bd08      	pop	{r3, pc}

000b72cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b72cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b72ce:	7c00      	ldrb	r0, [r0, #16]
   b72d0:	f7fe ff02 	bl	b60d8 <hal_usart_read>
}
   b72d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b72d8:	bd08      	pop	{r3, pc}

000b72da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b72da:	7c00      	ldrb	r0, [r0, #16]
   b72dc:	f7fe bf0c 	b.w	b60f8 <hal_usart_flush>

000b72e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b72e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b72e2:	7c45      	ldrb	r5, [r0, #17]
{
   b72e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b72e6:	b12d      	cbz	r5, b72f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b72e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b72ea:	b003      	add	sp, #12
   b72ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b72f0:	f7fe bee2 	b.w	b60b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b72f4:	7c00      	ldrb	r0, [r0, #16]
   b72f6:	9101      	str	r1, [sp, #4]
   b72f8:	f7fe ff0e 	bl	b6118 <hal_usart_available_data_for_write>
   b72fc:	2800      	cmp	r0, #0
   b72fe:	9901      	ldr	r1, [sp, #4]
   b7300:	dcf2      	bgt.n	b72e8 <_ZN11USARTSerial5writeEh+0x8>
}
   b7302:	4628      	mov	r0, r5
   b7304:	b003      	add	sp, #12
   b7306:	bd30      	pop	{r4, r5, pc}

000b7308 <_ZN11USARTSerialD0Ev>:
   b7308:	b510      	push	{r4, lr}
   b730a:	2114      	movs	r1, #20
   b730c:	4604      	mov	r4, r0
   b730e:	f7fc fec8 	bl	b40a2 <_ZdlPvj>
   b7312:	4620      	mov	r0, r4
   b7314:	bd10      	pop	{r4, pc}
	...

000b7318 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7318:	b510      	push	{r4, lr}
   b731a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b731e:	4604      	mov	r4, r0
   b7320:	4608      	mov	r0, r1
   b7322:	4611      	mov	r1, r2
   b7324:	2200      	movs	r2, #0
   b7326:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b732a:	4b04      	ldr	r3, [pc, #16]	; (b733c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b732c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b732e:	2301      	movs	r3, #1
  _serial = serial;
   b7330:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7332:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7334:	f7fe fef8 	bl	b6128 <hal_usart_init_ex>
}
   b7338:	4620      	mov	r0, r4
   b733a:	bd10      	pop	{r4, pc}
   b733c:	000bb094 	.word	0x000bb094

000b7340 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7340:	7441      	strb	r1, [r0, #17]
}
   b7342:	4770      	bx	lr

000b7344 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7344:	4770      	bx	lr

000b7346 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7346:	4770      	bx	lr

000b7348 <_ZN9USBSerial4readEv>:
{
   b7348:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b734a:	2100      	movs	r1, #0
   b734c:	7c00      	ldrb	r0, [r0, #16]
   b734e:	f7fe ff13 	bl	b6178 <HAL_USB_USART_Receive_Data>
}
   b7352:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7356:	bd08      	pop	{r3, pc}

000b7358 <_ZN9USBSerial4peekEv>:
{
   b7358:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b735a:	2101      	movs	r1, #1
   b735c:	7c00      	ldrb	r0, [r0, #16]
   b735e:	f7fe ff0b 	bl	b6178 <HAL_USB_USART_Receive_Data>
}
   b7362:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7366:	bd08      	pop	{r3, pc}

000b7368 <_ZN9USBSerial17availableForWriteEv>:
{
   b7368:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b736a:	7c00      	ldrb	r0, [r0, #16]
   b736c:	f7fe fefc 	bl	b6168 <HAL_USB_USART_Available_Data_For_Write>
}
   b7370:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7374:	bd08      	pop	{r3, pc}

000b7376 <_ZN9USBSerial9availableEv>:
{
   b7376:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7378:	7c00      	ldrb	r0, [r0, #16]
   b737a:	f7fe feed 	bl	b6158 <HAL_USB_USART_Available_Data>
}
   b737e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7382:	bd08      	pop	{r3, pc}

000b7384 <_ZN9USBSerial5writeEh>:
{
   b7384:	b513      	push	{r0, r1, r4, lr}
   b7386:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7388:	7c00      	ldrb	r0, [r0, #16]
{
   b738a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b738c:	f7fe feec 	bl	b6168 <HAL_USB_USART_Available_Data_For_Write>
   b7390:	2800      	cmp	r0, #0
   b7392:	9901      	ldr	r1, [sp, #4]
   b7394:	dc01      	bgt.n	b739a <_ZN9USBSerial5writeEh+0x16>
   b7396:	7c60      	ldrb	r0, [r4, #17]
   b7398:	b120      	cbz	r0, b73a4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b739a:	7c20      	ldrb	r0, [r4, #16]
   b739c:	f7fe fef4 	bl	b6188 <HAL_USB_USART_Send_Data>
   b73a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b73a4:	b002      	add	sp, #8
   b73a6:	bd10      	pop	{r4, pc}

000b73a8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b73a8:	7c00      	ldrb	r0, [r0, #16]
   b73aa:	f7fe bef5 	b.w	b6198 <HAL_USB_USART_Flush_Data>

000b73ae <_ZN9USBSerialD0Ev>:
   b73ae:	b510      	push	{r4, lr}
   b73b0:	2114      	movs	r1, #20
   b73b2:	4604      	mov	r4, r0
   b73b4:	f7fc fe75 	bl	b40a2 <_ZdlPvj>
   b73b8:	4620      	mov	r0, r4
   b73ba:	bd10      	pop	{r4, pc}

000b73bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b73bc:	b510      	push	{r4, lr}
   b73be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b73c2:	4604      	mov	r4, r0
   b73c4:	4608      	mov	r0, r1
   b73c6:	2100      	movs	r1, #0
   b73c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b73cc:	4b04      	ldr	r3, [pc, #16]	; (b73e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b73ce:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b73d0:	2301      	movs	r3, #1
  _serial = serial;
   b73d2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b73d4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b73d6:	4611      	mov	r1, r2
   b73d8:	f7fe feae 	bl	b6138 <HAL_USB_USART_Init>
}
   b73dc:	4620      	mov	r0, r4
   b73de:	bd10      	pop	{r4, pc}
   b73e0:	000bb0c4 	.word	0x000bb0c4

000b73e4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b73e4:	7c00      	ldrb	r0, [r0, #16]
   b73e6:	2200      	movs	r2, #0
   b73e8:	f7fe beae 	b.w	b6148 <HAL_USB_USART_Begin>

000b73ec <_Z19acquireSerialBufferv>:
{
   b73ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b73ee:	2214      	movs	r2, #20
{
   b73f0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b73f2:	2100      	movs	r1, #0
   b73f4:	f001 f845 	bl	b8482 <memset>
}
   b73f8:	4620      	mov	r0, r4
   b73fa:	bd10      	pop	{r4, pc}

000b73fc <_Z16_fetch_usbserialv>:
{
   b73fc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b73fe:	4c0f      	ldr	r4, [pc, #60]	; (b743c <_Z16_fetch_usbserialv+0x40>)
{
   b7400:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7402:	a803      	add	r0, sp, #12
   b7404:	f7ff fff2 	bl	b73ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7408:	7821      	ldrb	r1, [r4, #0]
   b740a:	f3bf 8f5b 	dmb	ish
   b740e:	f011 0101 	ands.w	r1, r1, #1
   b7412:	d10f      	bne.n	b7434 <_Z16_fetch_usbserialv+0x38>
   b7414:	4620      	mov	r0, r4
   b7416:	9101      	str	r1, [sp, #4]
   b7418:	f7fc fe52 	bl	b40c0 <__cxa_guard_acquire>
   b741c:	9901      	ldr	r1, [sp, #4]
   b741e:	b148      	cbz	r0, b7434 <_Z16_fetch_usbserialv+0x38>
   b7420:	aa03      	add	r2, sp, #12
   b7422:	4807      	ldr	r0, [pc, #28]	; (b7440 <_Z16_fetch_usbserialv+0x44>)
   b7424:	f7ff ffca 	bl	b73bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7428:	4620      	mov	r0, r4
   b742a:	f7fc fe4e 	bl	b40ca <__cxa_guard_release>
   b742e:	4805      	ldr	r0, [pc, #20]	; (b7444 <_Z16_fetch_usbserialv+0x48>)
   b7430:	f001 f810 	bl	b8454 <atexit>
	return _usbserial;
}
   b7434:	4802      	ldr	r0, [pc, #8]	; (b7440 <_Z16_fetch_usbserialv+0x44>)
   b7436:	b008      	add	sp, #32
   b7438:	bd10      	pop	{r4, pc}
   b743a:	bf00      	nop
   b743c:	2003e704 	.word	0x2003e704
   b7440:	2003e708 	.word	0x2003e708
   b7444:	000b7345 	.word	0x000b7345

000b7448 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7448:	2200      	movs	r2, #0
   b744a:	6840      	ldr	r0, [r0, #4]
   b744c:	4611      	mov	r1, r2
   b744e:	f7fe bf0f 	b.w	b6270 <network_ready>

000b7452 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7452:	2200      	movs	r2, #0
   b7454:	6840      	ldr	r0, [r0, #4]
   b7456:	4611      	mov	r1, r2
   b7458:	f7fe bf2a 	b.w	b62b0 <network_listening>

000b745c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b745c:	2200      	movs	r2, #0
   b745e:	6840      	ldr	r0, [r0, #4]
   b7460:	4611      	mov	r1, r2
   b7462:	f7fe bf35 	b.w	b62d0 <network_get_listen_timeout>

000b7466 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7466:	6840      	ldr	r0, [r0, #4]
   b7468:	2200      	movs	r2, #0
   b746a:	f7fe bf29 	b.w	b62c0 <network_set_listen_timeout>

000b746e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b746e:	6840      	ldr	r0, [r0, #4]
   b7470:	2200      	movs	r2, #0
   b7472:	f081 0101 	eor.w	r1, r1, #1
   b7476:	f7fe bf13 	b.w	b62a0 <network_listen>

000b747a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b747a:	2300      	movs	r3, #0
   b747c:	6840      	ldr	r0, [r0, #4]
   b747e:	461a      	mov	r2, r3
   b7480:	4619      	mov	r1, r3
   b7482:	f7fe bf05 	b.w	b6290 <network_off>

000b7486 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7486:	2300      	movs	r3, #0
   b7488:	6840      	ldr	r0, [r0, #4]
   b748a:	461a      	mov	r2, r3
   b748c:	4619      	mov	r1, r3
   b748e:	f7fe bef7 	b.w	b6280 <network_on>

000b7492 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7492:	2200      	movs	r2, #0
   b7494:	6840      	ldr	r0, [r0, #4]
   b7496:	4611      	mov	r1, r2
   b7498:	f7fe beda 	b.w	b6250 <network_connecting>

000b749c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b749c:	6840      	ldr	r0, [r0, #4]
   b749e:	2200      	movs	r2, #0
   b74a0:	2102      	movs	r1, #2
   b74a2:	f7fe bedd 	b.w	b6260 <network_disconnect>

000b74a6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b74a6:	2300      	movs	r3, #0
   b74a8:	6840      	ldr	r0, [r0, #4]
   b74aa:	461a      	mov	r2, r3
   b74ac:	f7fe bec8 	b.w	b6240 <network_connect>

000b74b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b74b0:	4b02      	ldr	r3, [pc, #8]	; (b74bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b74b2:	2204      	movs	r2, #4
   b74b4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b74b6:	4a02      	ldr	r2, [pc, #8]	; (b74c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b74b8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b74ba:	4770      	bx	lr
   b74bc:	2003e71c 	.word	0x2003e71c
   b74c0:	000bb0f4 	.word	0x000bb0f4

000b74c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b74c4:	4b01      	ldr	r3, [pc, #4]	; (b74cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b74c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b74c8:	4770      	bx	lr
   b74ca:	bf00      	nop
   b74cc:	2003e3fc 	.word	0x2003e3fc

000b74d0 <serialEventRun>:
{
   b74d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b74d2:	4b0b      	ldr	r3, [pc, #44]	; (b7500 <serialEventRun+0x30>)
   b74d4:	b143      	cbz	r3, b74e8 <serialEventRun+0x18>
   b74d6:	f7ff ff91 	bl	b73fc <_Z16_fetch_usbserialv>
   b74da:	6803      	ldr	r3, [r0, #0]
   b74dc:	691b      	ldr	r3, [r3, #16]
   b74de:	4798      	blx	r3
   b74e0:	2800      	cmp	r0, #0
   b74e2:	dd01      	ble.n	b74e8 <serialEventRun+0x18>
        serialEvent();
   b74e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b74e8:	4b06      	ldr	r3, [pc, #24]	; (b7504 <serialEventRun+0x34>)
   b74ea:	b143      	cbz	r3, b74fe <serialEventRun+0x2e>
   b74ec:	f000 f958 	bl	b77a0 <_Z22__fetch_global_Serial1v>
   b74f0:	6803      	ldr	r3, [r0, #0]
   b74f2:	691b      	ldr	r3, [r3, #16]
   b74f4:	4798      	blx	r3
   b74f6:	2800      	cmp	r0, #0
   b74f8:	dd01      	ble.n	b74fe <serialEventRun+0x2e>
        serialEvent1();
   b74fa:	f3af 8000 	nop.w
}
   b74fe:	bd08      	pop	{r3, pc}
	...

000b7508 <_post_loop>:
{
   b7508:	b508      	push	{r3, lr}
	serialEventRun();
   b750a:	f7ff ffe1 	bl	b74d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b750e:	f7fe fcb3 	bl	b5e78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7512:	4b01      	ldr	r3, [pc, #4]	; (b7518 <_post_loop+0x10>)
   b7514:	6018      	str	r0, [r3, #0]
}
   b7516:	bd08      	pop	{r3, pc}
   b7518:	2003e72c 	.word	0x2003e72c

000b751c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b751c:	4805      	ldr	r0, [pc, #20]	; (b7534 <_Z33system_initialize_user_backup_ramv+0x18>)
   b751e:	4a06      	ldr	r2, [pc, #24]	; (b7538 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7520:	4906      	ldr	r1, [pc, #24]	; (b753c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7522:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7524:	1a12      	subs	r2, r2, r0
   b7526:	f000 ff9e 	bl	b8466 <memcpy>
    __backup_sram_signature = signature;
   b752a:	4b05      	ldr	r3, [pc, #20]	; (b7540 <_Z33system_initialize_user_backup_ramv+0x24>)
   b752c:	4a05      	ldr	r2, [pc, #20]	; (b7544 <_Z33system_initialize_user_backup_ramv+0x28>)
   b752e:	601a      	str	r2, [r3, #0]
}
   b7530:	bd08      	pop	{r3, pc}
   b7532:	bf00      	nop
   b7534:	2003f400 	.word	0x2003f400
   b7538:	2003f404 	.word	0x2003f404
   b753c:	000bb614 	.word	0x000bb614
   b7540:	2003f400 	.word	0x2003f400
   b7544:	9a271c1e 	.word	0x9a271c1e

000b7548 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7548:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b754a:	2300      	movs	r3, #0
   b754c:	9300      	str	r3, [sp, #0]
   b754e:	461a      	mov	r2, r3
   b7550:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7554:	f7fe fe5a 	bl	b620c <system_ctrl_set_result>
}
   b7558:	b003      	add	sp, #12
   b755a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7560 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7560:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7562:	8843      	ldrh	r3, [r0, #2]
   b7564:	2b0a      	cmp	r3, #10
   b7566:	d008      	beq.n	b757a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7568:	2b50      	cmp	r3, #80	; 0x50
   b756a:	d10b      	bne.n	b7584 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b756c:	4b09      	ldr	r3, [pc, #36]	; (b7594 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b756e:	681b      	ldr	r3, [r3, #0]
   b7570:	b14b      	cbz	r3, b7586 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7572:	b003      	add	sp, #12
   b7574:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7578:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b757a:	f7ff ffe5 	bl	b7548 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b757e:	b003      	add	sp, #12
   b7580:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7584:	2300      	movs	r3, #0
   b7586:	9300      	str	r3, [sp, #0]
   b7588:	461a      	mov	r2, r3
   b758a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b758e:	f7fe fe3d 	bl	b620c <system_ctrl_set_result>
}
   b7592:	e7f4      	b.n	b757e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7594:	2003e728 	.word	0x2003e728

000b7598 <module_user_init_hook>:
{
   b7598:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b759a:	4812      	ldr	r0, [pc, #72]	; (b75e4 <module_user_init_hook+0x4c>)
   b759c:	2100      	movs	r1, #0
   b759e:	f7fe fee7 	bl	b6370 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b75a2:	4b11      	ldr	r3, [pc, #68]	; (b75e8 <module_user_init_hook+0x50>)
   b75a4:	681a      	ldr	r2, [r3, #0]
   b75a6:	4b11      	ldr	r3, [pc, #68]	; (b75ec <module_user_init_hook+0x54>)
   b75a8:	429a      	cmp	r2, r3
   b75aa:	4b11      	ldr	r3, [pc, #68]	; (b75f0 <module_user_init_hook+0x58>)
   b75ac:	bf0c      	ite	eq
   b75ae:	2201      	moveq	r2, #1
   b75b0:	2200      	movne	r2, #0
   b75b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b75b4:	d001      	beq.n	b75ba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b75b6:	f7ff ffb1 	bl	b751c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b75ba:	f7fe fc4d 	bl	b5e58 <HAL_RNG_GetRandomNumber>
   b75be:	4604      	mov	r4, r0
    srand(seed);
   b75c0:	f000 ff68 	bl	b8494 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b75c4:	4b0b      	ldr	r3, [pc, #44]	; (b75f4 <module_user_init_hook+0x5c>)
   b75c6:	b113      	cbz	r3, b75ce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b75c8:	4620      	mov	r0, r4
   b75ca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b75ce:	2100      	movs	r1, #0
   b75d0:	4808      	ldr	r0, [pc, #32]	; (b75f4 <module_user_init_hook+0x5c>)
   b75d2:	f7fe fe2d 	bl	b6230 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b75d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b75da:	4807      	ldr	r0, [pc, #28]	; (b75f8 <module_user_init_hook+0x60>)
   b75dc:	2100      	movs	r1, #0
   b75de:	f7fe be0b 	b.w	b61f8 <system_ctrl_set_app_request_handler>
   b75e2:	bf00      	nop
   b75e4:	000b74c5 	.word	0x000b74c5
   b75e8:	2003f400 	.word	0x2003f400
   b75ec:	9a271c1e 	.word	0x9a271c1e
   b75f0:	2003e724 	.word	0x2003e724
   b75f4:	00000000 	.word	0x00000000
   b75f8:	000b7561 	.word	0x000b7561

000b75fc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b75fc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b75fe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7600:	d902      	bls.n	b7608 <pinAvailable+0xc>
    return false;
   b7602:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7604:	b002      	add	sp, #8
   b7606:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7608:	f1a0 030b 	sub.w	r3, r0, #11
   b760c:	2b02      	cmp	r3, #2
   b760e:	d81a      	bhi.n	b7646 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7610:	4c17      	ldr	r4, [pc, #92]	; (b7670 <pinAvailable+0x74>)
   b7612:	7821      	ldrb	r1, [r4, #0]
   b7614:	f3bf 8f5b 	dmb	ish
   b7618:	f011 0101 	ands.w	r1, r1, #1
   b761c:	d10b      	bne.n	b7636 <pinAvailable+0x3a>
   b761e:	4620      	mov	r0, r4
   b7620:	9101      	str	r1, [sp, #4]
   b7622:	f7fc fd4d 	bl	b40c0 <__cxa_guard_acquire>
   b7626:	9901      	ldr	r1, [sp, #4]
   b7628:	b128      	cbz	r0, b7636 <pinAvailable+0x3a>
   b762a:	4812      	ldr	r0, [pc, #72]	; (b7674 <pinAvailable+0x78>)
   b762c:	f7ff f9fa 	bl	b6a24 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7630:	4620      	mov	r0, r4
   b7632:	f7fc fd4a 	bl	b40ca <__cxa_guard_release>
   b7636:	4b0f      	ldr	r3, [pc, #60]	; (b7674 <pinAvailable+0x78>)
   b7638:	7818      	ldrb	r0, [r3, #0]
   b763a:	f7fe fd15 	bl	b6068 <hal_spi_is_enabled>
   b763e:	2800      	cmp	r0, #0
   b7640:	d1df      	bne.n	b7602 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7642:	2001      	movs	r0, #1
   b7644:	e7de      	b.n	b7604 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7646:	2801      	cmp	r0, #1
   b7648:	d809      	bhi.n	b765e <pinAvailable+0x62>
   b764a:	f000 f869 	bl	b7720 <_Z19__fetch_global_Wirev>
   b764e:	2100      	movs	r1, #0
   b7650:	7c00      	ldrb	r0, [r0, #16]
   b7652:	f7fe fc81 	bl	b5f58 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7656:	f080 0001 	eor.w	r0, r0, #1
   b765a:	b2c0      	uxtb	r0, r0
   b765c:	e7d2      	b.n	b7604 <pinAvailable+0x8>
   b765e:	3809      	subs	r0, #9
   b7660:	2801      	cmp	r0, #1
   b7662:	d8ee      	bhi.n	b7642 <pinAvailable+0x46>
   b7664:	f000 f89c 	bl	b77a0 <_Z22__fetch_global_Serial1v>
   b7668:	7c00      	ldrb	r0, [r0, #16]
   b766a:	f7fe fd4d 	bl	b6108 <hal_usart_is_enabled>
   b766e:	e7f2      	b.n	b7656 <pinAvailable+0x5a>
   b7670:	2003e6bc 	.word	0x2003e6bc
   b7674:	2003e6c0 	.word	0x2003e6c0

000b7678 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7678:	2823      	cmp	r0, #35	; 0x23
{
   b767a:	b538      	push	{r3, r4, r5, lr}
   b767c:	4604      	mov	r4, r0
   b767e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7680:	d80a      	bhi.n	b7698 <pinMode+0x20>
   b7682:	29ff      	cmp	r1, #255	; 0xff
   b7684:	d008      	beq.n	b7698 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7686:	f7ff ffb9 	bl	b75fc <pinAvailable>
   b768a:	b128      	cbz	r0, b7698 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b768c:	4629      	mov	r1, r5
   b768e:	4620      	mov	r0, r4
}
   b7690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7694:	f7fe bbf8 	b.w	b5e88 <HAL_Pin_Mode>
}
   b7698:	bd38      	pop	{r3, r4, r5, pc}

000b769a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b769a:	b538      	push	{r3, r4, r5, lr}
   b769c:	4604      	mov	r4, r0
   b769e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b76a0:	f7fe fbfa 	bl	b5e98 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b76a4:	28ff      	cmp	r0, #255	; 0xff
   b76a6:	d010      	beq.n	b76ca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b76a8:	2806      	cmp	r0, #6
   b76aa:	d804      	bhi.n	b76b6 <digitalWrite+0x1c>
   b76ac:	234d      	movs	r3, #77	; 0x4d
   b76ae:	fa23 f000 	lsr.w	r0, r3, r0
   b76b2:	07c3      	lsls	r3, r0, #31
   b76b4:	d409      	bmi.n	b76ca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b76b6:	4620      	mov	r0, r4
   b76b8:	f7ff ffa0 	bl	b75fc <pinAvailable>
   b76bc:	b128      	cbz	r0, b76ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b76be:	4629      	mov	r1, r5
   b76c0:	4620      	mov	r0, r4
}
   b76c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b76c6:	f7fe bbef 	b.w	b5ea8 <HAL_GPIO_Write>
}
   b76ca:	bd38      	pop	{r3, r4, r5, pc}

000b76cc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b76cc:	b510      	push	{r4, lr}
   b76ce:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b76d0:	f7fe fbe2 	bl	b5e98 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b76d4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b76d6:	b2db      	uxtb	r3, r3
   b76d8:	2b01      	cmp	r3, #1
   b76da:	d908      	bls.n	b76ee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b76dc:	4620      	mov	r0, r4
   b76de:	f7ff ff8d 	bl	b75fc <pinAvailable>
   b76e2:	b120      	cbz	r0, b76ee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b76e4:	4620      	mov	r0, r4
}
   b76e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b76ea:	f7fe bbe5 	b.w	b5eb8 <HAL_GPIO_Read>
}
   b76ee:	2000      	movs	r0, #0
   b76f0:	bd10      	pop	{r4, pc}

000b76f2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b76f2:	4770      	bx	lr

000b76f4 <_Z17acquireWireBufferv>:
{
   b76f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b76f6:	2520      	movs	r5, #32
   b76f8:	2314      	movs	r3, #20
{
   b76fa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b76fc:	6003      	str	r3, [r0, #0]
   b76fe:	6085      	str	r5, [r0, #8]
   b7700:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7702:	4906      	ldr	r1, [pc, #24]	; (b771c <_Z17acquireWireBufferv+0x28>)
   b7704:	4628      	mov	r0, r5
   b7706:	f000 f86f 	bl	b77e8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b770a:	4904      	ldr	r1, [pc, #16]	; (b771c <_Z17acquireWireBufferv+0x28>)
	};
   b770c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b770e:	4628      	mov	r0, r5
   b7710:	f000 f86a 	bl	b77e8 <_ZnajRKSt9nothrow_t>
	};
   b7714:	60e0      	str	r0, [r4, #12]
}
   b7716:	4620      	mov	r0, r4
   b7718:	bd38      	pop	{r3, r4, r5, pc}
   b771a:	bf00      	nop
   b771c:	000bb128 	.word	0x000bb128

000b7720 <_Z19__fetch_global_Wirev>:
{
   b7720:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7722:	4d0e      	ldr	r5, [pc, #56]	; (b775c <_Z19__fetch_global_Wirev+0x3c>)
   b7724:	7829      	ldrb	r1, [r5, #0]
   b7726:	f3bf 8f5b 	dmb	ish
   b772a:	f011 0401 	ands.w	r4, r1, #1
{
   b772e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7730:	d111      	bne.n	b7756 <_Z19__fetch_global_Wirev+0x36>
   b7732:	4628      	mov	r0, r5
   b7734:	f7fc fcc4 	bl	b40c0 <__cxa_guard_acquire>
   b7738:	b168      	cbz	r0, b7756 <_Z19__fetch_global_Wirev+0x36>
   b773a:	a801      	add	r0, sp, #4
   b773c:	f7ff ffda 	bl	b76f4 <_Z17acquireWireBufferv>
   b7740:	aa01      	add	r2, sp, #4
   b7742:	4621      	mov	r1, r4
   b7744:	4806      	ldr	r0, [pc, #24]	; (b7760 <_Z19__fetch_global_Wirev+0x40>)
   b7746:	f7fe fe91 	bl	b646c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b774a:	4628      	mov	r0, r5
   b774c:	f7fc fcbd 	bl	b40ca <__cxa_guard_release>
   b7750:	4804      	ldr	r0, [pc, #16]	; (b7764 <_Z19__fetch_global_Wirev+0x44>)
   b7752:	f000 fe7f 	bl	b8454 <atexit>
	return wire;
}
   b7756:	4802      	ldr	r0, [pc, #8]	; (b7760 <_Z19__fetch_global_Wirev+0x40>)
   b7758:	b007      	add	sp, #28
   b775a:	bd30      	pop	{r4, r5, pc}
   b775c:	2003e730 	.word	0x2003e730
   b7760:	2003e734 	.word	0x2003e734
   b7764:	000b76f3 	.word	0x000b76f3

000b7768 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7768:	4770      	bx	lr
	...

000b776c <_Z20acquireSerial1Bufferv>:
{
   b776c:	b538      	push	{r3, r4, r5, lr}
   b776e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7770:	2514      	movs	r5, #20
   b7772:	462a      	mov	r2, r5
   b7774:	2100      	movs	r1, #0
   b7776:	f000 fe84 	bl	b8482 <memset>
   b777a:	8025      	strh	r5, [r4, #0]
   b777c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b777e:	4907      	ldr	r1, [pc, #28]	; (b779c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7780:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7782:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7784:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7786:	f000 f82f 	bl	b77e8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b778a:	4904      	ldr	r1, [pc, #16]	; (b779c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b778c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b778e:	4628      	mov	r0, r5
   b7790:	f000 f82a 	bl	b77e8 <_ZnajRKSt9nothrow_t>
    };
   b7794:	60e0      	str	r0, [r4, #12]
}
   b7796:	4620      	mov	r0, r4
   b7798:	bd38      	pop	{r3, r4, r5, pc}
   b779a:	bf00      	nop
   b779c:	000bb128 	.word	0x000bb128

000b77a0 <_Z22__fetch_global_Serial1v>:
{
   b77a0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77a2:	4d0e      	ldr	r5, [pc, #56]	; (b77dc <_Z22__fetch_global_Serial1v+0x3c>)
   b77a4:	7829      	ldrb	r1, [r5, #0]
   b77a6:	f3bf 8f5b 	dmb	ish
   b77aa:	f011 0401 	ands.w	r4, r1, #1
{
   b77ae:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77b0:	d111      	bne.n	b77d6 <_Z22__fetch_global_Serial1v+0x36>
   b77b2:	4628      	mov	r0, r5
   b77b4:	f7fc fc84 	bl	b40c0 <__cxa_guard_acquire>
   b77b8:	b168      	cbz	r0, b77d6 <_Z22__fetch_global_Serial1v+0x36>
   b77ba:	a801      	add	r0, sp, #4
   b77bc:	f7ff ffd6 	bl	b776c <_Z20acquireSerial1Bufferv>
   b77c0:	aa01      	add	r2, sp, #4
   b77c2:	4621      	mov	r1, r4
   b77c4:	4806      	ldr	r0, [pc, #24]	; (b77e0 <_Z22__fetch_global_Serial1v+0x40>)
   b77c6:	f7ff fda7 	bl	b7318 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b77ca:	4628      	mov	r0, r5
   b77cc:	f7fc fc7d 	bl	b40ca <__cxa_guard_release>
   b77d0:	4804      	ldr	r0, [pc, #16]	; (b77e4 <_Z22__fetch_global_Serial1v+0x44>)
   b77d2:	f000 fe3f 	bl	b8454 <atexit>
    return serial1;
}
   b77d6:	4802      	ldr	r0, [pc, #8]	; (b77e0 <_Z22__fetch_global_Serial1v+0x40>)
   b77d8:	b007      	add	sp, #28
   b77da:	bd30      	pop	{r4, r5, pc}
   b77dc:	2003e748 	.word	0x2003e748
   b77e0:	2003e74c 	.word	0x2003e74c
   b77e4:	000b7769 	.word	0x000b7769

000b77e8 <_ZnajRKSt9nothrow_t>:
   b77e8:	f7fc bc57 	b.w	b409a <_Znaj>

000b77ec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b77ec:	4901      	ldr	r1, [pc, #4]	; (b77f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b77ee:	f000 b8f9 	b.w	b79e4 <_ZNKSt9type_infoeqERKS_>
   b77f2:	bf00      	nop
   b77f4:	000bb144 	.word	0x000bb144

000b77f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b77f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b77fa:	2400      	movs	r4, #0
   b77fc:	2310      	movs	r3, #16
   b77fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7802:	6803      	ldr	r3, [r0, #0]
   b7804:	4615      	mov	r5, r2
   b7806:	699e      	ldr	r6, [r3, #24]
   b7808:	6812      	ldr	r2, [r2, #0]
   b780a:	466b      	mov	r3, sp
   b780c:	e9cd 4400 	strd	r4, r4, [sp]
   b7810:	47b0      	blx	r6
   b7812:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7816:	f003 0306 	and.w	r3, r3, #6
   b781a:	2b06      	cmp	r3, #6
   b781c:	bf03      	ittte	eq
   b781e:	9b00      	ldreq	r3, [sp, #0]
   b7820:	602b      	streq	r3, [r5, #0]
   b7822:	2001      	moveq	r0, #1
   b7824:	4620      	movne	r0, r4
   b7826:	b004      	add	sp, #16
   b7828:	bd70      	pop	{r4, r5, r6, pc}

000b782a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b782a:	9800      	ldr	r0, [sp, #0]
   b782c:	4290      	cmp	r0, r2
   b782e:	bf14      	ite	ne
   b7830:	2001      	movne	r0, #1
   b7832:	2006      	moveq	r0, #6
   b7834:	4770      	bx	lr
	...

000b7838 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7838:	b510      	push	{r4, lr}
   b783a:	4b03      	ldr	r3, [pc, #12]	; (b7848 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b783c:	6003      	str	r3, [r0, #0]
   b783e:	4604      	mov	r4, r0
   b7840:	f000 f8cd 	bl	b79de <_ZNSt9type_infoD1Ev>
   b7844:	4620      	mov	r0, r4
   b7846:	bd10      	pop	{r4, pc}
   b7848:	000bb184 	.word	0x000bb184

000b784c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b784c:	b510      	push	{r4, lr}
   b784e:	4604      	mov	r4, r0
   b7850:	f7ff fff2 	bl	b7838 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7854:	4620      	mov	r0, r4
   b7856:	2108      	movs	r1, #8
   b7858:	f7fc fc23 	bl	b40a2 <_ZdlPvj>
   b785c:	4620      	mov	r0, r4
   b785e:	bd10      	pop	{r4, pc}

000b7860 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7864:	461f      	mov	r7, r3
   b7866:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b786a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b786e:	4598      	cmp	r8, r3
   b7870:	4606      	mov	r6, r0
   b7872:	4615      	mov	r5, r2
   b7874:	d107      	bne.n	b7886 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7876:	9907      	ldr	r1, [sp, #28]
   b7878:	f000 f8b4 	bl	b79e4 <_ZNKSt9type_infoeqERKS_>
   b787c:	b118      	cbz	r0, b7886 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b787e:	7165      	strb	r5, [r4, #5]
   b7880:	2000      	movs	r0, #0
   b7882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7886:	4639      	mov	r1, r7
   b7888:	4630      	mov	r0, r6
   b788a:	f000 f8ab 	bl	b79e4 <_ZNKSt9type_infoeqERKS_>
   b788e:	2800      	cmp	r0, #0
   b7890:	d0f6      	beq.n	b7880 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7892:	2301      	movs	r3, #1
   b7894:	f8c4 8000 	str.w	r8, [r4]
   b7898:	7125      	strb	r5, [r4, #4]
   b789a:	71a3      	strb	r3, [r4, #6]
   b789c:	e7f0      	b.n	b7880 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b789e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b789e:	b538      	push	{r3, r4, r5, lr}
   b78a0:	4615      	mov	r5, r2
   b78a2:	461c      	mov	r4, r3
   b78a4:	f000 f89e 	bl	b79e4 <_ZNKSt9type_infoeqERKS_>
   b78a8:	b120      	cbz	r0, b78b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b78aa:	2308      	movs	r3, #8
   b78ac:	60e3      	str	r3, [r4, #12]
   b78ae:	2306      	movs	r3, #6
   b78b0:	6025      	str	r5, [r4, #0]
   b78b2:	7123      	strb	r3, [r4, #4]
   b78b4:	bd38      	pop	{r3, r4, r5, pc}

000b78b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b78b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b78b8:	4605      	mov	r5, r0
   b78ba:	460c      	mov	r4, r1
   b78bc:	9201      	str	r2, [sp, #4]
   b78be:	461e      	mov	r6, r3
   b78c0:	f000 f890 	bl	b79e4 <_ZNKSt9type_infoeqERKS_>
   b78c4:	b950      	cbnz	r0, b78dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b78c6:	2e03      	cmp	r6, #3
   b78c8:	d808      	bhi.n	b78dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b78ca:	6823      	ldr	r3, [r4, #0]
   b78cc:	9a01      	ldr	r2, [sp, #4]
   b78ce:	695b      	ldr	r3, [r3, #20]
   b78d0:	4629      	mov	r1, r5
   b78d2:	4620      	mov	r0, r4
   b78d4:	b002      	add	sp, #8
   b78d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b78da:	4718      	bx	r3
   b78dc:	b002      	add	sp, #8
   b78de:	bd70      	pop	{r4, r5, r6, pc}

000b78e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b78e0:	b510      	push	{r4, lr}
   b78e2:	4b03      	ldr	r3, [pc, #12]	; (b78f0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b78e4:	6003      	str	r3, [r0, #0]
   b78e6:	4604      	mov	r4, r0
   b78e8:	f7ff ffa6 	bl	b7838 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b78ec:	4620      	mov	r0, r4
   b78ee:	bd10      	pop	{r4, pc}
   b78f0:	000bb1e4 	.word	0x000bb1e4

000b78f4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b78f4:	b510      	push	{r4, lr}
   b78f6:	4604      	mov	r4, r0
   b78f8:	f7ff fff2 	bl	b78e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b78fc:	4620      	mov	r0, r4
   b78fe:	210c      	movs	r1, #12
   b7900:	f7fc fbcf 	bl	b40a2 <_ZdlPvj>
   b7904:	4620      	mov	r0, r4
   b7906:	bd10      	pop	{r4, pc}

000b7908 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b790a:	9f08      	ldr	r7, [sp, #32]
   b790c:	4297      	cmp	r7, r2
   b790e:	4605      	mov	r5, r0
   b7910:	460e      	mov	r6, r1
   b7912:	4614      	mov	r4, r2
   b7914:	d00a      	beq.n	b792c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7916:	68a8      	ldr	r0, [r5, #8]
   b7918:	6802      	ldr	r2, [r0, #0]
   b791a:	9708      	str	r7, [sp, #32]
   b791c:	6a15      	ldr	r5, [r2, #32]
   b791e:	4631      	mov	r1, r6
   b7920:	4622      	mov	r2, r4
   b7922:	46ac      	mov	ip, r5
   b7924:	b003      	add	sp, #12
   b7926:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b792a:	4760      	bx	ip
   b792c:	4619      	mov	r1, r3
   b792e:	9301      	str	r3, [sp, #4]
   b7930:	f000 f858 	bl	b79e4 <_ZNKSt9type_infoeqERKS_>
   b7934:	9b01      	ldr	r3, [sp, #4]
   b7936:	2800      	cmp	r0, #0
   b7938:	d0ed      	beq.n	b7916 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b793a:	2006      	movs	r0, #6
   b793c:	b003      	add	sp, #12
   b793e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7940 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7940:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7944:	460d      	mov	r5, r1
   b7946:	4619      	mov	r1, r3
   b7948:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b794c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7950:	4681      	mov	r9, r0
   b7952:	4617      	mov	r7, r2
   b7954:	4698      	mov	r8, r3
   b7956:	f000 f845 	bl	b79e4 <_ZNKSt9type_infoeqERKS_>
   b795a:	b190      	cbz	r0, b7982 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b795c:	2d00      	cmp	r5, #0
   b795e:	6034      	str	r4, [r6, #0]
   b7960:	7137      	strb	r7, [r6, #4]
   b7962:	db09      	blt.n	b7978 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7964:	1961      	adds	r1, r4, r5
   b7966:	458a      	cmp	sl, r1
   b7968:	bf0c      	ite	eq
   b796a:	2106      	moveq	r1, #6
   b796c:	2101      	movne	r1, #1
   b796e:	71b1      	strb	r1, [r6, #6]
   b7970:	2000      	movs	r0, #0
   b7972:	b001      	add	sp, #4
   b7974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7978:	3502      	adds	r5, #2
   b797a:	d1f9      	bne.n	b7970 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b797c:	2301      	movs	r3, #1
   b797e:	71b3      	strb	r3, [r6, #6]
   b7980:	e7f6      	b.n	b7970 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7982:	4554      	cmp	r4, sl
   b7984:	d106      	bne.n	b7994 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7986:	4659      	mov	r1, fp
   b7988:	4648      	mov	r0, r9
   b798a:	f000 f82b 	bl	b79e4 <_ZNKSt9type_infoeqERKS_>
   b798e:	b108      	cbz	r0, b7994 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7990:	7177      	strb	r7, [r6, #5]
   b7992:	e7ed      	b.n	b7970 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7994:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7998:	6803      	ldr	r3, [r0, #0]
   b799a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b799e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b79a2:	69dc      	ldr	r4, [r3, #28]
   b79a4:	463a      	mov	r2, r7
   b79a6:	4643      	mov	r3, r8
   b79a8:	4629      	mov	r1, r5
   b79aa:	46a4      	mov	ip, r4
   b79ac:	b001      	add	sp, #4
   b79ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79b2:	4760      	bx	ip

000b79b4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b79b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79b8:	4607      	mov	r7, r0
   b79ba:	460c      	mov	r4, r1
   b79bc:	4615      	mov	r5, r2
   b79be:	461e      	mov	r6, r3
   b79c0:	f7ff ff6d 	bl	b789e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b79c4:	b948      	cbnz	r0, b79da <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b79c6:	68b8      	ldr	r0, [r7, #8]
   b79c8:	6803      	ldr	r3, [r0, #0]
   b79ca:	699f      	ldr	r7, [r3, #24]
   b79cc:	462a      	mov	r2, r5
   b79ce:	4633      	mov	r3, r6
   b79d0:	4621      	mov	r1, r4
   b79d2:	46bc      	mov	ip, r7
   b79d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b79d8:	4760      	bx	ip
   b79da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b79de <_ZNSt9type_infoD1Ev>:
   b79de:	4770      	bx	lr

000b79e0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b79e0:	2000      	movs	r0, #0
   b79e2:	4770      	bx	lr

000b79e4 <_ZNKSt9type_infoeqERKS_>:
   b79e4:	4281      	cmp	r1, r0
   b79e6:	b508      	push	{r3, lr}
   b79e8:	d00e      	beq.n	b7a08 <_ZNKSt9type_infoeqERKS_+0x24>
   b79ea:	6840      	ldr	r0, [r0, #4]
   b79ec:	7803      	ldrb	r3, [r0, #0]
   b79ee:	2b2a      	cmp	r3, #42	; 0x2a
   b79f0:	d00c      	beq.n	b7a0c <_ZNKSt9type_infoeqERKS_+0x28>
   b79f2:	6849      	ldr	r1, [r1, #4]
   b79f4:	780b      	ldrb	r3, [r1, #0]
   b79f6:	2b2a      	cmp	r3, #42	; 0x2a
   b79f8:	bf08      	it	eq
   b79fa:	3101      	addeq	r1, #1
   b79fc:	f000 fd78 	bl	b84f0 <strcmp>
   b7a00:	fab0 f080 	clz	r0, r0
   b7a04:	0940      	lsrs	r0, r0, #5
   b7a06:	bd08      	pop	{r3, pc}
   b7a08:	2001      	movs	r0, #1
   b7a0a:	e7fc      	b.n	b7a06 <_ZNKSt9type_infoeqERKS_+0x22>
   b7a0c:	2000      	movs	r0, #0
   b7a0e:	e7fa      	b.n	b7a06 <_ZNKSt9type_infoeqERKS_+0x22>

000b7a10 <__aeabi_drsub>:
   b7a10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7a14:	e002      	b.n	b7a1c <__adddf3>
   b7a16:	bf00      	nop

000b7a18 <__aeabi_dsub>:
   b7a18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7a1c <__adddf3>:
   b7a1c:	b530      	push	{r4, r5, lr}
   b7a1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7a22:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7a26:	ea94 0f05 	teq	r4, r5
   b7a2a:	bf08      	it	eq
   b7a2c:	ea90 0f02 	teqeq	r0, r2
   b7a30:	bf1f      	itttt	ne
   b7a32:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7a36:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7a3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7a3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7a42:	f000 80e2 	beq.w	b7c0a <__adddf3+0x1ee>
   b7a46:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7a4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7a4e:	bfb8      	it	lt
   b7a50:	426d      	neglt	r5, r5
   b7a52:	dd0c      	ble.n	b7a6e <__adddf3+0x52>
   b7a54:	442c      	add	r4, r5
   b7a56:	ea80 0202 	eor.w	r2, r0, r2
   b7a5a:	ea81 0303 	eor.w	r3, r1, r3
   b7a5e:	ea82 0000 	eor.w	r0, r2, r0
   b7a62:	ea83 0101 	eor.w	r1, r3, r1
   b7a66:	ea80 0202 	eor.w	r2, r0, r2
   b7a6a:	ea81 0303 	eor.w	r3, r1, r3
   b7a6e:	2d36      	cmp	r5, #54	; 0x36
   b7a70:	bf88      	it	hi
   b7a72:	bd30      	pophi	{r4, r5, pc}
   b7a74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7a78:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7a7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7a80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7a84:	d002      	beq.n	b7a8c <__adddf3+0x70>
   b7a86:	4240      	negs	r0, r0
   b7a88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7a8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7a90:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7a94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7a98:	d002      	beq.n	b7aa0 <__adddf3+0x84>
   b7a9a:	4252      	negs	r2, r2
   b7a9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7aa0:	ea94 0f05 	teq	r4, r5
   b7aa4:	f000 80a7 	beq.w	b7bf6 <__adddf3+0x1da>
   b7aa8:	f1a4 0401 	sub.w	r4, r4, #1
   b7aac:	f1d5 0e20 	rsbs	lr, r5, #32
   b7ab0:	db0d      	blt.n	b7ace <__adddf3+0xb2>
   b7ab2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7ab6:	fa22 f205 	lsr.w	r2, r2, r5
   b7aba:	1880      	adds	r0, r0, r2
   b7abc:	f141 0100 	adc.w	r1, r1, #0
   b7ac0:	fa03 f20e 	lsl.w	r2, r3, lr
   b7ac4:	1880      	adds	r0, r0, r2
   b7ac6:	fa43 f305 	asr.w	r3, r3, r5
   b7aca:	4159      	adcs	r1, r3
   b7acc:	e00e      	b.n	b7aec <__adddf3+0xd0>
   b7ace:	f1a5 0520 	sub.w	r5, r5, #32
   b7ad2:	f10e 0e20 	add.w	lr, lr, #32
   b7ad6:	2a01      	cmp	r2, #1
   b7ad8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7adc:	bf28      	it	cs
   b7ade:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7ae2:	fa43 f305 	asr.w	r3, r3, r5
   b7ae6:	18c0      	adds	r0, r0, r3
   b7ae8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7aec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7af0:	d507      	bpl.n	b7b02 <__adddf3+0xe6>
   b7af2:	f04f 0e00 	mov.w	lr, #0
   b7af6:	f1dc 0c00 	rsbs	ip, ip, #0
   b7afa:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7afe:	eb6e 0101 	sbc.w	r1, lr, r1
   b7b02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7b06:	d31b      	bcc.n	b7b40 <__adddf3+0x124>
   b7b08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7b0c:	d30c      	bcc.n	b7b28 <__adddf3+0x10c>
   b7b0e:	0849      	lsrs	r1, r1, #1
   b7b10:	ea5f 0030 	movs.w	r0, r0, rrx
   b7b14:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7b18:	f104 0401 	add.w	r4, r4, #1
   b7b1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7b20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7b24:	f080 809a 	bcs.w	b7c5c <__adddf3+0x240>
   b7b28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7b2c:	bf08      	it	eq
   b7b2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7b32:	f150 0000 	adcs.w	r0, r0, #0
   b7b36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7b3a:	ea41 0105 	orr.w	r1, r1, r5
   b7b3e:	bd30      	pop	{r4, r5, pc}
   b7b40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7b44:	4140      	adcs	r0, r0
   b7b46:	eb41 0101 	adc.w	r1, r1, r1
   b7b4a:	3c01      	subs	r4, #1
   b7b4c:	bf28      	it	cs
   b7b4e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7b52:	d2e9      	bcs.n	b7b28 <__adddf3+0x10c>
   b7b54:	f091 0f00 	teq	r1, #0
   b7b58:	bf04      	itt	eq
   b7b5a:	4601      	moveq	r1, r0
   b7b5c:	2000      	moveq	r0, #0
   b7b5e:	fab1 f381 	clz	r3, r1
   b7b62:	bf08      	it	eq
   b7b64:	3320      	addeq	r3, #32
   b7b66:	f1a3 030b 	sub.w	r3, r3, #11
   b7b6a:	f1b3 0220 	subs.w	r2, r3, #32
   b7b6e:	da0c      	bge.n	b7b8a <__adddf3+0x16e>
   b7b70:	320c      	adds	r2, #12
   b7b72:	dd08      	ble.n	b7b86 <__adddf3+0x16a>
   b7b74:	f102 0c14 	add.w	ip, r2, #20
   b7b78:	f1c2 020c 	rsb	r2, r2, #12
   b7b7c:	fa01 f00c 	lsl.w	r0, r1, ip
   b7b80:	fa21 f102 	lsr.w	r1, r1, r2
   b7b84:	e00c      	b.n	b7ba0 <__adddf3+0x184>
   b7b86:	f102 0214 	add.w	r2, r2, #20
   b7b8a:	bfd8      	it	le
   b7b8c:	f1c2 0c20 	rsble	ip, r2, #32
   b7b90:	fa01 f102 	lsl.w	r1, r1, r2
   b7b94:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7b98:	bfdc      	itt	le
   b7b9a:	ea41 010c 	orrle.w	r1, r1, ip
   b7b9e:	4090      	lslle	r0, r2
   b7ba0:	1ae4      	subs	r4, r4, r3
   b7ba2:	bfa2      	ittt	ge
   b7ba4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7ba8:	4329      	orrge	r1, r5
   b7baa:	bd30      	popge	{r4, r5, pc}
   b7bac:	ea6f 0404 	mvn.w	r4, r4
   b7bb0:	3c1f      	subs	r4, #31
   b7bb2:	da1c      	bge.n	b7bee <__adddf3+0x1d2>
   b7bb4:	340c      	adds	r4, #12
   b7bb6:	dc0e      	bgt.n	b7bd6 <__adddf3+0x1ba>
   b7bb8:	f104 0414 	add.w	r4, r4, #20
   b7bbc:	f1c4 0220 	rsb	r2, r4, #32
   b7bc0:	fa20 f004 	lsr.w	r0, r0, r4
   b7bc4:	fa01 f302 	lsl.w	r3, r1, r2
   b7bc8:	ea40 0003 	orr.w	r0, r0, r3
   b7bcc:	fa21 f304 	lsr.w	r3, r1, r4
   b7bd0:	ea45 0103 	orr.w	r1, r5, r3
   b7bd4:	bd30      	pop	{r4, r5, pc}
   b7bd6:	f1c4 040c 	rsb	r4, r4, #12
   b7bda:	f1c4 0220 	rsb	r2, r4, #32
   b7bde:	fa20 f002 	lsr.w	r0, r0, r2
   b7be2:	fa01 f304 	lsl.w	r3, r1, r4
   b7be6:	ea40 0003 	orr.w	r0, r0, r3
   b7bea:	4629      	mov	r1, r5
   b7bec:	bd30      	pop	{r4, r5, pc}
   b7bee:	fa21 f004 	lsr.w	r0, r1, r4
   b7bf2:	4629      	mov	r1, r5
   b7bf4:	bd30      	pop	{r4, r5, pc}
   b7bf6:	f094 0f00 	teq	r4, #0
   b7bfa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7bfe:	bf06      	itte	eq
   b7c00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7c04:	3401      	addeq	r4, #1
   b7c06:	3d01      	subne	r5, #1
   b7c08:	e74e      	b.n	b7aa8 <__adddf3+0x8c>
   b7c0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7c0e:	bf18      	it	ne
   b7c10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7c14:	d029      	beq.n	b7c6a <__adddf3+0x24e>
   b7c16:	ea94 0f05 	teq	r4, r5
   b7c1a:	bf08      	it	eq
   b7c1c:	ea90 0f02 	teqeq	r0, r2
   b7c20:	d005      	beq.n	b7c2e <__adddf3+0x212>
   b7c22:	ea54 0c00 	orrs.w	ip, r4, r0
   b7c26:	bf04      	itt	eq
   b7c28:	4619      	moveq	r1, r3
   b7c2a:	4610      	moveq	r0, r2
   b7c2c:	bd30      	pop	{r4, r5, pc}
   b7c2e:	ea91 0f03 	teq	r1, r3
   b7c32:	bf1e      	ittt	ne
   b7c34:	2100      	movne	r1, #0
   b7c36:	2000      	movne	r0, #0
   b7c38:	bd30      	popne	{r4, r5, pc}
   b7c3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7c3e:	d105      	bne.n	b7c4c <__adddf3+0x230>
   b7c40:	0040      	lsls	r0, r0, #1
   b7c42:	4149      	adcs	r1, r1
   b7c44:	bf28      	it	cs
   b7c46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7c4a:	bd30      	pop	{r4, r5, pc}
   b7c4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7c50:	bf3c      	itt	cc
   b7c52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7c56:	bd30      	popcc	{r4, r5, pc}
   b7c58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7c5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7c60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7c64:	f04f 0000 	mov.w	r0, #0
   b7c68:	bd30      	pop	{r4, r5, pc}
   b7c6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7c6e:	bf1a      	itte	ne
   b7c70:	4619      	movne	r1, r3
   b7c72:	4610      	movne	r0, r2
   b7c74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7c78:	bf1c      	itt	ne
   b7c7a:	460b      	movne	r3, r1
   b7c7c:	4602      	movne	r2, r0
   b7c7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7c82:	bf06      	itte	eq
   b7c84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7c88:	ea91 0f03 	teqeq	r1, r3
   b7c8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7c90:	bd30      	pop	{r4, r5, pc}
   b7c92:	bf00      	nop

000b7c94 <__aeabi_ui2d>:
   b7c94:	f090 0f00 	teq	r0, #0
   b7c98:	bf04      	itt	eq
   b7c9a:	2100      	moveq	r1, #0
   b7c9c:	4770      	bxeq	lr
   b7c9e:	b530      	push	{r4, r5, lr}
   b7ca0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7ca4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7ca8:	f04f 0500 	mov.w	r5, #0
   b7cac:	f04f 0100 	mov.w	r1, #0
   b7cb0:	e750      	b.n	b7b54 <__adddf3+0x138>
   b7cb2:	bf00      	nop

000b7cb4 <__aeabi_i2d>:
   b7cb4:	f090 0f00 	teq	r0, #0
   b7cb8:	bf04      	itt	eq
   b7cba:	2100      	moveq	r1, #0
   b7cbc:	4770      	bxeq	lr
   b7cbe:	b530      	push	{r4, r5, lr}
   b7cc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7cc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7cc8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7ccc:	bf48      	it	mi
   b7cce:	4240      	negmi	r0, r0
   b7cd0:	f04f 0100 	mov.w	r1, #0
   b7cd4:	e73e      	b.n	b7b54 <__adddf3+0x138>
   b7cd6:	bf00      	nop

000b7cd8 <__aeabi_f2d>:
   b7cd8:	0042      	lsls	r2, r0, #1
   b7cda:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7cde:	ea4f 0131 	mov.w	r1, r1, rrx
   b7ce2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7ce6:	bf1f      	itttt	ne
   b7ce8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7cec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7cf0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7cf4:	4770      	bxne	lr
   b7cf6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7cfa:	bf08      	it	eq
   b7cfc:	4770      	bxeq	lr
   b7cfe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7d02:	bf04      	itt	eq
   b7d04:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7d08:	4770      	bxeq	lr
   b7d0a:	b530      	push	{r4, r5, lr}
   b7d0c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7d10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7d14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7d18:	e71c      	b.n	b7b54 <__adddf3+0x138>
   b7d1a:	bf00      	nop

000b7d1c <__aeabi_ul2d>:
   b7d1c:	ea50 0201 	orrs.w	r2, r0, r1
   b7d20:	bf08      	it	eq
   b7d22:	4770      	bxeq	lr
   b7d24:	b530      	push	{r4, r5, lr}
   b7d26:	f04f 0500 	mov.w	r5, #0
   b7d2a:	e00a      	b.n	b7d42 <__aeabi_l2d+0x16>

000b7d2c <__aeabi_l2d>:
   b7d2c:	ea50 0201 	orrs.w	r2, r0, r1
   b7d30:	bf08      	it	eq
   b7d32:	4770      	bxeq	lr
   b7d34:	b530      	push	{r4, r5, lr}
   b7d36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7d3a:	d502      	bpl.n	b7d42 <__aeabi_l2d+0x16>
   b7d3c:	4240      	negs	r0, r0
   b7d3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7d42:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d46:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7d4e:	f43f aed8 	beq.w	b7b02 <__adddf3+0xe6>
   b7d52:	f04f 0203 	mov.w	r2, #3
   b7d56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7d5a:	bf18      	it	ne
   b7d5c:	3203      	addne	r2, #3
   b7d5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7d62:	bf18      	it	ne
   b7d64:	3203      	addne	r2, #3
   b7d66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7d6a:	f1c2 0320 	rsb	r3, r2, #32
   b7d6e:	fa00 fc03 	lsl.w	ip, r0, r3
   b7d72:	fa20 f002 	lsr.w	r0, r0, r2
   b7d76:	fa01 fe03 	lsl.w	lr, r1, r3
   b7d7a:	ea40 000e 	orr.w	r0, r0, lr
   b7d7e:	fa21 f102 	lsr.w	r1, r1, r2
   b7d82:	4414      	add	r4, r2
   b7d84:	e6bd      	b.n	b7b02 <__adddf3+0xe6>
   b7d86:	bf00      	nop

000b7d88 <__aeabi_dmul>:
   b7d88:	b570      	push	{r4, r5, r6, lr}
   b7d8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7d8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7d92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7d96:	bf1d      	ittte	ne
   b7d98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7d9c:	ea94 0f0c 	teqne	r4, ip
   b7da0:	ea95 0f0c 	teqne	r5, ip
   b7da4:	f000 f8de 	bleq	b7f64 <__aeabi_dmul+0x1dc>
   b7da8:	442c      	add	r4, r5
   b7daa:	ea81 0603 	eor.w	r6, r1, r3
   b7dae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7db2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7db6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7dba:	bf18      	it	ne
   b7dbc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7dc8:	d038      	beq.n	b7e3c <__aeabi_dmul+0xb4>
   b7dca:	fba0 ce02 	umull	ip, lr, r0, r2
   b7dce:	f04f 0500 	mov.w	r5, #0
   b7dd2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7dd6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7dda:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7dde:	f04f 0600 	mov.w	r6, #0
   b7de2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7de6:	f09c 0f00 	teq	ip, #0
   b7dea:	bf18      	it	ne
   b7dec:	f04e 0e01 	orrne.w	lr, lr, #1
   b7df0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7df4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7df8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7dfc:	d204      	bcs.n	b7e08 <__aeabi_dmul+0x80>
   b7dfe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7e02:	416d      	adcs	r5, r5
   b7e04:	eb46 0606 	adc.w	r6, r6, r6
   b7e08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7e0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7e10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7e14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7e18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7e1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7e20:	bf88      	it	hi
   b7e22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7e26:	d81e      	bhi.n	b7e66 <__aeabi_dmul+0xde>
   b7e28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7e2c:	bf08      	it	eq
   b7e2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7e32:	f150 0000 	adcs.w	r0, r0, #0
   b7e36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7e3a:	bd70      	pop	{r4, r5, r6, pc}
   b7e3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7e40:	ea46 0101 	orr.w	r1, r6, r1
   b7e44:	ea40 0002 	orr.w	r0, r0, r2
   b7e48:	ea81 0103 	eor.w	r1, r1, r3
   b7e4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7e50:	bfc2      	ittt	gt
   b7e52:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7e56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7e5a:	bd70      	popgt	{r4, r5, r6, pc}
   b7e5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7e60:	f04f 0e00 	mov.w	lr, #0
   b7e64:	3c01      	subs	r4, #1
   b7e66:	f300 80ab 	bgt.w	b7fc0 <__aeabi_dmul+0x238>
   b7e6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7e6e:	bfde      	ittt	le
   b7e70:	2000      	movle	r0, #0
   b7e72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7e76:	bd70      	pople	{r4, r5, r6, pc}
   b7e78:	f1c4 0400 	rsb	r4, r4, #0
   b7e7c:	3c20      	subs	r4, #32
   b7e7e:	da35      	bge.n	b7eec <__aeabi_dmul+0x164>
   b7e80:	340c      	adds	r4, #12
   b7e82:	dc1b      	bgt.n	b7ebc <__aeabi_dmul+0x134>
   b7e84:	f104 0414 	add.w	r4, r4, #20
   b7e88:	f1c4 0520 	rsb	r5, r4, #32
   b7e8c:	fa00 f305 	lsl.w	r3, r0, r5
   b7e90:	fa20 f004 	lsr.w	r0, r0, r4
   b7e94:	fa01 f205 	lsl.w	r2, r1, r5
   b7e98:	ea40 0002 	orr.w	r0, r0, r2
   b7e9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7ea0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7ea4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7ea8:	fa21 f604 	lsr.w	r6, r1, r4
   b7eac:	eb42 0106 	adc.w	r1, r2, r6
   b7eb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7eb4:	bf08      	it	eq
   b7eb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7eba:	bd70      	pop	{r4, r5, r6, pc}
   b7ebc:	f1c4 040c 	rsb	r4, r4, #12
   b7ec0:	f1c4 0520 	rsb	r5, r4, #32
   b7ec4:	fa00 f304 	lsl.w	r3, r0, r4
   b7ec8:	fa20 f005 	lsr.w	r0, r0, r5
   b7ecc:	fa01 f204 	lsl.w	r2, r1, r4
   b7ed0:	ea40 0002 	orr.w	r0, r0, r2
   b7ed4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7ed8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7edc:	f141 0100 	adc.w	r1, r1, #0
   b7ee0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7ee4:	bf08      	it	eq
   b7ee6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7eea:	bd70      	pop	{r4, r5, r6, pc}
   b7eec:	f1c4 0520 	rsb	r5, r4, #32
   b7ef0:	fa00 f205 	lsl.w	r2, r0, r5
   b7ef4:	ea4e 0e02 	orr.w	lr, lr, r2
   b7ef8:	fa20 f304 	lsr.w	r3, r0, r4
   b7efc:	fa01 f205 	lsl.w	r2, r1, r5
   b7f00:	ea43 0302 	orr.w	r3, r3, r2
   b7f04:	fa21 f004 	lsr.w	r0, r1, r4
   b7f08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f0c:	fa21 f204 	lsr.w	r2, r1, r4
   b7f10:	ea20 0002 	bic.w	r0, r0, r2
   b7f14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7f18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f1c:	bf08      	it	eq
   b7f1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f22:	bd70      	pop	{r4, r5, r6, pc}
   b7f24:	f094 0f00 	teq	r4, #0
   b7f28:	d10f      	bne.n	b7f4a <__aeabi_dmul+0x1c2>
   b7f2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7f2e:	0040      	lsls	r0, r0, #1
   b7f30:	eb41 0101 	adc.w	r1, r1, r1
   b7f34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7f38:	bf08      	it	eq
   b7f3a:	3c01      	subeq	r4, #1
   b7f3c:	d0f7      	beq.n	b7f2e <__aeabi_dmul+0x1a6>
   b7f3e:	ea41 0106 	orr.w	r1, r1, r6
   b7f42:	f095 0f00 	teq	r5, #0
   b7f46:	bf18      	it	ne
   b7f48:	4770      	bxne	lr
   b7f4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7f4e:	0052      	lsls	r2, r2, #1
   b7f50:	eb43 0303 	adc.w	r3, r3, r3
   b7f54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7f58:	bf08      	it	eq
   b7f5a:	3d01      	subeq	r5, #1
   b7f5c:	d0f7      	beq.n	b7f4e <__aeabi_dmul+0x1c6>
   b7f5e:	ea43 0306 	orr.w	r3, r3, r6
   b7f62:	4770      	bx	lr
   b7f64:	ea94 0f0c 	teq	r4, ip
   b7f68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7f6c:	bf18      	it	ne
   b7f6e:	ea95 0f0c 	teqne	r5, ip
   b7f72:	d00c      	beq.n	b7f8e <__aeabi_dmul+0x206>
   b7f74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7f78:	bf18      	it	ne
   b7f7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7f7e:	d1d1      	bne.n	b7f24 <__aeabi_dmul+0x19c>
   b7f80:	ea81 0103 	eor.w	r1, r1, r3
   b7f84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f88:	f04f 0000 	mov.w	r0, #0
   b7f8c:	bd70      	pop	{r4, r5, r6, pc}
   b7f8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7f92:	bf06      	itte	eq
   b7f94:	4610      	moveq	r0, r2
   b7f96:	4619      	moveq	r1, r3
   b7f98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7f9c:	d019      	beq.n	b7fd2 <__aeabi_dmul+0x24a>
   b7f9e:	ea94 0f0c 	teq	r4, ip
   b7fa2:	d102      	bne.n	b7faa <__aeabi_dmul+0x222>
   b7fa4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7fa8:	d113      	bne.n	b7fd2 <__aeabi_dmul+0x24a>
   b7faa:	ea95 0f0c 	teq	r5, ip
   b7fae:	d105      	bne.n	b7fbc <__aeabi_dmul+0x234>
   b7fb0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7fb4:	bf1c      	itt	ne
   b7fb6:	4610      	movne	r0, r2
   b7fb8:	4619      	movne	r1, r3
   b7fba:	d10a      	bne.n	b7fd2 <__aeabi_dmul+0x24a>
   b7fbc:	ea81 0103 	eor.w	r1, r1, r3
   b7fc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7fc4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7fc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7fcc:	f04f 0000 	mov.w	r0, #0
   b7fd0:	bd70      	pop	{r4, r5, r6, pc}
   b7fd2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7fd6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7fda:	bd70      	pop	{r4, r5, r6, pc}

000b7fdc <__aeabi_ddiv>:
   b7fdc:	b570      	push	{r4, r5, r6, lr}
   b7fde:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7fe2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7fe6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7fea:	bf1d      	ittte	ne
   b7fec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7ff0:	ea94 0f0c 	teqne	r4, ip
   b7ff4:	ea95 0f0c 	teqne	r5, ip
   b7ff8:	f000 f8a7 	bleq	b814a <__aeabi_ddiv+0x16e>
   b7ffc:	eba4 0405 	sub.w	r4, r4, r5
   b8000:	ea81 0e03 	eor.w	lr, r1, r3
   b8004:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8008:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b800c:	f000 8088 	beq.w	b8120 <__aeabi_ddiv+0x144>
   b8010:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8014:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8018:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b801c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8020:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8024:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8028:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b802c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8030:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8034:	429d      	cmp	r5, r3
   b8036:	bf08      	it	eq
   b8038:	4296      	cmpeq	r6, r2
   b803a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b803e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8042:	d202      	bcs.n	b804a <__aeabi_ddiv+0x6e>
   b8044:	085b      	lsrs	r3, r3, #1
   b8046:	ea4f 0232 	mov.w	r2, r2, rrx
   b804a:	1ab6      	subs	r6, r6, r2
   b804c:	eb65 0503 	sbc.w	r5, r5, r3
   b8050:	085b      	lsrs	r3, r3, #1
   b8052:	ea4f 0232 	mov.w	r2, r2, rrx
   b8056:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b805a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b805e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8062:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8066:	bf22      	ittt	cs
   b8068:	1ab6      	subcs	r6, r6, r2
   b806a:	4675      	movcs	r5, lr
   b806c:	ea40 000c 	orrcs.w	r0, r0, ip
   b8070:	085b      	lsrs	r3, r3, #1
   b8072:	ea4f 0232 	mov.w	r2, r2, rrx
   b8076:	ebb6 0e02 	subs.w	lr, r6, r2
   b807a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b807e:	bf22      	ittt	cs
   b8080:	1ab6      	subcs	r6, r6, r2
   b8082:	4675      	movcs	r5, lr
   b8084:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8088:	085b      	lsrs	r3, r3, #1
   b808a:	ea4f 0232 	mov.w	r2, r2, rrx
   b808e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8092:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8096:	bf22      	ittt	cs
   b8098:	1ab6      	subcs	r6, r6, r2
   b809a:	4675      	movcs	r5, lr
   b809c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b80a0:	085b      	lsrs	r3, r3, #1
   b80a2:	ea4f 0232 	mov.w	r2, r2, rrx
   b80a6:	ebb6 0e02 	subs.w	lr, r6, r2
   b80aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80ae:	bf22      	ittt	cs
   b80b0:	1ab6      	subcs	r6, r6, r2
   b80b2:	4675      	movcs	r5, lr
   b80b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b80b8:	ea55 0e06 	orrs.w	lr, r5, r6
   b80bc:	d018      	beq.n	b80f0 <__aeabi_ddiv+0x114>
   b80be:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b80c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b80c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b80ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b80ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b80d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b80d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b80da:	d1c0      	bne.n	b805e <__aeabi_ddiv+0x82>
   b80dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b80e0:	d10b      	bne.n	b80fa <__aeabi_ddiv+0x11e>
   b80e2:	ea41 0100 	orr.w	r1, r1, r0
   b80e6:	f04f 0000 	mov.w	r0, #0
   b80ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b80ee:	e7b6      	b.n	b805e <__aeabi_ddiv+0x82>
   b80f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b80f4:	bf04      	itt	eq
   b80f6:	4301      	orreq	r1, r0
   b80f8:	2000      	moveq	r0, #0
   b80fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b80fe:	bf88      	it	hi
   b8100:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8104:	f63f aeaf 	bhi.w	b7e66 <__aeabi_dmul+0xde>
   b8108:	ebb5 0c03 	subs.w	ip, r5, r3
   b810c:	bf04      	itt	eq
   b810e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8112:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8116:	f150 0000 	adcs.w	r0, r0, #0
   b811a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b811e:	bd70      	pop	{r4, r5, r6, pc}
   b8120:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8124:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8128:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b812c:	bfc2      	ittt	gt
   b812e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8132:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8136:	bd70      	popgt	{r4, r5, r6, pc}
   b8138:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b813c:	f04f 0e00 	mov.w	lr, #0
   b8140:	3c01      	subs	r4, #1
   b8142:	e690      	b.n	b7e66 <__aeabi_dmul+0xde>
   b8144:	ea45 0e06 	orr.w	lr, r5, r6
   b8148:	e68d      	b.n	b7e66 <__aeabi_dmul+0xde>
   b814a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b814e:	ea94 0f0c 	teq	r4, ip
   b8152:	bf08      	it	eq
   b8154:	ea95 0f0c 	teqeq	r5, ip
   b8158:	f43f af3b 	beq.w	b7fd2 <__aeabi_dmul+0x24a>
   b815c:	ea94 0f0c 	teq	r4, ip
   b8160:	d10a      	bne.n	b8178 <__aeabi_ddiv+0x19c>
   b8162:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8166:	f47f af34 	bne.w	b7fd2 <__aeabi_dmul+0x24a>
   b816a:	ea95 0f0c 	teq	r5, ip
   b816e:	f47f af25 	bne.w	b7fbc <__aeabi_dmul+0x234>
   b8172:	4610      	mov	r0, r2
   b8174:	4619      	mov	r1, r3
   b8176:	e72c      	b.n	b7fd2 <__aeabi_dmul+0x24a>
   b8178:	ea95 0f0c 	teq	r5, ip
   b817c:	d106      	bne.n	b818c <__aeabi_ddiv+0x1b0>
   b817e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8182:	f43f aefd 	beq.w	b7f80 <__aeabi_dmul+0x1f8>
   b8186:	4610      	mov	r0, r2
   b8188:	4619      	mov	r1, r3
   b818a:	e722      	b.n	b7fd2 <__aeabi_dmul+0x24a>
   b818c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8190:	bf18      	it	ne
   b8192:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8196:	f47f aec5 	bne.w	b7f24 <__aeabi_dmul+0x19c>
   b819a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b819e:	f47f af0d 	bne.w	b7fbc <__aeabi_dmul+0x234>
   b81a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b81a6:	f47f aeeb 	bne.w	b7f80 <__aeabi_dmul+0x1f8>
   b81aa:	e712      	b.n	b7fd2 <__aeabi_dmul+0x24a>

000b81ac <__gedf2>:
   b81ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b81b0:	e006      	b.n	b81c0 <__cmpdf2+0x4>
   b81b2:	bf00      	nop

000b81b4 <__ledf2>:
   b81b4:	f04f 0c01 	mov.w	ip, #1
   b81b8:	e002      	b.n	b81c0 <__cmpdf2+0x4>
   b81ba:	bf00      	nop

000b81bc <__cmpdf2>:
   b81bc:	f04f 0c01 	mov.w	ip, #1
   b81c0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b81c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b81c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b81cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b81d0:	bf18      	it	ne
   b81d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b81d6:	d01b      	beq.n	b8210 <__cmpdf2+0x54>
   b81d8:	b001      	add	sp, #4
   b81da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b81de:	bf0c      	ite	eq
   b81e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b81e4:	ea91 0f03 	teqne	r1, r3
   b81e8:	bf02      	ittt	eq
   b81ea:	ea90 0f02 	teqeq	r0, r2
   b81ee:	2000      	moveq	r0, #0
   b81f0:	4770      	bxeq	lr
   b81f2:	f110 0f00 	cmn.w	r0, #0
   b81f6:	ea91 0f03 	teq	r1, r3
   b81fa:	bf58      	it	pl
   b81fc:	4299      	cmppl	r1, r3
   b81fe:	bf08      	it	eq
   b8200:	4290      	cmpeq	r0, r2
   b8202:	bf2c      	ite	cs
   b8204:	17d8      	asrcs	r0, r3, #31
   b8206:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b820a:	f040 0001 	orr.w	r0, r0, #1
   b820e:	4770      	bx	lr
   b8210:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8214:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8218:	d102      	bne.n	b8220 <__cmpdf2+0x64>
   b821a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b821e:	d107      	bne.n	b8230 <__cmpdf2+0x74>
   b8220:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8224:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8228:	d1d6      	bne.n	b81d8 <__cmpdf2+0x1c>
   b822a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b822e:	d0d3      	beq.n	b81d8 <__cmpdf2+0x1c>
   b8230:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8234:	4770      	bx	lr
   b8236:	bf00      	nop

000b8238 <__aeabi_cdrcmple>:
   b8238:	4684      	mov	ip, r0
   b823a:	4610      	mov	r0, r2
   b823c:	4662      	mov	r2, ip
   b823e:	468c      	mov	ip, r1
   b8240:	4619      	mov	r1, r3
   b8242:	4663      	mov	r3, ip
   b8244:	e000      	b.n	b8248 <__aeabi_cdcmpeq>
   b8246:	bf00      	nop

000b8248 <__aeabi_cdcmpeq>:
   b8248:	b501      	push	{r0, lr}
   b824a:	f7ff ffb7 	bl	b81bc <__cmpdf2>
   b824e:	2800      	cmp	r0, #0
   b8250:	bf48      	it	mi
   b8252:	f110 0f00 	cmnmi.w	r0, #0
   b8256:	bd01      	pop	{r0, pc}

000b8258 <__aeabi_dcmpeq>:
   b8258:	f84d ed08 	str.w	lr, [sp, #-8]!
   b825c:	f7ff fff4 	bl	b8248 <__aeabi_cdcmpeq>
   b8260:	bf0c      	ite	eq
   b8262:	2001      	moveq	r0, #1
   b8264:	2000      	movne	r0, #0
   b8266:	f85d fb08 	ldr.w	pc, [sp], #8
   b826a:	bf00      	nop

000b826c <__aeabi_dcmplt>:
   b826c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8270:	f7ff ffea 	bl	b8248 <__aeabi_cdcmpeq>
   b8274:	bf34      	ite	cc
   b8276:	2001      	movcc	r0, #1
   b8278:	2000      	movcs	r0, #0
   b827a:	f85d fb08 	ldr.w	pc, [sp], #8
   b827e:	bf00      	nop

000b8280 <__aeabi_dcmple>:
   b8280:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8284:	f7ff ffe0 	bl	b8248 <__aeabi_cdcmpeq>
   b8288:	bf94      	ite	ls
   b828a:	2001      	movls	r0, #1
   b828c:	2000      	movhi	r0, #0
   b828e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8292:	bf00      	nop

000b8294 <__aeabi_dcmpge>:
   b8294:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8298:	f7ff ffce 	bl	b8238 <__aeabi_cdrcmple>
   b829c:	bf94      	ite	ls
   b829e:	2001      	movls	r0, #1
   b82a0:	2000      	movhi	r0, #0
   b82a2:	f85d fb08 	ldr.w	pc, [sp], #8
   b82a6:	bf00      	nop

000b82a8 <__aeabi_dcmpgt>:
   b82a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82ac:	f7ff ffc4 	bl	b8238 <__aeabi_cdrcmple>
   b82b0:	bf34      	ite	cc
   b82b2:	2001      	movcc	r0, #1
   b82b4:	2000      	movcs	r0, #0
   b82b6:	f85d fb08 	ldr.w	pc, [sp], #8
   b82ba:	bf00      	nop

000b82bc <__aeabi_dcmpun>:
   b82bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b82c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b82c4:	d102      	bne.n	b82cc <__aeabi_dcmpun+0x10>
   b82c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b82ca:	d10a      	bne.n	b82e2 <__aeabi_dcmpun+0x26>
   b82cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b82d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b82d4:	d102      	bne.n	b82dc <__aeabi_dcmpun+0x20>
   b82d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b82da:	d102      	bne.n	b82e2 <__aeabi_dcmpun+0x26>
   b82dc:	f04f 0000 	mov.w	r0, #0
   b82e0:	4770      	bx	lr
   b82e2:	f04f 0001 	mov.w	r0, #1
   b82e6:	4770      	bx	lr

000b82e8 <__aeabi_d2iz>:
   b82e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b82ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b82f0:	d215      	bcs.n	b831e <__aeabi_d2iz+0x36>
   b82f2:	d511      	bpl.n	b8318 <__aeabi_d2iz+0x30>
   b82f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b82f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b82fc:	d912      	bls.n	b8324 <__aeabi_d2iz+0x3c>
   b82fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8302:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8306:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b830a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b830e:	fa23 f002 	lsr.w	r0, r3, r2
   b8312:	bf18      	it	ne
   b8314:	4240      	negne	r0, r0
   b8316:	4770      	bx	lr
   b8318:	f04f 0000 	mov.w	r0, #0
   b831c:	4770      	bx	lr
   b831e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8322:	d105      	bne.n	b8330 <__aeabi_d2iz+0x48>
   b8324:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8328:	bf08      	it	eq
   b832a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b832e:	4770      	bx	lr
   b8330:	f04f 0000 	mov.w	r0, #0
   b8334:	4770      	bx	lr
   b8336:	bf00      	nop

000b8338 <__aeabi_d2uiz>:
   b8338:	004a      	lsls	r2, r1, #1
   b833a:	d211      	bcs.n	b8360 <__aeabi_d2uiz+0x28>
   b833c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8340:	d211      	bcs.n	b8366 <__aeabi_d2uiz+0x2e>
   b8342:	d50d      	bpl.n	b8360 <__aeabi_d2uiz+0x28>
   b8344:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8348:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b834c:	d40e      	bmi.n	b836c <__aeabi_d2uiz+0x34>
   b834e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8356:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b835a:	fa23 f002 	lsr.w	r0, r3, r2
   b835e:	4770      	bx	lr
   b8360:	f04f 0000 	mov.w	r0, #0
   b8364:	4770      	bx	lr
   b8366:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b836a:	d102      	bne.n	b8372 <__aeabi_d2uiz+0x3a>
   b836c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8370:	4770      	bx	lr
   b8372:	f04f 0000 	mov.w	r0, #0
   b8376:	4770      	bx	lr

000b8378 <__aeabi_d2f>:
   b8378:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b837c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b8380:	bf24      	itt	cs
   b8382:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b8386:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b838a:	d90d      	bls.n	b83a8 <__aeabi_d2f+0x30>
   b838c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b8390:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8394:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8398:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b839c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b83a0:	bf08      	it	eq
   b83a2:	f020 0001 	biceq.w	r0, r0, #1
   b83a6:	4770      	bx	lr
   b83a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b83ac:	d121      	bne.n	b83f2 <__aeabi_d2f+0x7a>
   b83ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b83b2:	bfbc      	itt	lt
   b83b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b83b8:	4770      	bxlt	lr
   b83ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b83be:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b83c2:	f1c2 0218 	rsb	r2, r2, #24
   b83c6:	f1c2 0c20 	rsb	ip, r2, #32
   b83ca:	fa10 f30c 	lsls.w	r3, r0, ip
   b83ce:	fa20 f002 	lsr.w	r0, r0, r2
   b83d2:	bf18      	it	ne
   b83d4:	f040 0001 	orrne.w	r0, r0, #1
   b83d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b83dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b83e0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b83e4:	ea40 000c 	orr.w	r0, r0, ip
   b83e8:	fa23 f302 	lsr.w	r3, r3, r2
   b83ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b83f0:	e7cc      	b.n	b838c <__aeabi_d2f+0x14>
   b83f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b83f6:	d107      	bne.n	b8408 <__aeabi_d2f+0x90>
   b83f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b83fc:	bf1e      	ittt	ne
   b83fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8402:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8406:	4770      	bxne	lr
   b8408:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b840c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8410:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8414:	4770      	bx	lr
   b8416:	bf00      	nop

000b8418 <__aeabi_d2ulz>:
   b8418:	b5d0      	push	{r4, r6, r7, lr}
   b841a:	4b0c      	ldr	r3, [pc, #48]	; (b844c <__aeabi_d2ulz+0x34>)
   b841c:	2200      	movs	r2, #0
   b841e:	4606      	mov	r6, r0
   b8420:	460f      	mov	r7, r1
   b8422:	f7ff fcb1 	bl	b7d88 <__aeabi_dmul>
   b8426:	f7ff ff87 	bl	b8338 <__aeabi_d2uiz>
   b842a:	4604      	mov	r4, r0
   b842c:	f7ff fc32 	bl	b7c94 <__aeabi_ui2d>
   b8430:	4b07      	ldr	r3, [pc, #28]	; (b8450 <__aeabi_d2ulz+0x38>)
   b8432:	2200      	movs	r2, #0
   b8434:	f7ff fca8 	bl	b7d88 <__aeabi_dmul>
   b8438:	4602      	mov	r2, r0
   b843a:	460b      	mov	r3, r1
   b843c:	4630      	mov	r0, r6
   b843e:	4639      	mov	r1, r7
   b8440:	f7ff faea 	bl	b7a18 <__aeabi_dsub>
   b8444:	f7ff ff78 	bl	b8338 <__aeabi_d2uiz>
   b8448:	4621      	mov	r1, r4
   b844a:	bdd0      	pop	{r4, r6, r7, pc}
   b844c:	3df00000 	.word	0x3df00000
   b8450:	41f00000 	.word	0x41f00000

000b8454 <atexit>:
   b8454:	2300      	movs	r3, #0
   b8456:	4601      	mov	r1, r0
   b8458:	461a      	mov	r2, r3
   b845a:	4618      	mov	r0, r3
   b845c:	f000 be9e 	b.w	b919c <__register_exitproc>

000b8460 <atof>:
   b8460:	2100      	movs	r1, #0
   b8462:	f000 be8f 	b.w	b9184 <strtod>

000b8466 <memcpy>:
   b8466:	440a      	add	r2, r1
   b8468:	4291      	cmp	r1, r2
   b846a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b846e:	d100      	bne.n	b8472 <memcpy+0xc>
   b8470:	4770      	bx	lr
   b8472:	b510      	push	{r4, lr}
   b8474:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8478:	f803 4f01 	strb.w	r4, [r3, #1]!
   b847c:	4291      	cmp	r1, r2
   b847e:	d1f9      	bne.n	b8474 <memcpy+0xe>
   b8480:	bd10      	pop	{r4, pc}

000b8482 <memset>:
   b8482:	4402      	add	r2, r0
   b8484:	4603      	mov	r3, r0
   b8486:	4293      	cmp	r3, r2
   b8488:	d100      	bne.n	b848c <memset+0xa>
   b848a:	4770      	bx	lr
   b848c:	f803 1b01 	strb.w	r1, [r3], #1
   b8490:	e7f9      	b.n	b8486 <memset+0x4>
	...

000b8494 <srand>:
   b8494:	b538      	push	{r3, r4, r5, lr}
   b8496:	4b10      	ldr	r3, [pc, #64]	; (b84d8 <srand+0x44>)
   b8498:	681d      	ldr	r5, [r3, #0]
   b849a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b849c:	4604      	mov	r4, r0
   b849e:	b9b3      	cbnz	r3, b84ce <srand+0x3a>
   b84a0:	2018      	movs	r0, #24
   b84a2:	f7fd ff2d 	bl	b6300 <malloc>
   b84a6:	4602      	mov	r2, r0
   b84a8:	63a8      	str	r0, [r5, #56]	; 0x38
   b84aa:	b920      	cbnz	r0, b84b6 <srand+0x22>
   b84ac:	4b0b      	ldr	r3, [pc, #44]	; (b84dc <srand+0x48>)
   b84ae:	480c      	ldr	r0, [pc, #48]	; (b84e0 <srand+0x4c>)
   b84b0:	2142      	movs	r1, #66	; 0x42
   b84b2:	f7fd ff55 	bl	b6360 <__assert_func>
   b84b6:	490b      	ldr	r1, [pc, #44]	; (b84e4 <srand+0x50>)
   b84b8:	4b0b      	ldr	r3, [pc, #44]	; (b84e8 <srand+0x54>)
   b84ba:	e9c0 1300 	strd	r1, r3, [r0]
   b84be:	4b0b      	ldr	r3, [pc, #44]	; (b84ec <srand+0x58>)
   b84c0:	6083      	str	r3, [r0, #8]
   b84c2:	230b      	movs	r3, #11
   b84c4:	8183      	strh	r3, [r0, #12]
   b84c6:	2100      	movs	r1, #0
   b84c8:	2001      	movs	r0, #1
   b84ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b84ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b84d0:	2200      	movs	r2, #0
   b84d2:	611c      	str	r4, [r3, #16]
   b84d4:	615a      	str	r2, [r3, #20]
   b84d6:	bd38      	pop	{r3, r4, r5, pc}
   b84d8:	2003e3fc 	.word	0x2003e3fc
   b84dc:	000bb21d 	.word	0x000bb21d
   b84e0:	000bb234 	.word	0x000bb234
   b84e4:	abcd330e 	.word	0xabcd330e
   b84e8:	e66d1234 	.word	0xe66d1234
   b84ec:	0005deec 	.word	0x0005deec

000b84f0 <strcmp>:
   b84f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b84f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b84f8:	2a01      	cmp	r2, #1
   b84fa:	bf28      	it	cs
   b84fc:	429a      	cmpcs	r2, r3
   b84fe:	d0f7      	beq.n	b84f0 <strcmp>
   b8500:	1ad0      	subs	r0, r2, r3
   b8502:	4770      	bx	lr

000b8504 <strlen>:
   b8504:	4603      	mov	r3, r0
   b8506:	f813 2b01 	ldrb.w	r2, [r3], #1
   b850a:	2a00      	cmp	r2, #0
   b850c:	d1fb      	bne.n	b8506 <strlen+0x2>
   b850e:	1a18      	subs	r0, r3, r0
   b8510:	3801      	subs	r0, #1
   b8512:	4770      	bx	lr

000b8514 <strncmp>:
   b8514:	b510      	push	{r4, lr}
   b8516:	b17a      	cbz	r2, b8538 <strncmp+0x24>
   b8518:	4603      	mov	r3, r0
   b851a:	3901      	subs	r1, #1
   b851c:	1884      	adds	r4, r0, r2
   b851e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8522:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8526:	4290      	cmp	r0, r2
   b8528:	d101      	bne.n	b852e <strncmp+0x1a>
   b852a:	42a3      	cmp	r3, r4
   b852c:	d101      	bne.n	b8532 <strncmp+0x1e>
   b852e:	1a80      	subs	r0, r0, r2
   b8530:	bd10      	pop	{r4, pc}
   b8532:	2800      	cmp	r0, #0
   b8534:	d1f3      	bne.n	b851e <strncmp+0xa>
   b8536:	e7fa      	b.n	b852e <strncmp+0x1a>
   b8538:	4610      	mov	r0, r2
   b853a:	e7f9      	b.n	b8530 <strncmp+0x1c>

000b853c <sulp>:
   b853c:	b570      	push	{r4, r5, r6, lr}
   b853e:	4604      	mov	r4, r0
   b8540:	460d      	mov	r5, r1
   b8542:	ec45 4b10 	vmov	d0, r4, r5
   b8546:	4616      	mov	r6, r2
   b8548:	f001 fd82 	bl	ba050 <__ulp>
   b854c:	ec51 0b10 	vmov	r0, r1, d0
   b8550:	b17e      	cbz	r6, b8572 <sulp+0x36>
   b8552:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8556:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b855a:	2b00      	cmp	r3, #0
   b855c:	dd09      	ble.n	b8572 <sulp+0x36>
   b855e:	051b      	lsls	r3, r3, #20
   b8560:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8564:	2400      	movs	r4, #0
   b8566:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b856a:	4622      	mov	r2, r4
   b856c:	462b      	mov	r3, r5
   b856e:	f7ff fc0b 	bl	b7d88 <__aeabi_dmul>
   b8572:	bd70      	pop	{r4, r5, r6, pc}
   b8574:	0000      	movs	r0, r0
	...

000b8578 <_strtod_l>:
   b8578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b857c:	ed2d 8b02 	vpush	{d8}
   b8580:	b09d      	sub	sp, #116	; 0x74
   b8582:	461f      	mov	r7, r3
   b8584:	2300      	movs	r3, #0
   b8586:	9318      	str	r3, [sp, #96]	; 0x60
   b8588:	4ba2      	ldr	r3, [pc, #648]	; (b8814 <_strtod_l+0x29c>)
   b858a:	9213      	str	r2, [sp, #76]	; 0x4c
   b858c:	681b      	ldr	r3, [r3, #0]
   b858e:	9305      	str	r3, [sp, #20]
   b8590:	4604      	mov	r4, r0
   b8592:	4618      	mov	r0, r3
   b8594:	4688      	mov	r8, r1
   b8596:	f7ff ffb5 	bl	b8504 <strlen>
   b859a:	f04f 0a00 	mov.w	sl, #0
   b859e:	4605      	mov	r5, r0
   b85a0:	f04f 0b00 	mov.w	fp, #0
   b85a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b85a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b85aa:	781a      	ldrb	r2, [r3, #0]
   b85ac:	2a2b      	cmp	r2, #43	; 0x2b
   b85ae:	d04e      	beq.n	b864e <_strtod_l+0xd6>
   b85b0:	d83b      	bhi.n	b862a <_strtod_l+0xb2>
   b85b2:	2a0d      	cmp	r2, #13
   b85b4:	d834      	bhi.n	b8620 <_strtod_l+0xa8>
   b85b6:	2a08      	cmp	r2, #8
   b85b8:	d834      	bhi.n	b8624 <_strtod_l+0xac>
   b85ba:	2a00      	cmp	r2, #0
   b85bc:	d03e      	beq.n	b863c <_strtod_l+0xc4>
   b85be:	2300      	movs	r3, #0
   b85c0:	930a      	str	r3, [sp, #40]	; 0x28
   b85c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b85c4:	7833      	ldrb	r3, [r6, #0]
   b85c6:	2b30      	cmp	r3, #48	; 0x30
   b85c8:	f040 80b0 	bne.w	b872c <_strtod_l+0x1b4>
   b85cc:	7873      	ldrb	r3, [r6, #1]
   b85ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b85d2:	2b58      	cmp	r3, #88	; 0x58
   b85d4:	d168      	bne.n	b86a8 <_strtod_l+0x130>
   b85d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b85d8:	9301      	str	r3, [sp, #4]
   b85da:	ab18      	add	r3, sp, #96	; 0x60
   b85dc:	9702      	str	r7, [sp, #8]
   b85de:	9300      	str	r3, [sp, #0]
   b85e0:	4a8d      	ldr	r2, [pc, #564]	; (b8818 <_strtod_l+0x2a0>)
   b85e2:	ab19      	add	r3, sp, #100	; 0x64
   b85e4:	a917      	add	r1, sp, #92	; 0x5c
   b85e6:	4620      	mov	r0, r4
   b85e8:	f000 fea2 	bl	b9330 <__gethex>
   b85ec:	f010 0707 	ands.w	r7, r0, #7
   b85f0:	4605      	mov	r5, r0
   b85f2:	d005      	beq.n	b8600 <_strtod_l+0x88>
   b85f4:	2f06      	cmp	r7, #6
   b85f6:	d12c      	bne.n	b8652 <_strtod_l+0xda>
   b85f8:	3601      	adds	r6, #1
   b85fa:	2300      	movs	r3, #0
   b85fc:	9617      	str	r6, [sp, #92]	; 0x5c
   b85fe:	930a      	str	r3, [sp, #40]	; 0x28
   b8600:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8602:	2b00      	cmp	r3, #0
   b8604:	f040 8590 	bne.w	b9128 <_strtod_l+0xbb0>
   b8608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b860a:	b1eb      	cbz	r3, b8648 <_strtod_l+0xd0>
   b860c:	4652      	mov	r2, sl
   b860e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b8612:	ec43 2b10 	vmov	d0, r2, r3
   b8616:	b01d      	add	sp, #116	; 0x74
   b8618:	ecbd 8b02 	vpop	{d8}
   b861c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8620:	2a20      	cmp	r2, #32
   b8622:	d1cc      	bne.n	b85be <_strtod_l+0x46>
   b8624:	3301      	adds	r3, #1
   b8626:	9317      	str	r3, [sp, #92]	; 0x5c
   b8628:	e7be      	b.n	b85a8 <_strtod_l+0x30>
   b862a:	2a2d      	cmp	r2, #45	; 0x2d
   b862c:	d1c7      	bne.n	b85be <_strtod_l+0x46>
   b862e:	2201      	movs	r2, #1
   b8630:	920a      	str	r2, [sp, #40]	; 0x28
   b8632:	1c5a      	adds	r2, r3, #1
   b8634:	9217      	str	r2, [sp, #92]	; 0x5c
   b8636:	785b      	ldrb	r3, [r3, #1]
   b8638:	2b00      	cmp	r3, #0
   b863a:	d1c2      	bne.n	b85c2 <_strtod_l+0x4a>
   b863c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b863e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8642:	2b00      	cmp	r3, #0
   b8644:	f040 856e 	bne.w	b9124 <_strtod_l+0xbac>
   b8648:	4652      	mov	r2, sl
   b864a:	465b      	mov	r3, fp
   b864c:	e7e1      	b.n	b8612 <_strtod_l+0x9a>
   b864e:	2200      	movs	r2, #0
   b8650:	e7ee      	b.n	b8630 <_strtod_l+0xb8>
   b8652:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8654:	b13a      	cbz	r2, b8666 <_strtod_l+0xee>
   b8656:	2135      	movs	r1, #53	; 0x35
   b8658:	a81a      	add	r0, sp, #104	; 0x68
   b865a:	f001 fe04 	bl	ba266 <__copybits>
   b865e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8660:	4620      	mov	r0, r4
   b8662:	f001 f9c3 	bl	b99ec <_Bfree>
   b8666:	3f01      	subs	r7, #1
   b8668:	2f04      	cmp	r7, #4
   b866a:	d806      	bhi.n	b867a <_strtod_l+0x102>
   b866c:	e8df f007 	tbb	[pc, r7]
   b8670:	1714030a 	.word	0x1714030a
   b8674:	0a          	.byte	0x0a
   b8675:	00          	.byte	0x00
   b8676:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b867a:	0728      	lsls	r0, r5, #28
   b867c:	d5c0      	bpl.n	b8600 <_strtod_l+0x88>
   b867e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b8682:	e7bd      	b.n	b8600 <_strtod_l+0x88>
   b8684:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b8688:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b868a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b868e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b8692:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b8696:	e7f0      	b.n	b867a <_strtod_l+0x102>
   b8698:	f8df b180 	ldr.w	fp, [pc, #384]	; b881c <_strtod_l+0x2a4>
   b869c:	e7ed      	b.n	b867a <_strtod_l+0x102>
   b869e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b86a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b86a6:	e7e8      	b.n	b867a <_strtod_l+0x102>
   b86a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86aa:	1c5a      	adds	r2, r3, #1
   b86ac:	9217      	str	r2, [sp, #92]	; 0x5c
   b86ae:	785b      	ldrb	r3, [r3, #1]
   b86b0:	2b30      	cmp	r3, #48	; 0x30
   b86b2:	d0f9      	beq.n	b86a8 <_strtod_l+0x130>
   b86b4:	2b00      	cmp	r3, #0
   b86b6:	d0a3      	beq.n	b8600 <_strtod_l+0x88>
   b86b8:	2301      	movs	r3, #1
   b86ba:	f04f 0900 	mov.w	r9, #0
   b86be:	9304      	str	r3, [sp, #16]
   b86c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86c2:	9308      	str	r3, [sp, #32]
   b86c4:	f8cd 901c 	str.w	r9, [sp, #28]
   b86c8:	464f      	mov	r7, r9
   b86ca:	220a      	movs	r2, #10
   b86cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b86ce:	7806      	ldrb	r6, [r0, #0]
   b86d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b86d4:	b2d9      	uxtb	r1, r3
   b86d6:	2909      	cmp	r1, #9
   b86d8:	d92a      	bls.n	b8730 <_strtod_l+0x1b8>
   b86da:	9905      	ldr	r1, [sp, #20]
   b86dc:	462a      	mov	r2, r5
   b86de:	f7ff ff19 	bl	b8514 <strncmp>
   b86e2:	b398      	cbz	r0, b874c <_strtod_l+0x1d4>
   b86e4:	2000      	movs	r0, #0
   b86e6:	4632      	mov	r2, r6
   b86e8:	463d      	mov	r5, r7
   b86ea:	9005      	str	r0, [sp, #20]
   b86ec:	4603      	mov	r3, r0
   b86ee:	2a65      	cmp	r2, #101	; 0x65
   b86f0:	d001      	beq.n	b86f6 <_strtod_l+0x17e>
   b86f2:	2a45      	cmp	r2, #69	; 0x45
   b86f4:	d118      	bne.n	b8728 <_strtod_l+0x1b0>
   b86f6:	b91d      	cbnz	r5, b8700 <_strtod_l+0x188>
   b86f8:	9a04      	ldr	r2, [sp, #16]
   b86fa:	4302      	orrs	r2, r0
   b86fc:	d09e      	beq.n	b863c <_strtod_l+0xc4>
   b86fe:	2500      	movs	r5, #0
   b8700:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b8704:	f108 0201 	add.w	r2, r8, #1
   b8708:	9217      	str	r2, [sp, #92]	; 0x5c
   b870a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b870e:	2a2b      	cmp	r2, #43	; 0x2b
   b8710:	d075      	beq.n	b87fe <_strtod_l+0x286>
   b8712:	2a2d      	cmp	r2, #45	; 0x2d
   b8714:	d07b      	beq.n	b880e <_strtod_l+0x296>
   b8716:	f04f 0c00 	mov.w	ip, #0
   b871a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b871e:	2909      	cmp	r1, #9
   b8720:	f240 8082 	bls.w	b8828 <_strtod_l+0x2b0>
   b8724:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8728:	2600      	movs	r6, #0
   b872a:	e09d      	b.n	b8868 <_strtod_l+0x2f0>
   b872c:	2300      	movs	r3, #0
   b872e:	e7c4      	b.n	b86ba <_strtod_l+0x142>
   b8730:	2f08      	cmp	r7, #8
   b8732:	bfd8      	it	le
   b8734:	9907      	ldrle	r1, [sp, #28]
   b8736:	f100 0001 	add.w	r0, r0, #1
   b873a:	bfda      	itte	le
   b873c:	fb02 3301 	mlale	r3, r2, r1, r3
   b8740:	9307      	strle	r3, [sp, #28]
   b8742:	fb02 3909 	mlagt	r9, r2, r9, r3
   b8746:	3701      	adds	r7, #1
   b8748:	9017      	str	r0, [sp, #92]	; 0x5c
   b874a:	e7bf      	b.n	b86cc <_strtod_l+0x154>
   b874c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b874e:	195a      	adds	r2, r3, r5
   b8750:	9217      	str	r2, [sp, #92]	; 0x5c
   b8752:	5d5a      	ldrb	r2, [r3, r5]
   b8754:	2f00      	cmp	r7, #0
   b8756:	d037      	beq.n	b87c8 <_strtod_l+0x250>
   b8758:	9005      	str	r0, [sp, #20]
   b875a:	463d      	mov	r5, r7
   b875c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b8760:	2b09      	cmp	r3, #9
   b8762:	d912      	bls.n	b878a <_strtod_l+0x212>
   b8764:	2301      	movs	r3, #1
   b8766:	e7c2      	b.n	b86ee <_strtod_l+0x176>
   b8768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b876a:	1c5a      	adds	r2, r3, #1
   b876c:	9217      	str	r2, [sp, #92]	; 0x5c
   b876e:	785a      	ldrb	r2, [r3, #1]
   b8770:	3001      	adds	r0, #1
   b8772:	2a30      	cmp	r2, #48	; 0x30
   b8774:	d0f8      	beq.n	b8768 <_strtod_l+0x1f0>
   b8776:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b877a:	2b08      	cmp	r3, #8
   b877c:	f200 84d9 	bhi.w	b9132 <_strtod_l+0xbba>
   b8780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8782:	9005      	str	r0, [sp, #20]
   b8784:	2000      	movs	r0, #0
   b8786:	9308      	str	r3, [sp, #32]
   b8788:	4605      	mov	r5, r0
   b878a:	3a30      	subs	r2, #48	; 0x30
   b878c:	f100 0301 	add.w	r3, r0, #1
   b8790:	d014      	beq.n	b87bc <_strtod_l+0x244>
   b8792:	9905      	ldr	r1, [sp, #20]
   b8794:	4419      	add	r1, r3
   b8796:	9105      	str	r1, [sp, #20]
   b8798:	462b      	mov	r3, r5
   b879a:	eb00 0e05 	add.w	lr, r0, r5
   b879e:	210a      	movs	r1, #10
   b87a0:	4573      	cmp	r3, lr
   b87a2:	d113      	bne.n	b87cc <_strtod_l+0x254>
   b87a4:	182b      	adds	r3, r5, r0
   b87a6:	2b08      	cmp	r3, #8
   b87a8:	f105 0501 	add.w	r5, r5, #1
   b87ac:	4405      	add	r5, r0
   b87ae:	dc1c      	bgt.n	b87ea <_strtod_l+0x272>
   b87b0:	9907      	ldr	r1, [sp, #28]
   b87b2:	230a      	movs	r3, #10
   b87b4:	fb03 2301 	mla	r3, r3, r1, r2
   b87b8:	9307      	str	r3, [sp, #28]
   b87ba:	2300      	movs	r3, #0
   b87bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b87be:	1c51      	adds	r1, r2, #1
   b87c0:	9117      	str	r1, [sp, #92]	; 0x5c
   b87c2:	7852      	ldrb	r2, [r2, #1]
   b87c4:	4618      	mov	r0, r3
   b87c6:	e7c9      	b.n	b875c <_strtod_l+0x1e4>
   b87c8:	4638      	mov	r0, r7
   b87ca:	e7d2      	b.n	b8772 <_strtod_l+0x1fa>
   b87cc:	2b08      	cmp	r3, #8
   b87ce:	dc04      	bgt.n	b87da <_strtod_l+0x262>
   b87d0:	9e07      	ldr	r6, [sp, #28]
   b87d2:	434e      	muls	r6, r1
   b87d4:	9607      	str	r6, [sp, #28]
   b87d6:	3301      	adds	r3, #1
   b87d8:	e7e2      	b.n	b87a0 <_strtod_l+0x228>
   b87da:	f103 0c01 	add.w	ip, r3, #1
   b87de:	f1bc 0f10 	cmp.w	ip, #16
   b87e2:	bfd8      	it	le
   b87e4:	fb01 f909 	mulle.w	r9, r1, r9
   b87e8:	e7f5      	b.n	b87d6 <_strtod_l+0x25e>
   b87ea:	2d10      	cmp	r5, #16
   b87ec:	bfdc      	itt	le
   b87ee:	230a      	movle	r3, #10
   b87f0:	fb03 2909 	mlale	r9, r3, r9, r2
   b87f4:	e7e1      	b.n	b87ba <_strtod_l+0x242>
   b87f6:	2300      	movs	r3, #0
   b87f8:	9305      	str	r3, [sp, #20]
   b87fa:	2301      	movs	r3, #1
   b87fc:	e77c      	b.n	b86f8 <_strtod_l+0x180>
   b87fe:	f04f 0c00 	mov.w	ip, #0
   b8802:	f108 0202 	add.w	r2, r8, #2
   b8806:	9217      	str	r2, [sp, #92]	; 0x5c
   b8808:	f898 2002 	ldrb.w	r2, [r8, #2]
   b880c:	e785      	b.n	b871a <_strtod_l+0x1a2>
   b880e:	f04f 0c01 	mov.w	ip, #1
   b8812:	e7f6      	b.n	b8802 <_strtod_l+0x28a>
   b8814:	000bb45c 	.word	0x000bb45c
   b8818:	000bb294 	.word	0x000bb294
   b881c:	7ff00000 	.word	0x7ff00000
   b8820:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8822:	1c51      	adds	r1, r2, #1
   b8824:	9117      	str	r1, [sp, #92]	; 0x5c
   b8826:	7852      	ldrb	r2, [r2, #1]
   b8828:	2a30      	cmp	r2, #48	; 0x30
   b882a:	d0f9      	beq.n	b8820 <_strtod_l+0x2a8>
   b882c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8830:	2908      	cmp	r1, #8
   b8832:	f63f af79 	bhi.w	b8728 <_strtod_l+0x1b0>
   b8836:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b883a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b883c:	9206      	str	r2, [sp, #24]
   b883e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8840:	1c51      	adds	r1, r2, #1
   b8842:	9117      	str	r1, [sp, #92]	; 0x5c
   b8844:	7852      	ldrb	r2, [r2, #1]
   b8846:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b884a:	2e09      	cmp	r6, #9
   b884c:	d937      	bls.n	b88be <_strtod_l+0x346>
   b884e:	9e06      	ldr	r6, [sp, #24]
   b8850:	1b89      	subs	r1, r1, r6
   b8852:	2908      	cmp	r1, #8
   b8854:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8858:	dc02      	bgt.n	b8860 <_strtod_l+0x2e8>
   b885a:	4576      	cmp	r6, lr
   b885c:	bfa8      	it	ge
   b885e:	4676      	movge	r6, lr
   b8860:	f1bc 0f00 	cmp.w	ip, #0
   b8864:	d000      	beq.n	b8868 <_strtod_l+0x2f0>
   b8866:	4276      	negs	r6, r6
   b8868:	2d00      	cmp	r5, #0
   b886a:	d14d      	bne.n	b8908 <_strtod_l+0x390>
   b886c:	9904      	ldr	r1, [sp, #16]
   b886e:	4301      	orrs	r1, r0
   b8870:	f47f aec6 	bne.w	b8600 <_strtod_l+0x88>
   b8874:	2b00      	cmp	r3, #0
   b8876:	f47f aee1 	bne.w	b863c <_strtod_l+0xc4>
   b887a:	2a69      	cmp	r2, #105	; 0x69
   b887c:	d027      	beq.n	b88ce <_strtod_l+0x356>
   b887e:	dc24      	bgt.n	b88ca <_strtod_l+0x352>
   b8880:	2a49      	cmp	r2, #73	; 0x49
   b8882:	d024      	beq.n	b88ce <_strtod_l+0x356>
   b8884:	2a4e      	cmp	r2, #78	; 0x4e
   b8886:	f47f aed9 	bne.w	b863c <_strtod_l+0xc4>
   b888a:	499f      	ldr	r1, [pc, #636]	; (b8b08 <_strtod_l+0x590>)
   b888c:	a817      	add	r0, sp, #92	; 0x5c
   b888e:	f000 ffa7 	bl	b97e0 <__match>
   b8892:	2800      	cmp	r0, #0
   b8894:	f43f aed2 	beq.w	b863c <_strtod_l+0xc4>
   b8898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b889a:	781b      	ldrb	r3, [r3, #0]
   b889c:	2b28      	cmp	r3, #40	; 0x28
   b889e:	d12d      	bne.n	b88fc <_strtod_l+0x384>
   b88a0:	499a      	ldr	r1, [pc, #616]	; (b8b0c <_strtod_l+0x594>)
   b88a2:	aa1a      	add	r2, sp, #104	; 0x68
   b88a4:	a817      	add	r0, sp, #92	; 0x5c
   b88a6:	f000 ffaf 	bl	b9808 <__hexnan>
   b88aa:	2805      	cmp	r0, #5
   b88ac:	d126      	bne.n	b88fc <_strtod_l+0x384>
   b88ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b88b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b88b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b88b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b88bc:	e6a0      	b.n	b8600 <_strtod_l+0x88>
   b88be:	210a      	movs	r1, #10
   b88c0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b88c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b88c8:	e7b9      	b.n	b883e <_strtod_l+0x2c6>
   b88ca:	2a6e      	cmp	r2, #110	; 0x6e
   b88cc:	e7db      	b.n	b8886 <_strtod_l+0x30e>
   b88ce:	4990      	ldr	r1, [pc, #576]	; (b8b10 <_strtod_l+0x598>)
   b88d0:	a817      	add	r0, sp, #92	; 0x5c
   b88d2:	f000 ff85 	bl	b97e0 <__match>
   b88d6:	2800      	cmp	r0, #0
   b88d8:	f43f aeb0 	beq.w	b863c <_strtod_l+0xc4>
   b88dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b88de:	498d      	ldr	r1, [pc, #564]	; (b8b14 <_strtod_l+0x59c>)
   b88e0:	3b01      	subs	r3, #1
   b88e2:	a817      	add	r0, sp, #92	; 0x5c
   b88e4:	9317      	str	r3, [sp, #92]	; 0x5c
   b88e6:	f000 ff7b 	bl	b97e0 <__match>
   b88ea:	b910      	cbnz	r0, b88f2 <_strtod_l+0x37a>
   b88ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b88ee:	3301      	adds	r3, #1
   b88f0:	9317      	str	r3, [sp, #92]	; 0x5c
   b88f2:	f8df b230 	ldr.w	fp, [pc, #560]	; b8b24 <_strtod_l+0x5ac>
   b88f6:	f04f 0a00 	mov.w	sl, #0
   b88fa:	e681      	b.n	b8600 <_strtod_l+0x88>
   b88fc:	4886      	ldr	r0, [pc, #536]	; (b8b18 <_strtod_l+0x5a0>)
   b88fe:	f001 fd07 	bl	ba310 <nan>
   b8902:	ec5b ab10 	vmov	sl, fp, d0
   b8906:	e67b      	b.n	b8600 <_strtod_l+0x88>
   b8908:	9b05      	ldr	r3, [sp, #20]
   b890a:	9807      	ldr	r0, [sp, #28]
   b890c:	1af3      	subs	r3, r6, r3
   b890e:	2f00      	cmp	r7, #0
   b8910:	bf08      	it	eq
   b8912:	462f      	moveq	r7, r5
   b8914:	2d10      	cmp	r5, #16
   b8916:	9306      	str	r3, [sp, #24]
   b8918:	46a8      	mov	r8, r5
   b891a:	bfa8      	it	ge
   b891c:	f04f 0810 	movge.w	r8, #16
   b8920:	f7ff f9b8 	bl	b7c94 <__aeabi_ui2d>
   b8924:	2d09      	cmp	r5, #9
   b8926:	4682      	mov	sl, r0
   b8928:	468b      	mov	fp, r1
   b892a:	dd13      	ble.n	b8954 <_strtod_l+0x3dc>
   b892c:	4b7b      	ldr	r3, [pc, #492]	; (b8b1c <_strtod_l+0x5a4>)
   b892e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b8932:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b8936:	f7ff fa27 	bl	b7d88 <__aeabi_dmul>
   b893a:	4682      	mov	sl, r0
   b893c:	4648      	mov	r0, r9
   b893e:	468b      	mov	fp, r1
   b8940:	f7ff f9a8 	bl	b7c94 <__aeabi_ui2d>
   b8944:	4602      	mov	r2, r0
   b8946:	460b      	mov	r3, r1
   b8948:	4650      	mov	r0, sl
   b894a:	4659      	mov	r1, fp
   b894c:	f7ff f866 	bl	b7a1c <__adddf3>
   b8950:	4682      	mov	sl, r0
   b8952:	468b      	mov	fp, r1
   b8954:	2d0f      	cmp	r5, #15
   b8956:	dc38      	bgt.n	b89ca <_strtod_l+0x452>
   b8958:	9b06      	ldr	r3, [sp, #24]
   b895a:	2b00      	cmp	r3, #0
   b895c:	f43f ae50 	beq.w	b8600 <_strtod_l+0x88>
   b8960:	dd24      	ble.n	b89ac <_strtod_l+0x434>
   b8962:	2b16      	cmp	r3, #22
   b8964:	dc0b      	bgt.n	b897e <_strtod_l+0x406>
   b8966:	496d      	ldr	r1, [pc, #436]	; (b8b1c <_strtod_l+0x5a4>)
   b8968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b896c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8970:	4652      	mov	r2, sl
   b8972:	465b      	mov	r3, fp
   b8974:	f7ff fa08 	bl	b7d88 <__aeabi_dmul>
   b8978:	4682      	mov	sl, r0
   b897a:	468b      	mov	fp, r1
   b897c:	e640      	b.n	b8600 <_strtod_l+0x88>
   b897e:	9a06      	ldr	r2, [sp, #24]
   b8980:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b8984:	4293      	cmp	r3, r2
   b8986:	db20      	blt.n	b89ca <_strtod_l+0x452>
   b8988:	4c64      	ldr	r4, [pc, #400]	; (b8b1c <_strtod_l+0x5a4>)
   b898a:	f1c5 050f 	rsb	r5, r5, #15
   b898e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b8992:	4652      	mov	r2, sl
   b8994:	465b      	mov	r3, fp
   b8996:	e9d1 0100 	ldrd	r0, r1, [r1]
   b899a:	f7ff f9f5 	bl	b7d88 <__aeabi_dmul>
   b899e:	9b06      	ldr	r3, [sp, #24]
   b89a0:	1b5d      	subs	r5, r3, r5
   b89a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b89a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b89aa:	e7e3      	b.n	b8974 <_strtod_l+0x3fc>
   b89ac:	9b06      	ldr	r3, [sp, #24]
   b89ae:	3316      	adds	r3, #22
   b89b0:	db0b      	blt.n	b89ca <_strtod_l+0x452>
   b89b2:	9b05      	ldr	r3, [sp, #20]
   b89b4:	1b9e      	subs	r6, r3, r6
   b89b6:	4b59      	ldr	r3, [pc, #356]	; (b8b1c <_strtod_l+0x5a4>)
   b89b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b89bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   b89c0:	4650      	mov	r0, sl
   b89c2:	4659      	mov	r1, fp
   b89c4:	f7ff fb0a 	bl	b7fdc <__aeabi_ddiv>
   b89c8:	e7d6      	b.n	b8978 <_strtod_l+0x400>
   b89ca:	9b06      	ldr	r3, [sp, #24]
   b89cc:	eba5 0808 	sub.w	r8, r5, r8
   b89d0:	4498      	add	r8, r3
   b89d2:	f1b8 0f00 	cmp.w	r8, #0
   b89d6:	dd74      	ble.n	b8ac2 <_strtod_l+0x54a>
   b89d8:	f018 030f 	ands.w	r3, r8, #15
   b89dc:	d00a      	beq.n	b89f4 <_strtod_l+0x47c>
   b89de:	494f      	ldr	r1, [pc, #316]	; (b8b1c <_strtod_l+0x5a4>)
   b89e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b89e4:	4652      	mov	r2, sl
   b89e6:	465b      	mov	r3, fp
   b89e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b89ec:	f7ff f9cc 	bl	b7d88 <__aeabi_dmul>
   b89f0:	4682      	mov	sl, r0
   b89f2:	468b      	mov	fp, r1
   b89f4:	f038 080f 	bics.w	r8, r8, #15
   b89f8:	d04f      	beq.n	b8a9a <_strtod_l+0x522>
   b89fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b89fe:	dd22      	ble.n	b8a46 <_strtod_l+0x4ce>
   b8a00:	2500      	movs	r5, #0
   b8a02:	462e      	mov	r6, r5
   b8a04:	9507      	str	r5, [sp, #28]
   b8a06:	9505      	str	r5, [sp, #20]
   b8a08:	2322      	movs	r3, #34	; 0x22
   b8a0a:	f8df b118 	ldr.w	fp, [pc, #280]	; b8b24 <_strtod_l+0x5ac>
   b8a0e:	6023      	str	r3, [r4, #0]
   b8a10:	f04f 0a00 	mov.w	sl, #0
   b8a14:	9b07      	ldr	r3, [sp, #28]
   b8a16:	2b00      	cmp	r3, #0
   b8a18:	f43f adf2 	beq.w	b8600 <_strtod_l+0x88>
   b8a1c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8a1e:	4620      	mov	r0, r4
   b8a20:	f000 ffe4 	bl	b99ec <_Bfree>
   b8a24:	9905      	ldr	r1, [sp, #20]
   b8a26:	4620      	mov	r0, r4
   b8a28:	f000 ffe0 	bl	b99ec <_Bfree>
   b8a2c:	4631      	mov	r1, r6
   b8a2e:	4620      	mov	r0, r4
   b8a30:	f000 ffdc 	bl	b99ec <_Bfree>
   b8a34:	9907      	ldr	r1, [sp, #28]
   b8a36:	4620      	mov	r0, r4
   b8a38:	f000 ffd8 	bl	b99ec <_Bfree>
   b8a3c:	4629      	mov	r1, r5
   b8a3e:	4620      	mov	r0, r4
   b8a40:	f000 ffd4 	bl	b99ec <_Bfree>
   b8a44:	e5dc      	b.n	b8600 <_strtod_l+0x88>
   b8a46:	4b36      	ldr	r3, [pc, #216]	; (b8b20 <_strtod_l+0x5a8>)
   b8a48:	9304      	str	r3, [sp, #16]
   b8a4a:	2300      	movs	r3, #0
   b8a4c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8a50:	4650      	mov	r0, sl
   b8a52:	4659      	mov	r1, fp
   b8a54:	4699      	mov	r9, r3
   b8a56:	f1b8 0f01 	cmp.w	r8, #1
   b8a5a:	dc21      	bgt.n	b8aa0 <_strtod_l+0x528>
   b8a5c:	b10b      	cbz	r3, b8a62 <_strtod_l+0x4ea>
   b8a5e:	4682      	mov	sl, r0
   b8a60:	468b      	mov	fp, r1
   b8a62:	4b2f      	ldr	r3, [pc, #188]	; (b8b20 <_strtod_l+0x5a8>)
   b8a64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8a68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b8a6c:	4652      	mov	r2, sl
   b8a6e:	465b      	mov	r3, fp
   b8a70:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8a74:	f7ff f988 	bl	b7d88 <__aeabi_dmul>
   b8a78:	4b2a      	ldr	r3, [pc, #168]	; (b8b24 <_strtod_l+0x5ac>)
   b8a7a:	460a      	mov	r2, r1
   b8a7c:	400b      	ands	r3, r1
   b8a7e:	492a      	ldr	r1, [pc, #168]	; (b8b28 <_strtod_l+0x5b0>)
   b8a80:	428b      	cmp	r3, r1
   b8a82:	4682      	mov	sl, r0
   b8a84:	d8bc      	bhi.n	b8a00 <_strtod_l+0x488>
   b8a86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b8a8a:	428b      	cmp	r3, r1
   b8a8c:	bf86      	itte	hi
   b8a8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b8b2c <_strtod_l+0x5b4>
   b8a92:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b8a96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b8a9a:	2300      	movs	r3, #0
   b8a9c:	9304      	str	r3, [sp, #16]
   b8a9e:	e084      	b.n	b8baa <_strtod_l+0x632>
   b8aa0:	f018 0f01 	tst.w	r8, #1
   b8aa4:	d005      	beq.n	b8ab2 <_strtod_l+0x53a>
   b8aa6:	9b04      	ldr	r3, [sp, #16]
   b8aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8aac:	f7ff f96c 	bl	b7d88 <__aeabi_dmul>
   b8ab0:	2301      	movs	r3, #1
   b8ab2:	9a04      	ldr	r2, [sp, #16]
   b8ab4:	3208      	adds	r2, #8
   b8ab6:	f109 0901 	add.w	r9, r9, #1
   b8aba:	ea4f 0868 	mov.w	r8, r8, asr #1
   b8abe:	9204      	str	r2, [sp, #16]
   b8ac0:	e7c9      	b.n	b8a56 <_strtod_l+0x4de>
   b8ac2:	d0ea      	beq.n	b8a9a <_strtod_l+0x522>
   b8ac4:	f1c8 0800 	rsb	r8, r8, #0
   b8ac8:	f018 020f 	ands.w	r2, r8, #15
   b8acc:	d00a      	beq.n	b8ae4 <_strtod_l+0x56c>
   b8ace:	4b13      	ldr	r3, [pc, #76]	; (b8b1c <_strtod_l+0x5a4>)
   b8ad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b8ad4:	4650      	mov	r0, sl
   b8ad6:	4659      	mov	r1, fp
   b8ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8adc:	f7ff fa7e 	bl	b7fdc <__aeabi_ddiv>
   b8ae0:	4682      	mov	sl, r0
   b8ae2:	468b      	mov	fp, r1
   b8ae4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8ae8:	d0d7      	beq.n	b8a9a <_strtod_l+0x522>
   b8aea:	f1b8 0f1f 	cmp.w	r8, #31
   b8aee:	dd1f      	ble.n	b8b30 <_strtod_l+0x5b8>
   b8af0:	2500      	movs	r5, #0
   b8af2:	462e      	mov	r6, r5
   b8af4:	9507      	str	r5, [sp, #28]
   b8af6:	9505      	str	r5, [sp, #20]
   b8af8:	2322      	movs	r3, #34	; 0x22
   b8afa:	f04f 0a00 	mov.w	sl, #0
   b8afe:	f04f 0b00 	mov.w	fp, #0
   b8b02:	6023      	str	r3, [r4, #0]
   b8b04:	e786      	b.n	b8a14 <_strtod_l+0x49c>
   b8b06:	bf00      	nop
   b8b08:	000bafd9 	.word	0x000bafd9
   b8b0c:	000bb2a8 	.word	0x000bb2a8
   b8b10:	000bafdd 	.word	0x000bafdd
   b8b14:	000bb28d 	.word	0x000bb28d
   b8b18:	000ba3bc 	.word	0x000ba3bc
   b8b1c:	000bb4f8 	.word	0x000bb4f8
   b8b20:	000bb4d0 	.word	0x000bb4d0
   b8b24:	7ff00000 	.word	0x7ff00000
   b8b28:	7ca00000 	.word	0x7ca00000
   b8b2c:	7fefffff 	.word	0x7fefffff
   b8b30:	f018 0310 	ands.w	r3, r8, #16
   b8b34:	bf18      	it	ne
   b8b36:	236a      	movne	r3, #106	; 0x6a
   b8b38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8ee8 <_strtod_l+0x970>
   b8b3c:	9304      	str	r3, [sp, #16]
   b8b3e:	4650      	mov	r0, sl
   b8b40:	4659      	mov	r1, fp
   b8b42:	2300      	movs	r3, #0
   b8b44:	f018 0f01 	tst.w	r8, #1
   b8b48:	d004      	beq.n	b8b54 <_strtod_l+0x5dc>
   b8b4a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b8b4e:	f7ff f91b 	bl	b7d88 <__aeabi_dmul>
   b8b52:	2301      	movs	r3, #1
   b8b54:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8b58:	f109 0908 	add.w	r9, r9, #8
   b8b5c:	d1f2      	bne.n	b8b44 <_strtod_l+0x5cc>
   b8b5e:	b10b      	cbz	r3, b8b64 <_strtod_l+0x5ec>
   b8b60:	4682      	mov	sl, r0
   b8b62:	468b      	mov	fp, r1
   b8b64:	9b04      	ldr	r3, [sp, #16]
   b8b66:	b1c3      	cbz	r3, b8b9a <_strtod_l+0x622>
   b8b68:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b8b6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8b70:	2b00      	cmp	r3, #0
   b8b72:	4659      	mov	r1, fp
   b8b74:	dd11      	ble.n	b8b9a <_strtod_l+0x622>
   b8b76:	2b1f      	cmp	r3, #31
   b8b78:	f340 8124 	ble.w	b8dc4 <_strtod_l+0x84c>
   b8b7c:	2b34      	cmp	r3, #52	; 0x34
   b8b7e:	bfde      	ittt	le
   b8b80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8b84:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b8b88:	fa03 f202 	lslle.w	r2, r3, r2
   b8b8c:	f04f 0a00 	mov.w	sl, #0
   b8b90:	bfcc      	ite	gt
   b8b92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8b96:	ea02 0b01 	andle.w	fp, r2, r1
   b8b9a:	2200      	movs	r2, #0
   b8b9c:	2300      	movs	r3, #0
   b8b9e:	4650      	mov	r0, sl
   b8ba0:	4659      	mov	r1, fp
   b8ba2:	f7ff fb59 	bl	b8258 <__aeabi_dcmpeq>
   b8ba6:	2800      	cmp	r0, #0
   b8ba8:	d1a2      	bne.n	b8af0 <_strtod_l+0x578>
   b8baa:	9b07      	ldr	r3, [sp, #28]
   b8bac:	9300      	str	r3, [sp, #0]
   b8bae:	9908      	ldr	r1, [sp, #32]
   b8bb0:	462b      	mov	r3, r5
   b8bb2:	463a      	mov	r2, r7
   b8bb4:	4620      	mov	r0, r4
   b8bb6:	f000 ff81 	bl	b9abc <__s2b>
   b8bba:	9007      	str	r0, [sp, #28]
   b8bbc:	2800      	cmp	r0, #0
   b8bbe:	f43f af1f 	beq.w	b8a00 <_strtod_l+0x488>
   b8bc2:	9b05      	ldr	r3, [sp, #20]
   b8bc4:	1b9e      	subs	r6, r3, r6
   b8bc6:	9b06      	ldr	r3, [sp, #24]
   b8bc8:	2b00      	cmp	r3, #0
   b8bca:	bfb4      	ite	lt
   b8bcc:	4633      	movlt	r3, r6
   b8bce:	2300      	movge	r3, #0
   b8bd0:	930c      	str	r3, [sp, #48]	; 0x30
   b8bd2:	9b06      	ldr	r3, [sp, #24]
   b8bd4:	2500      	movs	r5, #0
   b8bd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b8bda:	9312      	str	r3, [sp, #72]	; 0x48
   b8bdc:	462e      	mov	r6, r5
   b8bde:	9b07      	ldr	r3, [sp, #28]
   b8be0:	4620      	mov	r0, r4
   b8be2:	6859      	ldr	r1, [r3, #4]
   b8be4:	f000 fec2 	bl	b996c <_Balloc>
   b8be8:	9005      	str	r0, [sp, #20]
   b8bea:	2800      	cmp	r0, #0
   b8bec:	f43f af0c 	beq.w	b8a08 <_strtod_l+0x490>
   b8bf0:	9b07      	ldr	r3, [sp, #28]
   b8bf2:	691a      	ldr	r2, [r3, #16]
   b8bf4:	3202      	adds	r2, #2
   b8bf6:	f103 010c 	add.w	r1, r3, #12
   b8bfa:	0092      	lsls	r2, r2, #2
   b8bfc:	300c      	adds	r0, #12
   b8bfe:	f7ff fc32 	bl	b8466 <memcpy>
   b8c02:	ec4b ab10 	vmov	d0, sl, fp
   b8c06:	aa1a      	add	r2, sp, #104	; 0x68
   b8c08:	a919      	add	r1, sp, #100	; 0x64
   b8c0a:	4620      	mov	r0, r4
   b8c0c:	f001 fa9c 	bl	ba148 <__d2b>
   b8c10:	ec4b ab18 	vmov	d8, sl, fp
   b8c14:	9018      	str	r0, [sp, #96]	; 0x60
   b8c16:	2800      	cmp	r0, #0
   b8c18:	f43f aef6 	beq.w	b8a08 <_strtod_l+0x490>
   b8c1c:	2101      	movs	r1, #1
   b8c1e:	4620      	mov	r0, r4
   b8c20:	f000 ffe6 	bl	b9bf0 <__i2b>
   b8c24:	4606      	mov	r6, r0
   b8c26:	2800      	cmp	r0, #0
   b8c28:	f43f aeee 	beq.w	b8a08 <_strtod_l+0x490>
   b8c2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8c2e:	9904      	ldr	r1, [sp, #16]
   b8c30:	2b00      	cmp	r3, #0
   b8c32:	bfab      	itete	ge
   b8c34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8c36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8c38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8c3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8c3e:	bfac      	ite	ge
   b8c40:	eb03 0902 	addge.w	r9, r3, r2
   b8c44:	1ad7      	sublt	r7, r2, r3
   b8c46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8c48:	eba3 0801 	sub.w	r8, r3, r1
   b8c4c:	4490      	add	r8, r2
   b8c4e:	4ba1      	ldr	r3, [pc, #644]	; (b8ed4 <_strtod_l+0x95c>)
   b8c50:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8c54:	4598      	cmp	r8, r3
   b8c56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b8c5a:	f280 80c7 	bge.w	b8dec <_strtod_l+0x874>
   b8c5e:	eba3 0308 	sub.w	r3, r3, r8
   b8c62:	2b1f      	cmp	r3, #31
   b8c64:	eba2 0203 	sub.w	r2, r2, r3
   b8c68:	f04f 0101 	mov.w	r1, #1
   b8c6c:	f300 80b1 	bgt.w	b8dd2 <_strtod_l+0x85a>
   b8c70:	fa01 f303 	lsl.w	r3, r1, r3
   b8c74:	930d      	str	r3, [sp, #52]	; 0x34
   b8c76:	2300      	movs	r3, #0
   b8c78:	9308      	str	r3, [sp, #32]
   b8c7a:	eb09 0802 	add.w	r8, r9, r2
   b8c7e:	9b04      	ldr	r3, [sp, #16]
   b8c80:	45c1      	cmp	r9, r8
   b8c82:	4417      	add	r7, r2
   b8c84:	441f      	add	r7, r3
   b8c86:	464b      	mov	r3, r9
   b8c88:	bfa8      	it	ge
   b8c8a:	4643      	movge	r3, r8
   b8c8c:	42bb      	cmp	r3, r7
   b8c8e:	bfa8      	it	ge
   b8c90:	463b      	movge	r3, r7
   b8c92:	2b00      	cmp	r3, #0
   b8c94:	bfc2      	ittt	gt
   b8c96:	eba8 0803 	subgt.w	r8, r8, r3
   b8c9a:	1aff      	subgt	r7, r7, r3
   b8c9c:	eba9 0903 	subgt.w	r9, r9, r3
   b8ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8ca2:	2b00      	cmp	r3, #0
   b8ca4:	dd17      	ble.n	b8cd6 <_strtod_l+0x75e>
   b8ca6:	4631      	mov	r1, r6
   b8ca8:	461a      	mov	r2, r3
   b8caa:	4620      	mov	r0, r4
   b8cac:	f001 f860 	bl	b9d70 <__pow5mult>
   b8cb0:	4606      	mov	r6, r0
   b8cb2:	2800      	cmp	r0, #0
   b8cb4:	f43f aea8 	beq.w	b8a08 <_strtod_l+0x490>
   b8cb8:	4601      	mov	r1, r0
   b8cba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8cbc:	4620      	mov	r0, r4
   b8cbe:	f000 ffad 	bl	b9c1c <__multiply>
   b8cc2:	900b      	str	r0, [sp, #44]	; 0x2c
   b8cc4:	2800      	cmp	r0, #0
   b8cc6:	f43f ae9f 	beq.w	b8a08 <_strtod_l+0x490>
   b8cca:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8ccc:	4620      	mov	r0, r4
   b8cce:	f000 fe8d 	bl	b99ec <_Bfree>
   b8cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8cd4:	9318      	str	r3, [sp, #96]	; 0x60
   b8cd6:	f1b8 0f00 	cmp.w	r8, #0
   b8cda:	f300 808c 	bgt.w	b8df6 <_strtod_l+0x87e>
   b8cde:	9b06      	ldr	r3, [sp, #24]
   b8ce0:	2b00      	cmp	r3, #0
   b8ce2:	dd08      	ble.n	b8cf6 <_strtod_l+0x77e>
   b8ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8ce6:	9905      	ldr	r1, [sp, #20]
   b8ce8:	4620      	mov	r0, r4
   b8cea:	f001 f841 	bl	b9d70 <__pow5mult>
   b8cee:	9005      	str	r0, [sp, #20]
   b8cf0:	2800      	cmp	r0, #0
   b8cf2:	f43f ae89 	beq.w	b8a08 <_strtod_l+0x490>
   b8cf6:	2f00      	cmp	r7, #0
   b8cf8:	dd08      	ble.n	b8d0c <_strtod_l+0x794>
   b8cfa:	9905      	ldr	r1, [sp, #20]
   b8cfc:	463a      	mov	r2, r7
   b8cfe:	4620      	mov	r0, r4
   b8d00:	f001 f890 	bl	b9e24 <__lshift>
   b8d04:	9005      	str	r0, [sp, #20]
   b8d06:	2800      	cmp	r0, #0
   b8d08:	f43f ae7e 	beq.w	b8a08 <_strtod_l+0x490>
   b8d0c:	f1b9 0f00 	cmp.w	r9, #0
   b8d10:	dd08      	ble.n	b8d24 <_strtod_l+0x7ac>
   b8d12:	4631      	mov	r1, r6
   b8d14:	464a      	mov	r2, r9
   b8d16:	4620      	mov	r0, r4
   b8d18:	f001 f884 	bl	b9e24 <__lshift>
   b8d1c:	4606      	mov	r6, r0
   b8d1e:	2800      	cmp	r0, #0
   b8d20:	f43f ae72 	beq.w	b8a08 <_strtod_l+0x490>
   b8d24:	9a05      	ldr	r2, [sp, #20]
   b8d26:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8d28:	4620      	mov	r0, r4
   b8d2a:	f001 f907 	bl	b9f3c <__mdiff>
   b8d2e:	4605      	mov	r5, r0
   b8d30:	2800      	cmp	r0, #0
   b8d32:	f43f ae69 	beq.w	b8a08 <_strtod_l+0x490>
   b8d36:	68c3      	ldr	r3, [r0, #12]
   b8d38:	930b      	str	r3, [sp, #44]	; 0x2c
   b8d3a:	2300      	movs	r3, #0
   b8d3c:	60c3      	str	r3, [r0, #12]
   b8d3e:	4631      	mov	r1, r6
   b8d40:	f001 f8e0 	bl	b9f04 <__mcmp>
   b8d44:	2800      	cmp	r0, #0
   b8d46:	da60      	bge.n	b8e0a <_strtod_l+0x892>
   b8d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8d4a:	ea53 030a 	orrs.w	r3, r3, sl
   b8d4e:	f040 8082 	bne.w	b8e56 <_strtod_l+0x8de>
   b8d52:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8d56:	2b00      	cmp	r3, #0
   b8d58:	d17d      	bne.n	b8e56 <_strtod_l+0x8de>
   b8d5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8d5e:	0d1b      	lsrs	r3, r3, #20
   b8d60:	051b      	lsls	r3, r3, #20
   b8d62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8d66:	d976      	bls.n	b8e56 <_strtod_l+0x8de>
   b8d68:	696b      	ldr	r3, [r5, #20]
   b8d6a:	b913      	cbnz	r3, b8d72 <_strtod_l+0x7fa>
   b8d6c:	692b      	ldr	r3, [r5, #16]
   b8d6e:	2b01      	cmp	r3, #1
   b8d70:	dd71      	ble.n	b8e56 <_strtod_l+0x8de>
   b8d72:	4629      	mov	r1, r5
   b8d74:	2201      	movs	r2, #1
   b8d76:	4620      	mov	r0, r4
   b8d78:	f001 f854 	bl	b9e24 <__lshift>
   b8d7c:	4631      	mov	r1, r6
   b8d7e:	4605      	mov	r5, r0
   b8d80:	f001 f8c0 	bl	b9f04 <__mcmp>
   b8d84:	2800      	cmp	r0, #0
   b8d86:	dd66      	ble.n	b8e56 <_strtod_l+0x8de>
   b8d88:	9904      	ldr	r1, [sp, #16]
   b8d8a:	4a53      	ldr	r2, [pc, #332]	; (b8ed8 <_strtod_l+0x960>)
   b8d8c:	465b      	mov	r3, fp
   b8d8e:	2900      	cmp	r1, #0
   b8d90:	f000 8081 	beq.w	b8e96 <_strtod_l+0x91e>
   b8d94:	ea02 010b 	and.w	r1, r2, fp
   b8d98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b8d9c:	dc7b      	bgt.n	b8e96 <_strtod_l+0x91e>
   b8d9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8da2:	f77f aea9 	ble.w	b8af8 <_strtod_l+0x580>
   b8da6:	4b4d      	ldr	r3, [pc, #308]	; (b8edc <_strtod_l+0x964>)
   b8da8:	4650      	mov	r0, sl
   b8daa:	4659      	mov	r1, fp
   b8dac:	2200      	movs	r2, #0
   b8dae:	f7fe ffeb 	bl	b7d88 <__aeabi_dmul>
   b8db2:	460b      	mov	r3, r1
   b8db4:	4303      	orrs	r3, r0
   b8db6:	bf08      	it	eq
   b8db8:	2322      	moveq	r3, #34	; 0x22
   b8dba:	4682      	mov	sl, r0
   b8dbc:	468b      	mov	fp, r1
   b8dbe:	bf08      	it	eq
   b8dc0:	6023      	streq	r3, [r4, #0]
   b8dc2:	e62b      	b.n	b8a1c <_strtod_l+0x4a4>
   b8dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8dc8:	fa02 f303 	lsl.w	r3, r2, r3
   b8dcc:	ea03 0a0a 	and.w	sl, r3, sl
   b8dd0:	e6e3      	b.n	b8b9a <_strtod_l+0x622>
   b8dd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8dd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b8dda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b8dde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8de2:	fa01 f308 	lsl.w	r3, r1, r8
   b8de6:	9308      	str	r3, [sp, #32]
   b8de8:	910d      	str	r1, [sp, #52]	; 0x34
   b8dea:	e746      	b.n	b8c7a <_strtod_l+0x702>
   b8dec:	2300      	movs	r3, #0
   b8dee:	9308      	str	r3, [sp, #32]
   b8df0:	2301      	movs	r3, #1
   b8df2:	930d      	str	r3, [sp, #52]	; 0x34
   b8df4:	e741      	b.n	b8c7a <_strtod_l+0x702>
   b8df6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8df8:	4642      	mov	r2, r8
   b8dfa:	4620      	mov	r0, r4
   b8dfc:	f001 f812 	bl	b9e24 <__lshift>
   b8e00:	9018      	str	r0, [sp, #96]	; 0x60
   b8e02:	2800      	cmp	r0, #0
   b8e04:	f47f af6b 	bne.w	b8cde <_strtod_l+0x766>
   b8e08:	e5fe      	b.n	b8a08 <_strtod_l+0x490>
   b8e0a:	465f      	mov	r7, fp
   b8e0c:	d16e      	bne.n	b8eec <_strtod_l+0x974>
   b8e0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8e10:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8e14:	b342      	cbz	r2, b8e68 <_strtod_l+0x8f0>
   b8e16:	4a32      	ldr	r2, [pc, #200]	; (b8ee0 <_strtod_l+0x968>)
   b8e18:	4293      	cmp	r3, r2
   b8e1a:	d128      	bne.n	b8e6e <_strtod_l+0x8f6>
   b8e1c:	9b04      	ldr	r3, [sp, #16]
   b8e1e:	4651      	mov	r1, sl
   b8e20:	b1eb      	cbz	r3, b8e5e <_strtod_l+0x8e6>
   b8e22:	4b2d      	ldr	r3, [pc, #180]	; (b8ed8 <_strtod_l+0x960>)
   b8e24:	403b      	ands	r3, r7
   b8e26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8e2e:	d819      	bhi.n	b8e64 <_strtod_l+0x8ec>
   b8e30:	0d1b      	lsrs	r3, r3, #20
   b8e32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8e36:	fa02 f303 	lsl.w	r3, r2, r3
   b8e3a:	4299      	cmp	r1, r3
   b8e3c:	d117      	bne.n	b8e6e <_strtod_l+0x8f6>
   b8e3e:	4b29      	ldr	r3, [pc, #164]	; (b8ee4 <_strtod_l+0x96c>)
   b8e40:	429f      	cmp	r7, r3
   b8e42:	d102      	bne.n	b8e4a <_strtod_l+0x8d2>
   b8e44:	3101      	adds	r1, #1
   b8e46:	f43f addf 	beq.w	b8a08 <_strtod_l+0x490>
   b8e4a:	4b23      	ldr	r3, [pc, #140]	; (b8ed8 <_strtod_l+0x960>)
   b8e4c:	403b      	ands	r3, r7
   b8e4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8e52:	f04f 0a00 	mov.w	sl, #0
   b8e56:	9b04      	ldr	r3, [sp, #16]
   b8e58:	2b00      	cmp	r3, #0
   b8e5a:	d1a4      	bne.n	b8da6 <_strtod_l+0x82e>
   b8e5c:	e5de      	b.n	b8a1c <_strtod_l+0x4a4>
   b8e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8e62:	e7ea      	b.n	b8e3a <_strtod_l+0x8c2>
   b8e64:	4613      	mov	r3, r2
   b8e66:	e7e8      	b.n	b8e3a <_strtod_l+0x8c2>
   b8e68:	ea53 030a 	orrs.w	r3, r3, sl
   b8e6c:	d08c      	beq.n	b8d88 <_strtod_l+0x810>
   b8e6e:	9b08      	ldr	r3, [sp, #32]
   b8e70:	b1db      	cbz	r3, b8eaa <_strtod_l+0x932>
   b8e72:	423b      	tst	r3, r7
   b8e74:	d0ef      	beq.n	b8e56 <_strtod_l+0x8de>
   b8e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8e78:	9a04      	ldr	r2, [sp, #16]
   b8e7a:	4650      	mov	r0, sl
   b8e7c:	4659      	mov	r1, fp
   b8e7e:	b1c3      	cbz	r3, b8eb2 <_strtod_l+0x93a>
   b8e80:	f7ff fb5c 	bl	b853c <sulp>
   b8e84:	4602      	mov	r2, r0
   b8e86:	460b      	mov	r3, r1
   b8e88:	ec51 0b18 	vmov	r0, r1, d8
   b8e8c:	f7fe fdc6 	bl	b7a1c <__adddf3>
   b8e90:	4682      	mov	sl, r0
   b8e92:	468b      	mov	fp, r1
   b8e94:	e7df      	b.n	b8e56 <_strtod_l+0x8de>
   b8e96:	4013      	ands	r3, r2
   b8e98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b8e9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8ea0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8ea4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8ea8:	e7d5      	b.n	b8e56 <_strtod_l+0x8de>
   b8eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8eac:	ea13 0f0a 	tst.w	r3, sl
   b8eb0:	e7e0      	b.n	b8e74 <_strtod_l+0x8fc>
   b8eb2:	f7ff fb43 	bl	b853c <sulp>
   b8eb6:	4602      	mov	r2, r0
   b8eb8:	460b      	mov	r3, r1
   b8eba:	ec51 0b18 	vmov	r0, r1, d8
   b8ebe:	f7fe fdab 	bl	b7a18 <__aeabi_dsub>
   b8ec2:	2200      	movs	r2, #0
   b8ec4:	2300      	movs	r3, #0
   b8ec6:	4682      	mov	sl, r0
   b8ec8:	468b      	mov	fp, r1
   b8eca:	f7ff f9c5 	bl	b8258 <__aeabi_dcmpeq>
   b8ece:	2800      	cmp	r0, #0
   b8ed0:	d0c1      	beq.n	b8e56 <_strtod_l+0x8de>
   b8ed2:	e611      	b.n	b8af8 <_strtod_l+0x580>
   b8ed4:	fffffc02 	.word	0xfffffc02
   b8ed8:	7ff00000 	.word	0x7ff00000
   b8edc:	39500000 	.word	0x39500000
   b8ee0:	000fffff 	.word	0x000fffff
   b8ee4:	7fefffff 	.word	0x7fefffff
   b8ee8:	000bb2c0 	.word	0x000bb2c0
   b8eec:	4631      	mov	r1, r6
   b8eee:	4628      	mov	r0, r5
   b8ef0:	f001 f986 	bl	ba200 <__ratio>
   b8ef4:	ec59 8b10 	vmov	r8, r9, d0
   b8ef8:	ee10 0a10 	vmov	r0, s0
   b8efc:	2200      	movs	r2, #0
   b8efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8f02:	4649      	mov	r1, r9
   b8f04:	f7ff f9bc 	bl	b8280 <__aeabi_dcmple>
   b8f08:	2800      	cmp	r0, #0
   b8f0a:	d07a      	beq.n	b9002 <_strtod_l+0xa8a>
   b8f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8f0e:	2b00      	cmp	r3, #0
   b8f10:	d04a      	beq.n	b8fa8 <_strtod_l+0xa30>
   b8f12:	4b95      	ldr	r3, [pc, #596]	; (b9168 <_strtod_l+0xbf0>)
   b8f14:	2200      	movs	r2, #0
   b8f16:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8f1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9168 <_strtod_l+0xbf0>
   b8f1e:	f04f 0800 	mov.w	r8, #0
   b8f22:	4b92      	ldr	r3, [pc, #584]	; (b916c <_strtod_l+0xbf4>)
   b8f24:	403b      	ands	r3, r7
   b8f26:	930d      	str	r3, [sp, #52]	; 0x34
   b8f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8f2a:	4b91      	ldr	r3, [pc, #580]	; (b9170 <_strtod_l+0xbf8>)
   b8f2c:	429a      	cmp	r2, r3
   b8f2e:	f040 80b0 	bne.w	b9092 <_strtod_l+0xb1a>
   b8f32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8f36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b8f3a:	ec4b ab10 	vmov	d0, sl, fp
   b8f3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8f42:	f001 f885 	bl	ba050 <__ulp>
   b8f46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8f4a:	ec53 2b10 	vmov	r2, r3, d0
   b8f4e:	f7fe ff1b 	bl	b7d88 <__aeabi_dmul>
   b8f52:	4652      	mov	r2, sl
   b8f54:	465b      	mov	r3, fp
   b8f56:	f7fe fd61 	bl	b7a1c <__adddf3>
   b8f5a:	460b      	mov	r3, r1
   b8f5c:	4983      	ldr	r1, [pc, #524]	; (b916c <_strtod_l+0xbf4>)
   b8f5e:	4a85      	ldr	r2, [pc, #532]	; (b9174 <_strtod_l+0xbfc>)
   b8f60:	4019      	ands	r1, r3
   b8f62:	4291      	cmp	r1, r2
   b8f64:	4682      	mov	sl, r0
   b8f66:	d960      	bls.n	b902a <_strtod_l+0xab2>
   b8f68:	ee18 3a90 	vmov	r3, s17
   b8f6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8f70:	4293      	cmp	r3, r2
   b8f72:	d104      	bne.n	b8f7e <_strtod_l+0xa06>
   b8f74:	ee18 3a10 	vmov	r3, s16
   b8f78:	3301      	adds	r3, #1
   b8f7a:	f43f ad45 	beq.w	b8a08 <_strtod_l+0x490>
   b8f7e:	f8df b200 	ldr.w	fp, [pc, #512]	; b9180 <_strtod_l+0xc08>
   b8f82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8f86:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8f88:	4620      	mov	r0, r4
   b8f8a:	f000 fd2f 	bl	b99ec <_Bfree>
   b8f8e:	9905      	ldr	r1, [sp, #20]
   b8f90:	4620      	mov	r0, r4
   b8f92:	f000 fd2b 	bl	b99ec <_Bfree>
   b8f96:	4631      	mov	r1, r6
   b8f98:	4620      	mov	r0, r4
   b8f9a:	f000 fd27 	bl	b99ec <_Bfree>
   b8f9e:	4629      	mov	r1, r5
   b8fa0:	4620      	mov	r0, r4
   b8fa2:	f000 fd23 	bl	b99ec <_Bfree>
   b8fa6:	e61a      	b.n	b8bde <_strtod_l+0x666>
   b8fa8:	f1ba 0f00 	cmp.w	sl, #0
   b8fac:	d11b      	bne.n	b8fe6 <_strtod_l+0xa6e>
   b8fae:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8fb2:	b9f3      	cbnz	r3, b8ff2 <_strtod_l+0xa7a>
   b8fb4:	4b6c      	ldr	r3, [pc, #432]	; (b9168 <_strtod_l+0xbf0>)
   b8fb6:	2200      	movs	r2, #0
   b8fb8:	4640      	mov	r0, r8
   b8fba:	4649      	mov	r1, r9
   b8fbc:	f7ff f956 	bl	b826c <__aeabi_dcmplt>
   b8fc0:	b9d0      	cbnz	r0, b8ff8 <_strtod_l+0xa80>
   b8fc2:	4640      	mov	r0, r8
   b8fc4:	4649      	mov	r1, r9
   b8fc6:	4b6c      	ldr	r3, [pc, #432]	; (b9178 <_strtod_l+0xc00>)
   b8fc8:	2200      	movs	r2, #0
   b8fca:	f7fe fedd 	bl	b7d88 <__aeabi_dmul>
   b8fce:	4680      	mov	r8, r0
   b8fd0:	4689      	mov	r9, r1
   b8fd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b8fd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b8fda:	9315      	str	r3, [sp, #84]	; 0x54
   b8fdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b8fe0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8fe4:	e79d      	b.n	b8f22 <_strtod_l+0x9aa>
   b8fe6:	f1ba 0f01 	cmp.w	sl, #1
   b8fea:	d102      	bne.n	b8ff2 <_strtod_l+0xa7a>
   b8fec:	2f00      	cmp	r7, #0
   b8fee:	f43f ad83 	beq.w	b8af8 <_strtod_l+0x580>
   b8ff2:	4b62      	ldr	r3, [pc, #392]	; (b917c <_strtod_l+0xc04>)
   b8ff4:	2200      	movs	r2, #0
   b8ff6:	e78e      	b.n	b8f16 <_strtod_l+0x99e>
   b8ff8:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9178 <_strtod_l+0xc00>
   b8ffc:	f04f 0800 	mov.w	r8, #0
   b9000:	e7e7      	b.n	b8fd2 <_strtod_l+0xa5a>
   b9002:	4b5d      	ldr	r3, [pc, #372]	; (b9178 <_strtod_l+0xc00>)
   b9004:	4640      	mov	r0, r8
   b9006:	4649      	mov	r1, r9
   b9008:	2200      	movs	r2, #0
   b900a:	f7fe febd 	bl	b7d88 <__aeabi_dmul>
   b900e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9010:	4680      	mov	r8, r0
   b9012:	4689      	mov	r9, r1
   b9014:	b933      	cbnz	r3, b9024 <_strtod_l+0xaac>
   b9016:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b901a:	900e      	str	r0, [sp, #56]	; 0x38
   b901c:	930f      	str	r3, [sp, #60]	; 0x3c
   b901e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9022:	e7dd      	b.n	b8fe0 <_strtod_l+0xa68>
   b9024:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9028:	e7f9      	b.n	b901e <_strtod_l+0xaa6>
   b902a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b902e:	9b04      	ldr	r3, [sp, #16]
   b9030:	2b00      	cmp	r3, #0
   b9032:	d1a8      	bne.n	b8f86 <_strtod_l+0xa0e>
   b9034:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b903a:	0d1b      	lsrs	r3, r3, #20
   b903c:	051b      	lsls	r3, r3, #20
   b903e:	429a      	cmp	r2, r3
   b9040:	d1a1      	bne.n	b8f86 <_strtod_l+0xa0e>
   b9042:	4640      	mov	r0, r8
   b9044:	4649      	mov	r1, r9
   b9046:	f001 f979 	bl	ba33c <__aeabi_d2lz>
   b904a:	f7fe fe6f 	bl	b7d2c <__aeabi_l2d>
   b904e:	4602      	mov	r2, r0
   b9050:	460b      	mov	r3, r1
   b9052:	4640      	mov	r0, r8
   b9054:	4649      	mov	r1, r9
   b9056:	f7fe fcdf 	bl	b7a18 <__aeabi_dsub>
   b905a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b905c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9060:	ea43 030a 	orr.w	r3, r3, sl
   b9064:	4313      	orrs	r3, r2
   b9066:	4680      	mov	r8, r0
   b9068:	4689      	mov	r9, r1
   b906a:	d055      	beq.n	b9118 <_strtod_l+0xba0>
   b906c:	a336      	add	r3, pc, #216	; (adr r3, b9148 <_strtod_l+0xbd0>)
   b906e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9072:	f7ff f8fb 	bl	b826c <__aeabi_dcmplt>
   b9076:	2800      	cmp	r0, #0
   b9078:	f47f acd0 	bne.w	b8a1c <_strtod_l+0x4a4>
   b907c:	a334      	add	r3, pc, #208	; (adr r3, b9150 <_strtod_l+0xbd8>)
   b907e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9082:	4640      	mov	r0, r8
   b9084:	4649      	mov	r1, r9
   b9086:	f7ff f90f 	bl	b82a8 <__aeabi_dcmpgt>
   b908a:	2800      	cmp	r0, #0
   b908c:	f43f af7b 	beq.w	b8f86 <_strtod_l+0xa0e>
   b9090:	e4c4      	b.n	b8a1c <_strtod_l+0x4a4>
   b9092:	9b04      	ldr	r3, [sp, #16]
   b9094:	b333      	cbz	r3, b90e4 <_strtod_l+0xb6c>
   b9096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9098:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b909c:	d822      	bhi.n	b90e4 <_strtod_l+0xb6c>
   b909e:	a32e      	add	r3, pc, #184	; (adr r3, b9158 <_strtod_l+0xbe0>)
   b90a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90a4:	4640      	mov	r0, r8
   b90a6:	4649      	mov	r1, r9
   b90a8:	f7ff f8ea 	bl	b8280 <__aeabi_dcmple>
   b90ac:	b1a0      	cbz	r0, b90d8 <_strtod_l+0xb60>
   b90ae:	4649      	mov	r1, r9
   b90b0:	4640      	mov	r0, r8
   b90b2:	f7ff f941 	bl	b8338 <__aeabi_d2uiz>
   b90b6:	2801      	cmp	r0, #1
   b90b8:	bf38      	it	cc
   b90ba:	2001      	movcc	r0, #1
   b90bc:	f7fe fdea 	bl	b7c94 <__aeabi_ui2d>
   b90c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b90c2:	4680      	mov	r8, r0
   b90c4:	4689      	mov	r9, r1
   b90c6:	bb23      	cbnz	r3, b9112 <_strtod_l+0xb9a>
   b90c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b90cc:	9010      	str	r0, [sp, #64]	; 0x40
   b90ce:	9311      	str	r3, [sp, #68]	; 0x44
   b90d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b90d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b90d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b90da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b90dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b90e0:	1a9b      	subs	r3, r3, r2
   b90e2:	9309      	str	r3, [sp, #36]	; 0x24
   b90e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b90e8:	eeb0 0a48 	vmov.f32	s0, s16
   b90ec:	eef0 0a68 	vmov.f32	s1, s17
   b90f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b90f4:	f000 ffac 	bl	ba050 <__ulp>
   b90f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b90fc:	ec53 2b10 	vmov	r2, r3, d0
   b9100:	f7fe fe42 	bl	b7d88 <__aeabi_dmul>
   b9104:	ec53 2b18 	vmov	r2, r3, d8
   b9108:	f7fe fc88 	bl	b7a1c <__adddf3>
   b910c:	4682      	mov	sl, r0
   b910e:	468b      	mov	fp, r1
   b9110:	e78d      	b.n	b902e <_strtod_l+0xab6>
   b9112:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9116:	e7db      	b.n	b90d0 <_strtod_l+0xb58>
   b9118:	a311      	add	r3, pc, #68	; (adr r3, b9160 <_strtod_l+0xbe8>)
   b911a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b911e:	f7ff f8a5 	bl	b826c <__aeabi_dcmplt>
   b9122:	e7b2      	b.n	b908a <_strtod_l+0xb12>
   b9124:	2300      	movs	r3, #0
   b9126:	930a      	str	r3, [sp, #40]	; 0x28
   b9128:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b912a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b912c:	6013      	str	r3, [r2, #0]
   b912e:	f7ff ba6b 	b.w	b8608 <_strtod_l+0x90>
   b9132:	2a65      	cmp	r2, #101	; 0x65
   b9134:	f43f ab5f 	beq.w	b87f6 <_strtod_l+0x27e>
   b9138:	2a45      	cmp	r2, #69	; 0x45
   b913a:	f43f ab5c 	beq.w	b87f6 <_strtod_l+0x27e>
   b913e:	2301      	movs	r3, #1
   b9140:	f7ff bb94 	b.w	b886c <_strtod_l+0x2f4>
   b9144:	f3af 8000 	nop.w
   b9148:	94a03595 	.word	0x94a03595
   b914c:	3fdfffff 	.word	0x3fdfffff
   b9150:	35afe535 	.word	0x35afe535
   b9154:	3fe00000 	.word	0x3fe00000
   b9158:	ffc00000 	.word	0xffc00000
   b915c:	41dfffff 	.word	0x41dfffff
   b9160:	94a03595 	.word	0x94a03595
   b9164:	3fcfffff 	.word	0x3fcfffff
   b9168:	3ff00000 	.word	0x3ff00000
   b916c:	7ff00000 	.word	0x7ff00000
   b9170:	7fe00000 	.word	0x7fe00000
   b9174:	7c9fffff 	.word	0x7c9fffff
   b9178:	3fe00000 	.word	0x3fe00000
   b917c:	bff00000 	.word	0xbff00000
   b9180:	7fefffff 	.word	0x7fefffff

000b9184 <strtod>:
   b9184:	460a      	mov	r2, r1
   b9186:	4601      	mov	r1, r0
   b9188:	4802      	ldr	r0, [pc, #8]	; (b9194 <strtod+0x10>)
   b918a:	4b03      	ldr	r3, [pc, #12]	; (b9198 <strtod+0x14>)
   b918c:	6800      	ldr	r0, [r0, #0]
   b918e:	f7ff b9f3 	b.w	b8578 <_strtod_l>
   b9192:	bf00      	nop
   b9194:	2003e3fc 	.word	0x2003e3fc
   b9198:	2003e468 	.word	0x2003e468

000b919c <__register_exitproc>:
   b919c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b91a0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b925c <__register_exitproc+0xc0>
   b91a4:	4606      	mov	r6, r0
   b91a6:	f8d8 0000 	ldr.w	r0, [r8]
   b91aa:	461f      	mov	r7, r3
   b91ac:	460d      	mov	r5, r1
   b91ae:	4691      	mov	r9, r2
   b91b0:	f000 fbc6 	bl	b9940 <__retarget_lock_acquire_recursive>
   b91b4:	4b25      	ldr	r3, [pc, #148]	; (b924c <__register_exitproc+0xb0>)
   b91b6:	681c      	ldr	r4, [r3, #0]
   b91b8:	b934      	cbnz	r4, b91c8 <__register_exitproc+0x2c>
   b91ba:	4c25      	ldr	r4, [pc, #148]	; (b9250 <__register_exitproc+0xb4>)
   b91bc:	601c      	str	r4, [r3, #0]
   b91be:	4b25      	ldr	r3, [pc, #148]	; (b9254 <__register_exitproc+0xb8>)
   b91c0:	b113      	cbz	r3, b91c8 <__register_exitproc+0x2c>
   b91c2:	681b      	ldr	r3, [r3, #0]
   b91c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b91c8:	6863      	ldr	r3, [r4, #4]
   b91ca:	2b1f      	cmp	r3, #31
   b91cc:	dd07      	ble.n	b91de <__register_exitproc+0x42>
   b91ce:	f8d8 0000 	ldr.w	r0, [r8]
   b91d2:	f000 fbb7 	bl	b9944 <__retarget_lock_release_recursive>
   b91d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b91da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b91de:	b34e      	cbz	r6, b9234 <__register_exitproc+0x98>
   b91e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b91e4:	b988      	cbnz	r0, b920a <__register_exitproc+0x6e>
   b91e6:	4b1c      	ldr	r3, [pc, #112]	; (b9258 <__register_exitproc+0xbc>)
   b91e8:	b923      	cbnz	r3, b91f4 <__register_exitproc+0x58>
   b91ea:	f8d8 0000 	ldr.w	r0, [r8]
   b91ee:	f000 fba8 	bl	b9942 <__retarget_lock_release>
   b91f2:	e7f0      	b.n	b91d6 <__register_exitproc+0x3a>
   b91f4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b91f8:	f7fd f882 	bl	b6300 <malloc>
   b91fc:	2800      	cmp	r0, #0
   b91fe:	d0f4      	beq.n	b91ea <__register_exitproc+0x4e>
   b9200:	2300      	movs	r3, #0
   b9202:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9206:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b920a:	6863      	ldr	r3, [r4, #4]
   b920c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9210:	2201      	movs	r2, #1
   b9212:	409a      	lsls	r2, r3
   b9214:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9218:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b921c:	4313      	orrs	r3, r2
   b921e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9222:	2e02      	cmp	r6, #2
   b9224:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9228:	bf02      	ittt	eq
   b922a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b922e:	4313      	orreq	r3, r2
   b9230:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9234:	6863      	ldr	r3, [r4, #4]
   b9236:	f8d8 0000 	ldr.w	r0, [r8]
   b923a:	1c5a      	adds	r2, r3, #1
   b923c:	3302      	adds	r3, #2
   b923e:	6062      	str	r2, [r4, #4]
   b9240:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9244:	f000 fb7e 	bl	b9944 <__retarget_lock_release_recursive>
   b9248:	2000      	movs	r0, #0
   b924a:	e7c6      	b.n	b91da <__register_exitproc+0x3e>
   b924c:	2003e7ec 	.word	0x2003e7ec
   b9250:	2003e760 	.word	0x2003e760
   b9254:	00000000 	.word	0x00000000
   b9258:	000b6301 	.word	0x000b6301
   b925c:	2003e460 	.word	0x2003e460

000b9260 <rshift>:
   b9260:	6903      	ldr	r3, [r0, #16]
   b9262:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b9266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b926a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b926e:	f100 0414 	add.w	r4, r0, #20
   b9272:	dd45      	ble.n	b9300 <rshift+0xa0>
   b9274:	f011 011f 	ands.w	r1, r1, #31
   b9278:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b927c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9280:	d10c      	bne.n	b929c <rshift+0x3c>
   b9282:	f100 0710 	add.w	r7, r0, #16
   b9286:	4629      	mov	r1, r5
   b9288:	42b1      	cmp	r1, r6
   b928a:	d334      	bcc.n	b92f6 <rshift+0x96>
   b928c:	1a9b      	subs	r3, r3, r2
   b928e:	009b      	lsls	r3, r3, #2
   b9290:	1eea      	subs	r2, r5, #3
   b9292:	4296      	cmp	r6, r2
   b9294:	bf38      	it	cc
   b9296:	2300      	movcc	r3, #0
   b9298:	4423      	add	r3, r4
   b929a:	e015      	b.n	b92c8 <rshift+0x68>
   b929c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b92a0:	f1c1 0820 	rsb	r8, r1, #32
   b92a4:	40cf      	lsrs	r7, r1
   b92a6:	f105 0e04 	add.w	lr, r5, #4
   b92aa:	46a1      	mov	r9, r4
   b92ac:	4576      	cmp	r6, lr
   b92ae:	46f4      	mov	ip, lr
   b92b0:	d815      	bhi.n	b92de <rshift+0x7e>
   b92b2:	1a9a      	subs	r2, r3, r2
   b92b4:	0092      	lsls	r2, r2, #2
   b92b6:	3a04      	subs	r2, #4
   b92b8:	3501      	adds	r5, #1
   b92ba:	42ae      	cmp	r6, r5
   b92bc:	bf38      	it	cc
   b92be:	2200      	movcc	r2, #0
   b92c0:	18a3      	adds	r3, r4, r2
   b92c2:	50a7      	str	r7, [r4, r2]
   b92c4:	b107      	cbz	r7, b92c8 <rshift+0x68>
   b92c6:	3304      	adds	r3, #4
   b92c8:	1b1a      	subs	r2, r3, r4
   b92ca:	42a3      	cmp	r3, r4
   b92cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b92d0:	bf08      	it	eq
   b92d2:	2300      	moveq	r3, #0
   b92d4:	6102      	str	r2, [r0, #16]
   b92d6:	bf08      	it	eq
   b92d8:	6143      	streq	r3, [r0, #20]
   b92da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b92de:	f8dc c000 	ldr.w	ip, [ip]
   b92e2:	fa0c fc08 	lsl.w	ip, ip, r8
   b92e6:	ea4c 0707 	orr.w	r7, ip, r7
   b92ea:	f849 7b04 	str.w	r7, [r9], #4
   b92ee:	f85e 7b04 	ldr.w	r7, [lr], #4
   b92f2:	40cf      	lsrs	r7, r1
   b92f4:	e7da      	b.n	b92ac <rshift+0x4c>
   b92f6:	f851 cb04 	ldr.w	ip, [r1], #4
   b92fa:	f847 cf04 	str.w	ip, [r7, #4]!
   b92fe:	e7c3      	b.n	b9288 <rshift+0x28>
   b9300:	4623      	mov	r3, r4
   b9302:	e7e1      	b.n	b92c8 <rshift+0x68>

000b9304 <__hexdig_fun>:
   b9304:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9308:	2b09      	cmp	r3, #9
   b930a:	d802      	bhi.n	b9312 <__hexdig_fun+0xe>
   b930c:	3820      	subs	r0, #32
   b930e:	b2c0      	uxtb	r0, r0
   b9310:	4770      	bx	lr
   b9312:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9316:	2b05      	cmp	r3, #5
   b9318:	d801      	bhi.n	b931e <__hexdig_fun+0x1a>
   b931a:	3847      	subs	r0, #71	; 0x47
   b931c:	e7f7      	b.n	b930e <__hexdig_fun+0xa>
   b931e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9322:	2b05      	cmp	r3, #5
   b9324:	d801      	bhi.n	b932a <__hexdig_fun+0x26>
   b9326:	3827      	subs	r0, #39	; 0x27
   b9328:	e7f1      	b.n	b930e <__hexdig_fun+0xa>
   b932a:	2000      	movs	r0, #0
   b932c:	4770      	bx	lr
	...

000b9330 <__gethex>:
   b9330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9334:	ed2d 8b02 	vpush	{d8}
   b9338:	b089      	sub	sp, #36	; 0x24
   b933a:	ee08 0a10 	vmov	s16, r0
   b933e:	9304      	str	r3, [sp, #16]
   b9340:	4bb4      	ldr	r3, [pc, #720]	; (b9614 <__gethex+0x2e4>)
   b9342:	681b      	ldr	r3, [r3, #0]
   b9344:	9301      	str	r3, [sp, #4]
   b9346:	4618      	mov	r0, r3
   b9348:	468b      	mov	fp, r1
   b934a:	4690      	mov	r8, r2
   b934c:	f7ff f8da 	bl	b8504 <strlen>
   b9350:	9b01      	ldr	r3, [sp, #4]
   b9352:	f8db 2000 	ldr.w	r2, [fp]
   b9356:	4403      	add	r3, r0
   b9358:	4682      	mov	sl, r0
   b935a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b935e:	9305      	str	r3, [sp, #20]
   b9360:	1c93      	adds	r3, r2, #2
   b9362:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b9366:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b936a:	32fe      	adds	r2, #254	; 0xfe
   b936c:	18d1      	adds	r1, r2, r3
   b936e:	461f      	mov	r7, r3
   b9370:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9374:	9100      	str	r1, [sp, #0]
   b9376:	2830      	cmp	r0, #48	; 0x30
   b9378:	d0f8      	beq.n	b936c <__gethex+0x3c>
   b937a:	f7ff ffc3 	bl	b9304 <__hexdig_fun>
   b937e:	4604      	mov	r4, r0
   b9380:	2800      	cmp	r0, #0
   b9382:	d13a      	bne.n	b93fa <__gethex+0xca>
   b9384:	9901      	ldr	r1, [sp, #4]
   b9386:	4652      	mov	r2, sl
   b9388:	4638      	mov	r0, r7
   b938a:	f7ff f8c3 	bl	b8514 <strncmp>
   b938e:	4605      	mov	r5, r0
   b9390:	2800      	cmp	r0, #0
   b9392:	d168      	bne.n	b9466 <__gethex+0x136>
   b9394:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9398:	eb07 060a 	add.w	r6, r7, sl
   b939c:	f7ff ffb2 	bl	b9304 <__hexdig_fun>
   b93a0:	2800      	cmp	r0, #0
   b93a2:	d062      	beq.n	b946a <__gethex+0x13a>
   b93a4:	4633      	mov	r3, r6
   b93a6:	7818      	ldrb	r0, [r3, #0]
   b93a8:	2830      	cmp	r0, #48	; 0x30
   b93aa:	461f      	mov	r7, r3
   b93ac:	f103 0301 	add.w	r3, r3, #1
   b93b0:	d0f9      	beq.n	b93a6 <__gethex+0x76>
   b93b2:	f7ff ffa7 	bl	b9304 <__hexdig_fun>
   b93b6:	2301      	movs	r3, #1
   b93b8:	fab0 f480 	clz	r4, r0
   b93bc:	0964      	lsrs	r4, r4, #5
   b93be:	4635      	mov	r5, r6
   b93c0:	9300      	str	r3, [sp, #0]
   b93c2:	463a      	mov	r2, r7
   b93c4:	4616      	mov	r6, r2
   b93c6:	3201      	adds	r2, #1
   b93c8:	7830      	ldrb	r0, [r6, #0]
   b93ca:	f7ff ff9b 	bl	b9304 <__hexdig_fun>
   b93ce:	2800      	cmp	r0, #0
   b93d0:	d1f8      	bne.n	b93c4 <__gethex+0x94>
   b93d2:	9901      	ldr	r1, [sp, #4]
   b93d4:	4652      	mov	r2, sl
   b93d6:	4630      	mov	r0, r6
   b93d8:	f7ff f89c 	bl	b8514 <strncmp>
   b93dc:	b980      	cbnz	r0, b9400 <__gethex+0xd0>
   b93de:	b94d      	cbnz	r5, b93f4 <__gethex+0xc4>
   b93e0:	eb06 050a 	add.w	r5, r6, sl
   b93e4:	462a      	mov	r2, r5
   b93e6:	4616      	mov	r6, r2
   b93e8:	3201      	adds	r2, #1
   b93ea:	7830      	ldrb	r0, [r6, #0]
   b93ec:	f7ff ff8a 	bl	b9304 <__hexdig_fun>
   b93f0:	2800      	cmp	r0, #0
   b93f2:	d1f8      	bne.n	b93e6 <__gethex+0xb6>
   b93f4:	1bad      	subs	r5, r5, r6
   b93f6:	00ad      	lsls	r5, r5, #2
   b93f8:	e004      	b.n	b9404 <__gethex+0xd4>
   b93fa:	2400      	movs	r4, #0
   b93fc:	4625      	mov	r5, r4
   b93fe:	e7e0      	b.n	b93c2 <__gethex+0x92>
   b9400:	2d00      	cmp	r5, #0
   b9402:	d1f7      	bne.n	b93f4 <__gethex+0xc4>
   b9404:	7833      	ldrb	r3, [r6, #0]
   b9406:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b940a:	2b50      	cmp	r3, #80	; 0x50
   b940c:	d13b      	bne.n	b9486 <__gethex+0x156>
   b940e:	7873      	ldrb	r3, [r6, #1]
   b9410:	2b2b      	cmp	r3, #43	; 0x2b
   b9412:	d02c      	beq.n	b946e <__gethex+0x13e>
   b9414:	2b2d      	cmp	r3, #45	; 0x2d
   b9416:	d02e      	beq.n	b9476 <__gethex+0x146>
   b9418:	1c71      	adds	r1, r6, #1
   b941a:	f04f 0900 	mov.w	r9, #0
   b941e:	7808      	ldrb	r0, [r1, #0]
   b9420:	f7ff ff70 	bl	b9304 <__hexdig_fun>
   b9424:	1e43      	subs	r3, r0, #1
   b9426:	b2db      	uxtb	r3, r3
   b9428:	2b18      	cmp	r3, #24
   b942a:	d82c      	bhi.n	b9486 <__gethex+0x156>
   b942c:	f1a0 0210 	sub.w	r2, r0, #16
   b9430:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b9434:	f7ff ff66 	bl	b9304 <__hexdig_fun>
   b9438:	1e43      	subs	r3, r0, #1
   b943a:	b2db      	uxtb	r3, r3
   b943c:	2b18      	cmp	r3, #24
   b943e:	d91d      	bls.n	b947c <__gethex+0x14c>
   b9440:	f1b9 0f00 	cmp.w	r9, #0
   b9444:	d000      	beq.n	b9448 <__gethex+0x118>
   b9446:	4252      	negs	r2, r2
   b9448:	4415      	add	r5, r2
   b944a:	f8cb 1000 	str.w	r1, [fp]
   b944e:	b1e4      	cbz	r4, b948a <__gethex+0x15a>
   b9450:	9b00      	ldr	r3, [sp, #0]
   b9452:	2b00      	cmp	r3, #0
   b9454:	bf14      	ite	ne
   b9456:	2700      	movne	r7, #0
   b9458:	2706      	moveq	r7, #6
   b945a:	4638      	mov	r0, r7
   b945c:	b009      	add	sp, #36	; 0x24
   b945e:	ecbd 8b02 	vpop	{d8}
   b9462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9466:	463e      	mov	r6, r7
   b9468:	4625      	mov	r5, r4
   b946a:	2401      	movs	r4, #1
   b946c:	e7ca      	b.n	b9404 <__gethex+0xd4>
   b946e:	f04f 0900 	mov.w	r9, #0
   b9472:	1cb1      	adds	r1, r6, #2
   b9474:	e7d3      	b.n	b941e <__gethex+0xee>
   b9476:	f04f 0901 	mov.w	r9, #1
   b947a:	e7fa      	b.n	b9472 <__gethex+0x142>
   b947c:	230a      	movs	r3, #10
   b947e:	fb03 0202 	mla	r2, r3, r2, r0
   b9482:	3a10      	subs	r2, #16
   b9484:	e7d4      	b.n	b9430 <__gethex+0x100>
   b9486:	4631      	mov	r1, r6
   b9488:	e7df      	b.n	b944a <__gethex+0x11a>
   b948a:	1bf3      	subs	r3, r6, r7
   b948c:	3b01      	subs	r3, #1
   b948e:	4621      	mov	r1, r4
   b9490:	2b07      	cmp	r3, #7
   b9492:	dc0b      	bgt.n	b94ac <__gethex+0x17c>
   b9494:	ee18 0a10 	vmov	r0, s16
   b9498:	f000 fa68 	bl	b996c <_Balloc>
   b949c:	4604      	mov	r4, r0
   b949e:	b940      	cbnz	r0, b94b2 <__gethex+0x182>
   b94a0:	4b5d      	ldr	r3, [pc, #372]	; (b9618 <__gethex+0x2e8>)
   b94a2:	4602      	mov	r2, r0
   b94a4:	21de      	movs	r1, #222	; 0xde
   b94a6:	485d      	ldr	r0, [pc, #372]	; (b961c <__gethex+0x2ec>)
   b94a8:	f7fc ff5a 	bl	b6360 <__assert_func>
   b94ac:	3101      	adds	r1, #1
   b94ae:	105b      	asrs	r3, r3, #1
   b94b0:	e7ee      	b.n	b9490 <__gethex+0x160>
   b94b2:	f100 0914 	add.w	r9, r0, #20
   b94b6:	f04f 0b00 	mov.w	fp, #0
   b94ba:	f1ca 0301 	rsb	r3, sl, #1
   b94be:	f8cd 9008 	str.w	r9, [sp, #8]
   b94c2:	f8cd b000 	str.w	fp, [sp]
   b94c6:	9306      	str	r3, [sp, #24]
   b94c8:	42b7      	cmp	r7, r6
   b94ca:	d340      	bcc.n	b954e <__gethex+0x21e>
   b94cc:	9802      	ldr	r0, [sp, #8]
   b94ce:	9b00      	ldr	r3, [sp, #0]
   b94d0:	f840 3b04 	str.w	r3, [r0], #4
   b94d4:	eba0 0009 	sub.w	r0, r0, r9
   b94d8:	1080      	asrs	r0, r0, #2
   b94da:	0146      	lsls	r6, r0, #5
   b94dc:	6120      	str	r0, [r4, #16]
   b94de:	4618      	mov	r0, r3
   b94e0:	f000 fb36 	bl	b9b50 <__hi0bits>
   b94e4:	1a30      	subs	r0, r6, r0
   b94e6:	f8d8 6000 	ldr.w	r6, [r8]
   b94ea:	42b0      	cmp	r0, r6
   b94ec:	dd63      	ble.n	b95b6 <__gethex+0x286>
   b94ee:	1b87      	subs	r7, r0, r6
   b94f0:	4639      	mov	r1, r7
   b94f2:	4620      	mov	r0, r4
   b94f4:	f000 feda 	bl	ba2ac <__any_on>
   b94f8:	4682      	mov	sl, r0
   b94fa:	b1a8      	cbz	r0, b9528 <__gethex+0x1f8>
   b94fc:	1e7b      	subs	r3, r7, #1
   b94fe:	1159      	asrs	r1, r3, #5
   b9500:	f003 021f 	and.w	r2, r3, #31
   b9504:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9508:	f04f 0a01 	mov.w	sl, #1
   b950c:	fa0a f202 	lsl.w	r2, sl, r2
   b9510:	420a      	tst	r2, r1
   b9512:	d009      	beq.n	b9528 <__gethex+0x1f8>
   b9514:	4553      	cmp	r3, sl
   b9516:	dd05      	ble.n	b9524 <__gethex+0x1f4>
   b9518:	1eb9      	subs	r1, r7, #2
   b951a:	4620      	mov	r0, r4
   b951c:	f000 fec6 	bl	ba2ac <__any_on>
   b9520:	2800      	cmp	r0, #0
   b9522:	d145      	bne.n	b95b0 <__gethex+0x280>
   b9524:	f04f 0a02 	mov.w	sl, #2
   b9528:	4639      	mov	r1, r7
   b952a:	4620      	mov	r0, r4
   b952c:	f7ff fe98 	bl	b9260 <rshift>
   b9530:	443d      	add	r5, r7
   b9532:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9536:	42ab      	cmp	r3, r5
   b9538:	da4c      	bge.n	b95d4 <__gethex+0x2a4>
   b953a:	ee18 0a10 	vmov	r0, s16
   b953e:	4621      	mov	r1, r4
   b9540:	f000 fa54 	bl	b99ec <_Bfree>
   b9544:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9546:	2300      	movs	r3, #0
   b9548:	6013      	str	r3, [r2, #0]
   b954a:	27a3      	movs	r7, #163	; 0xa3
   b954c:	e785      	b.n	b945a <__gethex+0x12a>
   b954e:	1e73      	subs	r3, r6, #1
   b9550:	9a05      	ldr	r2, [sp, #20]
   b9552:	9303      	str	r3, [sp, #12]
   b9554:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9558:	4293      	cmp	r3, r2
   b955a:	d019      	beq.n	b9590 <__gethex+0x260>
   b955c:	f1bb 0f20 	cmp.w	fp, #32
   b9560:	d107      	bne.n	b9572 <__gethex+0x242>
   b9562:	9b02      	ldr	r3, [sp, #8]
   b9564:	9a00      	ldr	r2, [sp, #0]
   b9566:	f843 2b04 	str.w	r2, [r3], #4
   b956a:	9302      	str	r3, [sp, #8]
   b956c:	2300      	movs	r3, #0
   b956e:	9300      	str	r3, [sp, #0]
   b9570:	469b      	mov	fp, r3
   b9572:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b9576:	f7ff fec5 	bl	b9304 <__hexdig_fun>
   b957a:	9b00      	ldr	r3, [sp, #0]
   b957c:	f000 000f 	and.w	r0, r0, #15
   b9580:	fa00 f00b 	lsl.w	r0, r0, fp
   b9584:	4303      	orrs	r3, r0
   b9586:	9300      	str	r3, [sp, #0]
   b9588:	f10b 0b04 	add.w	fp, fp, #4
   b958c:	9b03      	ldr	r3, [sp, #12]
   b958e:	e00d      	b.n	b95ac <__gethex+0x27c>
   b9590:	9b03      	ldr	r3, [sp, #12]
   b9592:	9a06      	ldr	r2, [sp, #24]
   b9594:	4413      	add	r3, r2
   b9596:	42bb      	cmp	r3, r7
   b9598:	d3e0      	bcc.n	b955c <__gethex+0x22c>
   b959a:	4618      	mov	r0, r3
   b959c:	9901      	ldr	r1, [sp, #4]
   b959e:	9307      	str	r3, [sp, #28]
   b95a0:	4652      	mov	r2, sl
   b95a2:	f7fe ffb7 	bl	b8514 <strncmp>
   b95a6:	9b07      	ldr	r3, [sp, #28]
   b95a8:	2800      	cmp	r0, #0
   b95aa:	d1d7      	bne.n	b955c <__gethex+0x22c>
   b95ac:	461e      	mov	r6, r3
   b95ae:	e78b      	b.n	b94c8 <__gethex+0x198>
   b95b0:	f04f 0a03 	mov.w	sl, #3
   b95b4:	e7b8      	b.n	b9528 <__gethex+0x1f8>
   b95b6:	da0a      	bge.n	b95ce <__gethex+0x29e>
   b95b8:	1a37      	subs	r7, r6, r0
   b95ba:	4621      	mov	r1, r4
   b95bc:	ee18 0a10 	vmov	r0, s16
   b95c0:	463a      	mov	r2, r7
   b95c2:	f000 fc2f 	bl	b9e24 <__lshift>
   b95c6:	1bed      	subs	r5, r5, r7
   b95c8:	4604      	mov	r4, r0
   b95ca:	f100 0914 	add.w	r9, r0, #20
   b95ce:	f04f 0a00 	mov.w	sl, #0
   b95d2:	e7ae      	b.n	b9532 <__gethex+0x202>
   b95d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b95d8:	42a8      	cmp	r0, r5
   b95da:	dd72      	ble.n	b96c2 <__gethex+0x392>
   b95dc:	1b45      	subs	r5, r0, r5
   b95de:	42ae      	cmp	r6, r5
   b95e0:	dc36      	bgt.n	b9650 <__gethex+0x320>
   b95e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b95e6:	2b02      	cmp	r3, #2
   b95e8:	d02a      	beq.n	b9640 <__gethex+0x310>
   b95ea:	2b03      	cmp	r3, #3
   b95ec:	d02c      	beq.n	b9648 <__gethex+0x318>
   b95ee:	2b01      	cmp	r3, #1
   b95f0:	d11c      	bne.n	b962c <__gethex+0x2fc>
   b95f2:	42ae      	cmp	r6, r5
   b95f4:	d11a      	bne.n	b962c <__gethex+0x2fc>
   b95f6:	2e01      	cmp	r6, #1
   b95f8:	d112      	bne.n	b9620 <__gethex+0x2f0>
   b95fa:	9a04      	ldr	r2, [sp, #16]
   b95fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b9600:	6013      	str	r3, [r2, #0]
   b9602:	2301      	movs	r3, #1
   b9604:	6123      	str	r3, [r4, #16]
   b9606:	f8c9 3000 	str.w	r3, [r9]
   b960a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b960c:	2762      	movs	r7, #98	; 0x62
   b960e:	601c      	str	r4, [r3, #0]
   b9610:	e723      	b.n	b945a <__gethex+0x12a>
   b9612:	bf00      	nop
   b9614:	000bb45c 	.word	0x000bb45c
   b9618:	000bb3e9 	.word	0x000bb3e9
   b961c:	000bb3fa 	.word	0x000bb3fa
   b9620:	1e71      	subs	r1, r6, #1
   b9622:	4620      	mov	r0, r4
   b9624:	f000 fe42 	bl	ba2ac <__any_on>
   b9628:	2800      	cmp	r0, #0
   b962a:	d1e6      	bne.n	b95fa <__gethex+0x2ca>
   b962c:	ee18 0a10 	vmov	r0, s16
   b9630:	4621      	mov	r1, r4
   b9632:	f000 f9db 	bl	b99ec <_Bfree>
   b9636:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9638:	2300      	movs	r3, #0
   b963a:	6013      	str	r3, [r2, #0]
   b963c:	2750      	movs	r7, #80	; 0x50
   b963e:	e70c      	b.n	b945a <__gethex+0x12a>
   b9640:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9642:	2b00      	cmp	r3, #0
   b9644:	d1f2      	bne.n	b962c <__gethex+0x2fc>
   b9646:	e7d8      	b.n	b95fa <__gethex+0x2ca>
   b9648:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b964a:	2b00      	cmp	r3, #0
   b964c:	d1d5      	bne.n	b95fa <__gethex+0x2ca>
   b964e:	e7ed      	b.n	b962c <__gethex+0x2fc>
   b9650:	1e6f      	subs	r7, r5, #1
   b9652:	f1ba 0f00 	cmp.w	sl, #0
   b9656:	d131      	bne.n	b96bc <__gethex+0x38c>
   b9658:	b127      	cbz	r7, b9664 <__gethex+0x334>
   b965a:	4639      	mov	r1, r7
   b965c:	4620      	mov	r0, r4
   b965e:	f000 fe25 	bl	ba2ac <__any_on>
   b9662:	4682      	mov	sl, r0
   b9664:	117b      	asrs	r3, r7, #5
   b9666:	2101      	movs	r1, #1
   b9668:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b966c:	f007 071f 	and.w	r7, r7, #31
   b9670:	fa01 f707 	lsl.w	r7, r1, r7
   b9674:	421f      	tst	r7, r3
   b9676:	4629      	mov	r1, r5
   b9678:	4620      	mov	r0, r4
   b967a:	bf18      	it	ne
   b967c:	f04a 0a02 	orrne.w	sl, sl, #2
   b9680:	1b76      	subs	r6, r6, r5
   b9682:	f7ff fded 	bl	b9260 <rshift>
   b9686:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b968a:	2702      	movs	r7, #2
   b968c:	f1ba 0f00 	cmp.w	sl, #0
   b9690:	d048      	beq.n	b9724 <__gethex+0x3f4>
   b9692:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b9696:	2b02      	cmp	r3, #2
   b9698:	d015      	beq.n	b96c6 <__gethex+0x396>
   b969a:	2b03      	cmp	r3, #3
   b969c:	d017      	beq.n	b96ce <__gethex+0x39e>
   b969e:	2b01      	cmp	r3, #1
   b96a0:	d109      	bne.n	b96b6 <__gethex+0x386>
   b96a2:	f01a 0f02 	tst.w	sl, #2
   b96a6:	d006      	beq.n	b96b6 <__gethex+0x386>
   b96a8:	f8d9 0000 	ldr.w	r0, [r9]
   b96ac:	ea4a 0a00 	orr.w	sl, sl, r0
   b96b0:	f01a 0f01 	tst.w	sl, #1
   b96b4:	d10e      	bne.n	b96d4 <__gethex+0x3a4>
   b96b6:	f047 0710 	orr.w	r7, r7, #16
   b96ba:	e033      	b.n	b9724 <__gethex+0x3f4>
   b96bc:	f04f 0a01 	mov.w	sl, #1
   b96c0:	e7d0      	b.n	b9664 <__gethex+0x334>
   b96c2:	2701      	movs	r7, #1
   b96c4:	e7e2      	b.n	b968c <__gethex+0x35c>
   b96c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b96c8:	f1c3 0301 	rsb	r3, r3, #1
   b96cc:	9315      	str	r3, [sp, #84]	; 0x54
   b96ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b96d0:	2b00      	cmp	r3, #0
   b96d2:	d0f0      	beq.n	b96b6 <__gethex+0x386>
   b96d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b96d8:	f104 0314 	add.w	r3, r4, #20
   b96dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b96e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b96e4:	f04f 0c00 	mov.w	ip, #0
   b96e8:	4618      	mov	r0, r3
   b96ea:	f853 2b04 	ldr.w	r2, [r3], #4
   b96ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   b96f2:	d01c      	beq.n	b972e <__gethex+0x3fe>
   b96f4:	3201      	adds	r2, #1
   b96f6:	6002      	str	r2, [r0, #0]
   b96f8:	2f02      	cmp	r7, #2
   b96fa:	f104 0314 	add.w	r3, r4, #20
   b96fe:	d13f      	bne.n	b9780 <__gethex+0x450>
   b9700:	f8d8 2000 	ldr.w	r2, [r8]
   b9704:	3a01      	subs	r2, #1
   b9706:	42b2      	cmp	r2, r6
   b9708:	d10a      	bne.n	b9720 <__gethex+0x3f0>
   b970a:	1171      	asrs	r1, r6, #5
   b970c:	2201      	movs	r2, #1
   b970e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b9712:	f006 061f 	and.w	r6, r6, #31
   b9716:	fa02 f606 	lsl.w	r6, r2, r6
   b971a:	421e      	tst	r6, r3
   b971c:	bf18      	it	ne
   b971e:	4617      	movne	r7, r2
   b9720:	f047 0720 	orr.w	r7, r7, #32
   b9724:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9726:	601c      	str	r4, [r3, #0]
   b9728:	9b04      	ldr	r3, [sp, #16]
   b972a:	601d      	str	r5, [r3, #0]
   b972c:	e695      	b.n	b945a <__gethex+0x12a>
   b972e:	4299      	cmp	r1, r3
   b9730:	f843 cc04 	str.w	ip, [r3, #-4]
   b9734:	d8d8      	bhi.n	b96e8 <__gethex+0x3b8>
   b9736:	68a3      	ldr	r3, [r4, #8]
   b9738:	459b      	cmp	fp, r3
   b973a:	db19      	blt.n	b9770 <__gethex+0x440>
   b973c:	6861      	ldr	r1, [r4, #4]
   b973e:	ee18 0a10 	vmov	r0, s16
   b9742:	3101      	adds	r1, #1
   b9744:	f000 f912 	bl	b996c <_Balloc>
   b9748:	4681      	mov	r9, r0
   b974a:	b918      	cbnz	r0, b9754 <__gethex+0x424>
   b974c:	4b1a      	ldr	r3, [pc, #104]	; (b97b8 <__gethex+0x488>)
   b974e:	4602      	mov	r2, r0
   b9750:	2184      	movs	r1, #132	; 0x84
   b9752:	e6a8      	b.n	b94a6 <__gethex+0x176>
   b9754:	6922      	ldr	r2, [r4, #16]
   b9756:	3202      	adds	r2, #2
   b9758:	f104 010c 	add.w	r1, r4, #12
   b975c:	0092      	lsls	r2, r2, #2
   b975e:	300c      	adds	r0, #12
   b9760:	f7fe fe81 	bl	b8466 <memcpy>
   b9764:	4621      	mov	r1, r4
   b9766:	ee18 0a10 	vmov	r0, s16
   b976a:	f000 f93f 	bl	b99ec <_Bfree>
   b976e:	464c      	mov	r4, r9
   b9770:	6923      	ldr	r3, [r4, #16]
   b9772:	1c5a      	adds	r2, r3, #1
   b9774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9778:	6122      	str	r2, [r4, #16]
   b977a:	2201      	movs	r2, #1
   b977c:	615a      	str	r2, [r3, #20]
   b977e:	e7bb      	b.n	b96f8 <__gethex+0x3c8>
   b9780:	6922      	ldr	r2, [r4, #16]
   b9782:	455a      	cmp	r2, fp
   b9784:	dd0b      	ble.n	b979e <__gethex+0x46e>
   b9786:	2101      	movs	r1, #1
   b9788:	4620      	mov	r0, r4
   b978a:	f7ff fd69 	bl	b9260 <rshift>
   b978e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9792:	3501      	adds	r5, #1
   b9794:	42ab      	cmp	r3, r5
   b9796:	f6ff aed0 	blt.w	b953a <__gethex+0x20a>
   b979a:	2701      	movs	r7, #1
   b979c:	e7c0      	b.n	b9720 <__gethex+0x3f0>
   b979e:	f016 061f 	ands.w	r6, r6, #31
   b97a2:	d0fa      	beq.n	b979a <__gethex+0x46a>
   b97a4:	4453      	add	r3, sl
   b97a6:	f1c6 0620 	rsb	r6, r6, #32
   b97aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b97ae:	f000 f9cf 	bl	b9b50 <__hi0bits>
   b97b2:	42b0      	cmp	r0, r6
   b97b4:	dbe7      	blt.n	b9786 <__gethex+0x456>
   b97b6:	e7f0      	b.n	b979a <__gethex+0x46a>
   b97b8:	000bb3e9 	.word	0x000bb3e9

000b97bc <L_shift>:
   b97bc:	f1c2 0208 	rsb	r2, r2, #8
   b97c0:	0092      	lsls	r2, r2, #2
   b97c2:	b570      	push	{r4, r5, r6, lr}
   b97c4:	f1c2 0620 	rsb	r6, r2, #32
   b97c8:	6843      	ldr	r3, [r0, #4]
   b97ca:	6804      	ldr	r4, [r0, #0]
   b97cc:	fa03 f506 	lsl.w	r5, r3, r6
   b97d0:	432c      	orrs	r4, r5
   b97d2:	40d3      	lsrs	r3, r2
   b97d4:	6004      	str	r4, [r0, #0]
   b97d6:	f840 3f04 	str.w	r3, [r0, #4]!
   b97da:	4288      	cmp	r0, r1
   b97dc:	d3f4      	bcc.n	b97c8 <L_shift+0xc>
   b97de:	bd70      	pop	{r4, r5, r6, pc}

000b97e0 <__match>:
   b97e0:	b530      	push	{r4, r5, lr}
   b97e2:	6803      	ldr	r3, [r0, #0]
   b97e4:	3301      	adds	r3, #1
   b97e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b97ea:	b914      	cbnz	r4, b97f2 <__match+0x12>
   b97ec:	6003      	str	r3, [r0, #0]
   b97ee:	2001      	movs	r0, #1
   b97f0:	bd30      	pop	{r4, r5, pc}
   b97f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b97f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b97fa:	2d19      	cmp	r5, #25
   b97fc:	bf98      	it	ls
   b97fe:	3220      	addls	r2, #32
   b9800:	42a2      	cmp	r2, r4
   b9802:	d0f0      	beq.n	b97e6 <__match+0x6>
   b9804:	2000      	movs	r0, #0
   b9806:	e7f3      	b.n	b97f0 <__match+0x10>

000b9808 <__hexnan>:
   b9808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b980c:	680b      	ldr	r3, [r1, #0]
   b980e:	115e      	asrs	r6, r3, #5
   b9810:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b9814:	f013 031f 	ands.w	r3, r3, #31
   b9818:	b087      	sub	sp, #28
   b981a:	bf18      	it	ne
   b981c:	3604      	addne	r6, #4
   b981e:	2500      	movs	r5, #0
   b9820:	1f37      	subs	r7, r6, #4
   b9822:	4690      	mov	r8, r2
   b9824:	6802      	ldr	r2, [r0, #0]
   b9826:	9301      	str	r3, [sp, #4]
   b9828:	4682      	mov	sl, r0
   b982a:	f846 5c04 	str.w	r5, [r6, #-4]
   b982e:	46b9      	mov	r9, r7
   b9830:	463c      	mov	r4, r7
   b9832:	9502      	str	r5, [sp, #8]
   b9834:	46ab      	mov	fp, r5
   b9836:	7851      	ldrb	r1, [r2, #1]
   b9838:	1c53      	adds	r3, r2, #1
   b983a:	9303      	str	r3, [sp, #12]
   b983c:	b341      	cbz	r1, b9890 <__hexnan+0x88>
   b983e:	4608      	mov	r0, r1
   b9840:	9205      	str	r2, [sp, #20]
   b9842:	9104      	str	r1, [sp, #16]
   b9844:	f7ff fd5e 	bl	b9304 <__hexdig_fun>
   b9848:	2800      	cmp	r0, #0
   b984a:	d14f      	bne.n	b98ec <__hexnan+0xe4>
   b984c:	9904      	ldr	r1, [sp, #16]
   b984e:	9a05      	ldr	r2, [sp, #20]
   b9850:	2920      	cmp	r1, #32
   b9852:	d818      	bhi.n	b9886 <__hexnan+0x7e>
   b9854:	9b02      	ldr	r3, [sp, #8]
   b9856:	459b      	cmp	fp, r3
   b9858:	dd13      	ble.n	b9882 <__hexnan+0x7a>
   b985a:	454c      	cmp	r4, r9
   b985c:	d206      	bcs.n	b986c <__hexnan+0x64>
   b985e:	2d07      	cmp	r5, #7
   b9860:	dc04      	bgt.n	b986c <__hexnan+0x64>
   b9862:	462a      	mov	r2, r5
   b9864:	4649      	mov	r1, r9
   b9866:	4620      	mov	r0, r4
   b9868:	f7ff ffa8 	bl	b97bc <L_shift>
   b986c:	4544      	cmp	r4, r8
   b986e:	d950      	bls.n	b9912 <__hexnan+0x10a>
   b9870:	2300      	movs	r3, #0
   b9872:	f1a4 0904 	sub.w	r9, r4, #4
   b9876:	f844 3c04 	str.w	r3, [r4, #-4]
   b987a:	f8cd b008 	str.w	fp, [sp, #8]
   b987e:	464c      	mov	r4, r9
   b9880:	461d      	mov	r5, r3
   b9882:	9a03      	ldr	r2, [sp, #12]
   b9884:	e7d7      	b.n	b9836 <__hexnan+0x2e>
   b9886:	2929      	cmp	r1, #41	; 0x29
   b9888:	d156      	bne.n	b9938 <__hexnan+0x130>
   b988a:	3202      	adds	r2, #2
   b988c:	f8ca 2000 	str.w	r2, [sl]
   b9890:	f1bb 0f00 	cmp.w	fp, #0
   b9894:	d050      	beq.n	b9938 <__hexnan+0x130>
   b9896:	454c      	cmp	r4, r9
   b9898:	d206      	bcs.n	b98a8 <__hexnan+0xa0>
   b989a:	2d07      	cmp	r5, #7
   b989c:	dc04      	bgt.n	b98a8 <__hexnan+0xa0>
   b989e:	462a      	mov	r2, r5
   b98a0:	4649      	mov	r1, r9
   b98a2:	4620      	mov	r0, r4
   b98a4:	f7ff ff8a 	bl	b97bc <L_shift>
   b98a8:	4544      	cmp	r4, r8
   b98aa:	d934      	bls.n	b9916 <__hexnan+0x10e>
   b98ac:	f1a8 0204 	sub.w	r2, r8, #4
   b98b0:	4623      	mov	r3, r4
   b98b2:	f853 1b04 	ldr.w	r1, [r3], #4
   b98b6:	f842 1f04 	str.w	r1, [r2, #4]!
   b98ba:	429f      	cmp	r7, r3
   b98bc:	d2f9      	bcs.n	b98b2 <__hexnan+0xaa>
   b98be:	1b3b      	subs	r3, r7, r4
   b98c0:	f023 0303 	bic.w	r3, r3, #3
   b98c4:	3304      	adds	r3, #4
   b98c6:	3401      	adds	r4, #1
   b98c8:	3e03      	subs	r6, #3
   b98ca:	42b4      	cmp	r4, r6
   b98cc:	bf88      	it	hi
   b98ce:	2304      	movhi	r3, #4
   b98d0:	4443      	add	r3, r8
   b98d2:	2200      	movs	r2, #0
   b98d4:	f843 2b04 	str.w	r2, [r3], #4
   b98d8:	429f      	cmp	r7, r3
   b98da:	d2fb      	bcs.n	b98d4 <__hexnan+0xcc>
   b98dc:	683b      	ldr	r3, [r7, #0]
   b98de:	b91b      	cbnz	r3, b98e8 <__hexnan+0xe0>
   b98e0:	4547      	cmp	r7, r8
   b98e2:	d127      	bne.n	b9934 <__hexnan+0x12c>
   b98e4:	2301      	movs	r3, #1
   b98e6:	603b      	str	r3, [r7, #0]
   b98e8:	2005      	movs	r0, #5
   b98ea:	e026      	b.n	b993a <__hexnan+0x132>
   b98ec:	3501      	adds	r5, #1
   b98ee:	2d08      	cmp	r5, #8
   b98f0:	f10b 0b01 	add.w	fp, fp, #1
   b98f4:	dd06      	ble.n	b9904 <__hexnan+0xfc>
   b98f6:	4544      	cmp	r4, r8
   b98f8:	d9c3      	bls.n	b9882 <__hexnan+0x7a>
   b98fa:	2300      	movs	r3, #0
   b98fc:	f844 3c04 	str.w	r3, [r4, #-4]
   b9900:	2501      	movs	r5, #1
   b9902:	3c04      	subs	r4, #4
   b9904:	6822      	ldr	r2, [r4, #0]
   b9906:	f000 000f 	and.w	r0, r0, #15
   b990a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b990e:	6022      	str	r2, [r4, #0]
   b9910:	e7b7      	b.n	b9882 <__hexnan+0x7a>
   b9912:	2508      	movs	r5, #8
   b9914:	e7b5      	b.n	b9882 <__hexnan+0x7a>
   b9916:	9b01      	ldr	r3, [sp, #4]
   b9918:	2b00      	cmp	r3, #0
   b991a:	d0df      	beq.n	b98dc <__hexnan+0xd4>
   b991c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9920:	f1c3 0320 	rsb	r3, r3, #32
   b9924:	fa22 f303 	lsr.w	r3, r2, r3
   b9928:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b992c:	401a      	ands	r2, r3
   b992e:	f846 2c04 	str.w	r2, [r6, #-4]
   b9932:	e7d3      	b.n	b98dc <__hexnan+0xd4>
   b9934:	3f04      	subs	r7, #4
   b9936:	e7d1      	b.n	b98dc <__hexnan+0xd4>
   b9938:	2004      	movs	r0, #4
   b993a:	b007      	add	sp, #28
   b993c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9940 <__retarget_lock_acquire_recursive>:
   b9940:	4770      	bx	lr

000b9942 <__retarget_lock_release>:
   b9942:	4770      	bx	lr

000b9944 <__retarget_lock_release_recursive>:
   b9944:	4770      	bx	lr

000b9946 <__ascii_mbtowc>:
   b9946:	b082      	sub	sp, #8
   b9948:	b901      	cbnz	r1, b994c <__ascii_mbtowc+0x6>
   b994a:	a901      	add	r1, sp, #4
   b994c:	b142      	cbz	r2, b9960 <__ascii_mbtowc+0x1a>
   b994e:	b14b      	cbz	r3, b9964 <__ascii_mbtowc+0x1e>
   b9950:	7813      	ldrb	r3, [r2, #0]
   b9952:	600b      	str	r3, [r1, #0]
   b9954:	7812      	ldrb	r2, [r2, #0]
   b9956:	1e10      	subs	r0, r2, #0
   b9958:	bf18      	it	ne
   b995a:	2001      	movne	r0, #1
   b995c:	b002      	add	sp, #8
   b995e:	4770      	bx	lr
   b9960:	4610      	mov	r0, r2
   b9962:	e7fb      	b.n	b995c <__ascii_mbtowc+0x16>
   b9964:	f06f 0001 	mvn.w	r0, #1
   b9968:	e7f8      	b.n	b995c <__ascii_mbtowc+0x16>
	...

000b996c <_Balloc>:
   b996c:	b570      	push	{r4, r5, r6, lr}
   b996e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9970:	4604      	mov	r4, r0
   b9972:	460d      	mov	r5, r1
   b9974:	b976      	cbnz	r6, b9994 <_Balloc+0x28>
   b9976:	2010      	movs	r0, #16
   b9978:	f7fc fcc2 	bl	b6300 <malloc>
   b997c:	4602      	mov	r2, r0
   b997e:	6260      	str	r0, [r4, #36]	; 0x24
   b9980:	b920      	cbnz	r0, b998c <_Balloc+0x20>
   b9982:	4b18      	ldr	r3, [pc, #96]	; (b99e4 <_Balloc+0x78>)
   b9984:	4818      	ldr	r0, [pc, #96]	; (b99e8 <_Balloc+0x7c>)
   b9986:	2166      	movs	r1, #102	; 0x66
   b9988:	f7fc fcea 	bl	b6360 <__assert_func>
   b998c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9990:	6006      	str	r6, [r0, #0]
   b9992:	60c6      	str	r6, [r0, #12]
   b9994:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9996:	68f3      	ldr	r3, [r6, #12]
   b9998:	b183      	cbz	r3, b99bc <_Balloc+0x50>
   b999a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b999c:	68db      	ldr	r3, [r3, #12]
   b999e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b99a2:	b9b8      	cbnz	r0, b99d4 <_Balloc+0x68>
   b99a4:	2101      	movs	r1, #1
   b99a6:	fa01 f605 	lsl.w	r6, r1, r5
   b99aa:	1d72      	adds	r2, r6, #5
   b99ac:	0092      	lsls	r2, r2, #2
   b99ae:	4620      	mov	r0, r4
   b99b0:	f000 fc9d 	bl	ba2ee <_calloc_r>
   b99b4:	b160      	cbz	r0, b99d0 <_Balloc+0x64>
   b99b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b99ba:	e00e      	b.n	b99da <_Balloc+0x6e>
   b99bc:	2221      	movs	r2, #33	; 0x21
   b99be:	2104      	movs	r1, #4
   b99c0:	4620      	mov	r0, r4
   b99c2:	f000 fc94 	bl	ba2ee <_calloc_r>
   b99c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b99c8:	60f0      	str	r0, [r6, #12]
   b99ca:	68db      	ldr	r3, [r3, #12]
   b99cc:	2b00      	cmp	r3, #0
   b99ce:	d1e4      	bne.n	b999a <_Balloc+0x2e>
   b99d0:	2000      	movs	r0, #0
   b99d2:	bd70      	pop	{r4, r5, r6, pc}
   b99d4:	6802      	ldr	r2, [r0, #0]
   b99d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b99da:	2300      	movs	r3, #0
   b99dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b99e0:	e7f7      	b.n	b99d2 <_Balloc+0x66>
   b99e2:	bf00      	nop
   b99e4:	000bb21d 	.word	0x000bb21d
   b99e8:	000bb470 	.word	0x000bb470

000b99ec <_Bfree>:
   b99ec:	b570      	push	{r4, r5, r6, lr}
   b99ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b99f0:	4605      	mov	r5, r0
   b99f2:	460c      	mov	r4, r1
   b99f4:	b976      	cbnz	r6, b9a14 <_Bfree+0x28>
   b99f6:	2010      	movs	r0, #16
   b99f8:	f7fc fc82 	bl	b6300 <malloc>
   b99fc:	4602      	mov	r2, r0
   b99fe:	6268      	str	r0, [r5, #36]	; 0x24
   b9a00:	b920      	cbnz	r0, b9a0c <_Bfree+0x20>
   b9a02:	4b09      	ldr	r3, [pc, #36]	; (b9a28 <_Bfree+0x3c>)
   b9a04:	4809      	ldr	r0, [pc, #36]	; (b9a2c <_Bfree+0x40>)
   b9a06:	218a      	movs	r1, #138	; 0x8a
   b9a08:	f7fc fcaa 	bl	b6360 <__assert_func>
   b9a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9a10:	6006      	str	r6, [r0, #0]
   b9a12:	60c6      	str	r6, [r0, #12]
   b9a14:	b13c      	cbz	r4, b9a26 <_Bfree+0x3a>
   b9a16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9a18:	6862      	ldr	r2, [r4, #4]
   b9a1a:	68db      	ldr	r3, [r3, #12]
   b9a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9a20:	6021      	str	r1, [r4, #0]
   b9a22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b9a26:	bd70      	pop	{r4, r5, r6, pc}
   b9a28:	000bb21d 	.word	0x000bb21d
   b9a2c:	000bb470 	.word	0x000bb470

000b9a30 <__multadd>:
   b9a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a34:	690d      	ldr	r5, [r1, #16]
   b9a36:	4607      	mov	r7, r0
   b9a38:	460c      	mov	r4, r1
   b9a3a:	461e      	mov	r6, r3
   b9a3c:	f101 0c14 	add.w	ip, r1, #20
   b9a40:	2000      	movs	r0, #0
   b9a42:	f8dc 3000 	ldr.w	r3, [ip]
   b9a46:	b299      	uxth	r1, r3
   b9a48:	fb02 6101 	mla	r1, r2, r1, r6
   b9a4c:	0c1e      	lsrs	r6, r3, #16
   b9a4e:	0c0b      	lsrs	r3, r1, #16
   b9a50:	fb02 3306 	mla	r3, r2, r6, r3
   b9a54:	b289      	uxth	r1, r1
   b9a56:	3001      	adds	r0, #1
   b9a58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9a5c:	4285      	cmp	r5, r0
   b9a5e:	f84c 1b04 	str.w	r1, [ip], #4
   b9a62:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b9a66:	dcec      	bgt.n	b9a42 <__multadd+0x12>
   b9a68:	b30e      	cbz	r6, b9aae <__multadd+0x7e>
   b9a6a:	68a3      	ldr	r3, [r4, #8]
   b9a6c:	42ab      	cmp	r3, r5
   b9a6e:	dc19      	bgt.n	b9aa4 <__multadd+0x74>
   b9a70:	6861      	ldr	r1, [r4, #4]
   b9a72:	4638      	mov	r0, r7
   b9a74:	3101      	adds	r1, #1
   b9a76:	f7ff ff79 	bl	b996c <_Balloc>
   b9a7a:	4680      	mov	r8, r0
   b9a7c:	b928      	cbnz	r0, b9a8a <__multadd+0x5a>
   b9a7e:	4602      	mov	r2, r0
   b9a80:	4b0c      	ldr	r3, [pc, #48]	; (b9ab4 <__multadd+0x84>)
   b9a82:	480d      	ldr	r0, [pc, #52]	; (b9ab8 <__multadd+0x88>)
   b9a84:	21b5      	movs	r1, #181	; 0xb5
   b9a86:	f7fc fc6b 	bl	b6360 <__assert_func>
   b9a8a:	6922      	ldr	r2, [r4, #16]
   b9a8c:	3202      	adds	r2, #2
   b9a8e:	f104 010c 	add.w	r1, r4, #12
   b9a92:	0092      	lsls	r2, r2, #2
   b9a94:	300c      	adds	r0, #12
   b9a96:	f7fe fce6 	bl	b8466 <memcpy>
   b9a9a:	4621      	mov	r1, r4
   b9a9c:	4638      	mov	r0, r7
   b9a9e:	f7ff ffa5 	bl	b99ec <_Bfree>
   b9aa2:	4644      	mov	r4, r8
   b9aa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9aa8:	3501      	adds	r5, #1
   b9aaa:	615e      	str	r6, [r3, #20]
   b9aac:	6125      	str	r5, [r4, #16]
   b9aae:	4620      	mov	r0, r4
   b9ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9ab4:	000bb3e9 	.word	0x000bb3e9
   b9ab8:	000bb470 	.word	0x000bb470

000b9abc <__s2b>:
   b9abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9ac0:	460c      	mov	r4, r1
   b9ac2:	4615      	mov	r5, r2
   b9ac4:	461f      	mov	r7, r3
   b9ac6:	2209      	movs	r2, #9
   b9ac8:	3308      	adds	r3, #8
   b9aca:	4606      	mov	r6, r0
   b9acc:	fb93 f3f2 	sdiv	r3, r3, r2
   b9ad0:	2100      	movs	r1, #0
   b9ad2:	2201      	movs	r2, #1
   b9ad4:	429a      	cmp	r2, r3
   b9ad6:	db09      	blt.n	b9aec <__s2b+0x30>
   b9ad8:	4630      	mov	r0, r6
   b9ada:	f7ff ff47 	bl	b996c <_Balloc>
   b9ade:	b940      	cbnz	r0, b9af2 <__s2b+0x36>
   b9ae0:	4602      	mov	r2, r0
   b9ae2:	4b19      	ldr	r3, [pc, #100]	; (b9b48 <__s2b+0x8c>)
   b9ae4:	4819      	ldr	r0, [pc, #100]	; (b9b4c <__s2b+0x90>)
   b9ae6:	21ce      	movs	r1, #206	; 0xce
   b9ae8:	f7fc fc3a 	bl	b6360 <__assert_func>
   b9aec:	0052      	lsls	r2, r2, #1
   b9aee:	3101      	adds	r1, #1
   b9af0:	e7f0      	b.n	b9ad4 <__s2b+0x18>
   b9af2:	9b08      	ldr	r3, [sp, #32]
   b9af4:	6143      	str	r3, [r0, #20]
   b9af6:	2d09      	cmp	r5, #9
   b9af8:	f04f 0301 	mov.w	r3, #1
   b9afc:	6103      	str	r3, [r0, #16]
   b9afe:	dd16      	ble.n	b9b2e <__s2b+0x72>
   b9b00:	f104 0909 	add.w	r9, r4, #9
   b9b04:	46c8      	mov	r8, r9
   b9b06:	442c      	add	r4, r5
   b9b08:	f818 3b01 	ldrb.w	r3, [r8], #1
   b9b0c:	4601      	mov	r1, r0
   b9b0e:	3b30      	subs	r3, #48	; 0x30
   b9b10:	220a      	movs	r2, #10
   b9b12:	4630      	mov	r0, r6
   b9b14:	f7ff ff8c 	bl	b9a30 <__multadd>
   b9b18:	45a0      	cmp	r8, r4
   b9b1a:	d1f5      	bne.n	b9b08 <__s2b+0x4c>
   b9b1c:	f1a5 0408 	sub.w	r4, r5, #8
   b9b20:	444c      	add	r4, r9
   b9b22:	1b2d      	subs	r5, r5, r4
   b9b24:	1963      	adds	r3, r4, r5
   b9b26:	42bb      	cmp	r3, r7
   b9b28:	db04      	blt.n	b9b34 <__s2b+0x78>
   b9b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9b2e:	340a      	adds	r4, #10
   b9b30:	2509      	movs	r5, #9
   b9b32:	e7f6      	b.n	b9b22 <__s2b+0x66>
   b9b34:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9b38:	4601      	mov	r1, r0
   b9b3a:	3b30      	subs	r3, #48	; 0x30
   b9b3c:	220a      	movs	r2, #10
   b9b3e:	4630      	mov	r0, r6
   b9b40:	f7ff ff76 	bl	b9a30 <__multadd>
   b9b44:	e7ee      	b.n	b9b24 <__s2b+0x68>
   b9b46:	bf00      	nop
   b9b48:	000bb3e9 	.word	0x000bb3e9
   b9b4c:	000bb470 	.word	0x000bb470

000b9b50 <__hi0bits>:
   b9b50:	0c03      	lsrs	r3, r0, #16
   b9b52:	041b      	lsls	r3, r3, #16
   b9b54:	b9d3      	cbnz	r3, b9b8c <__hi0bits+0x3c>
   b9b56:	0400      	lsls	r0, r0, #16
   b9b58:	2310      	movs	r3, #16
   b9b5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9b5e:	bf04      	itt	eq
   b9b60:	0200      	lsleq	r0, r0, #8
   b9b62:	3308      	addeq	r3, #8
   b9b64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9b68:	bf04      	itt	eq
   b9b6a:	0100      	lsleq	r0, r0, #4
   b9b6c:	3304      	addeq	r3, #4
   b9b6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9b72:	bf04      	itt	eq
   b9b74:	0080      	lsleq	r0, r0, #2
   b9b76:	3302      	addeq	r3, #2
   b9b78:	2800      	cmp	r0, #0
   b9b7a:	db05      	blt.n	b9b88 <__hi0bits+0x38>
   b9b7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9b80:	f103 0301 	add.w	r3, r3, #1
   b9b84:	bf08      	it	eq
   b9b86:	2320      	moveq	r3, #32
   b9b88:	4618      	mov	r0, r3
   b9b8a:	4770      	bx	lr
   b9b8c:	2300      	movs	r3, #0
   b9b8e:	e7e4      	b.n	b9b5a <__hi0bits+0xa>

000b9b90 <__lo0bits>:
   b9b90:	6803      	ldr	r3, [r0, #0]
   b9b92:	f013 0207 	ands.w	r2, r3, #7
   b9b96:	4601      	mov	r1, r0
   b9b98:	d00b      	beq.n	b9bb2 <__lo0bits+0x22>
   b9b9a:	07da      	lsls	r2, r3, #31
   b9b9c:	d423      	bmi.n	b9be6 <__lo0bits+0x56>
   b9b9e:	0798      	lsls	r0, r3, #30
   b9ba0:	bf49      	itett	mi
   b9ba2:	085b      	lsrmi	r3, r3, #1
   b9ba4:	089b      	lsrpl	r3, r3, #2
   b9ba6:	2001      	movmi	r0, #1
   b9ba8:	600b      	strmi	r3, [r1, #0]
   b9baa:	bf5c      	itt	pl
   b9bac:	600b      	strpl	r3, [r1, #0]
   b9bae:	2002      	movpl	r0, #2
   b9bb0:	4770      	bx	lr
   b9bb2:	b298      	uxth	r0, r3
   b9bb4:	b9a8      	cbnz	r0, b9be2 <__lo0bits+0x52>
   b9bb6:	0c1b      	lsrs	r3, r3, #16
   b9bb8:	2010      	movs	r0, #16
   b9bba:	b2da      	uxtb	r2, r3
   b9bbc:	b90a      	cbnz	r2, b9bc2 <__lo0bits+0x32>
   b9bbe:	3008      	adds	r0, #8
   b9bc0:	0a1b      	lsrs	r3, r3, #8
   b9bc2:	071a      	lsls	r2, r3, #28
   b9bc4:	bf04      	itt	eq
   b9bc6:	091b      	lsreq	r3, r3, #4
   b9bc8:	3004      	addeq	r0, #4
   b9bca:	079a      	lsls	r2, r3, #30
   b9bcc:	bf04      	itt	eq
   b9bce:	089b      	lsreq	r3, r3, #2
   b9bd0:	3002      	addeq	r0, #2
   b9bd2:	07da      	lsls	r2, r3, #31
   b9bd4:	d403      	bmi.n	b9bde <__lo0bits+0x4e>
   b9bd6:	085b      	lsrs	r3, r3, #1
   b9bd8:	f100 0001 	add.w	r0, r0, #1
   b9bdc:	d005      	beq.n	b9bea <__lo0bits+0x5a>
   b9bde:	600b      	str	r3, [r1, #0]
   b9be0:	4770      	bx	lr
   b9be2:	4610      	mov	r0, r2
   b9be4:	e7e9      	b.n	b9bba <__lo0bits+0x2a>
   b9be6:	2000      	movs	r0, #0
   b9be8:	4770      	bx	lr
   b9bea:	2020      	movs	r0, #32
   b9bec:	4770      	bx	lr
	...

000b9bf0 <__i2b>:
   b9bf0:	b510      	push	{r4, lr}
   b9bf2:	460c      	mov	r4, r1
   b9bf4:	2101      	movs	r1, #1
   b9bf6:	f7ff feb9 	bl	b996c <_Balloc>
   b9bfa:	4602      	mov	r2, r0
   b9bfc:	b928      	cbnz	r0, b9c0a <__i2b+0x1a>
   b9bfe:	4b05      	ldr	r3, [pc, #20]	; (b9c14 <__i2b+0x24>)
   b9c00:	4805      	ldr	r0, [pc, #20]	; (b9c18 <__i2b+0x28>)
   b9c02:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b9c06:	f7fc fbab 	bl	b6360 <__assert_func>
   b9c0a:	2301      	movs	r3, #1
   b9c0c:	6144      	str	r4, [r0, #20]
   b9c0e:	6103      	str	r3, [r0, #16]
   b9c10:	bd10      	pop	{r4, pc}
   b9c12:	bf00      	nop
   b9c14:	000bb3e9 	.word	0x000bb3e9
   b9c18:	000bb470 	.word	0x000bb470

000b9c1c <__multiply>:
   b9c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c20:	4691      	mov	r9, r2
   b9c22:	690a      	ldr	r2, [r1, #16]
   b9c24:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9c28:	429a      	cmp	r2, r3
   b9c2a:	bfb8      	it	lt
   b9c2c:	460b      	movlt	r3, r1
   b9c2e:	460c      	mov	r4, r1
   b9c30:	bfbc      	itt	lt
   b9c32:	464c      	movlt	r4, r9
   b9c34:	4699      	movlt	r9, r3
   b9c36:	6927      	ldr	r7, [r4, #16]
   b9c38:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9c3c:	68a3      	ldr	r3, [r4, #8]
   b9c3e:	6861      	ldr	r1, [r4, #4]
   b9c40:	eb07 060a 	add.w	r6, r7, sl
   b9c44:	42b3      	cmp	r3, r6
   b9c46:	b085      	sub	sp, #20
   b9c48:	bfb8      	it	lt
   b9c4a:	3101      	addlt	r1, #1
   b9c4c:	f7ff fe8e 	bl	b996c <_Balloc>
   b9c50:	b930      	cbnz	r0, b9c60 <__multiply+0x44>
   b9c52:	4602      	mov	r2, r0
   b9c54:	4b44      	ldr	r3, [pc, #272]	; (b9d68 <__multiply+0x14c>)
   b9c56:	4845      	ldr	r0, [pc, #276]	; (b9d6c <__multiply+0x150>)
   b9c58:	f240 115d 	movw	r1, #349	; 0x15d
   b9c5c:	f7fc fb80 	bl	b6360 <__assert_func>
   b9c60:	f100 0514 	add.w	r5, r0, #20
   b9c64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9c68:	462b      	mov	r3, r5
   b9c6a:	2200      	movs	r2, #0
   b9c6c:	4543      	cmp	r3, r8
   b9c6e:	d321      	bcc.n	b9cb4 <__multiply+0x98>
   b9c70:	f104 0314 	add.w	r3, r4, #20
   b9c74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9c78:	f109 0314 	add.w	r3, r9, #20
   b9c7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9c80:	9202      	str	r2, [sp, #8]
   b9c82:	1b3a      	subs	r2, r7, r4
   b9c84:	3a15      	subs	r2, #21
   b9c86:	f022 0203 	bic.w	r2, r2, #3
   b9c8a:	3204      	adds	r2, #4
   b9c8c:	f104 0115 	add.w	r1, r4, #21
   b9c90:	428f      	cmp	r7, r1
   b9c92:	bf38      	it	cc
   b9c94:	2204      	movcc	r2, #4
   b9c96:	9201      	str	r2, [sp, #4]
   b9c98:	9a02      	ldr	r2, [sp, #8]
   b9c9a:	9303      	str	r3, [sp, #12]
   b9c9c:	429a      	cmp	r2, r3
   b9c9e:	d80c      	bhi.n	b9cba <__multiply+0x9e>
   b9ca0:	2e00      	cmp	r6, #0
   b9ca2:	dd03      	ble.n	b9cac <__multiply+0x90>
   b9ca4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9ca8:	2b00      	cmp	r3, #0
   b9caa:	d05a      	beq.n	b9d62 <__multiply+0x146>
   b9cac:	6106      	str	r6, [r0, #16]
   b9cae:	b005      	add	sp, #20
   b9cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9cb4:	f843 2b04 	str.w	r2, [r3], #4
   b9cb8:	e7d8      	b.n	b9c6c <__multiply+0x50>
   b9cba:	f8b3 a000 	ldrh.w	sl, [r3]
   b9cbe:	f1ba 0f00 	cmp.w	sl, #0
   b9cc2:	d024      	beq.n	b9d0e <__multiply+0xf2>
   b9cc4:	f104 0e14 	add.w	lr, r4, #20
   b9cc8:	46a9      	mov	r9, r5
   b9cca:	f04f 0c00 	mov.w	ip, #0
   b9cce:	f85e 2b04 	ldr.w	r2, [lr], #4
   b9cd2:	f8d9 1000 	ldr.w	r1, [r9]
   b9cd6:	fa1f fb82 	uxth.w	fp, r2
   b9cda:	b289      	uxth	r1, r1
   b9cdc:	fb0a 110b 	mla	r1, sl, fp, r1
   b9ce0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b9ce4:	f8d9 2000 	ldr.w	r2, [r9]
   b9ce8:	4461      	add	r1, ip
   b9cea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9cee:	fb0a c20b 	mla	r2, sl, fp, ip
   b9cf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b9cf6:	b289      	uxth	r1, r1
   b9cf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b9cfc:	4577      	cmp	r7, lr
   b9cfe:	f849 1b04 	str.w	r1, [r9], #4
   b9d02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9d06:	d8e2      	bhi.n	b9cce <__multiply+0xb2>
   b9d08:	9a01      	ldr	r2, [sp, #4]
   b9d0a:	f845 c002 	str.w	ip, [r5, r2]
   b9d0e:	9a03      	ldr	r2, [sp, #12]
   b9d10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b9d14:	3304      	adds	r3, #4
   b9d16:	f1b9 0f00 	cmp.w	r9, #0
   b9d1a:	d020      	beq.n	b9d5e <__multiply+0x142>
   b9d1c:	6829      	ldr	r1, [r5, #0]
   b9d1e:	f104 0c14 	add.w	ip, r4, #20
   b9d22:	46ae      	mov	lr, r5
   b9d24:	f04f 0a00 	mov.w	sl, #0
   b9d28:	f8bc b000 	ldrh.w	fp, [ip]
   b9d2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9d30:	fb09 220b 	mla	r2, r9, fp, r2
   b9d34:	4492      	add	sl, r2
   b9d36:	b289      	uxth	r1, r1
   b9d38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9d3c:	f84e 1b04 	str.w	r1, [lr], #4
   b9d40:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9d44:	f8be 1000 	ldrh.w	r1, [lr]
   b9d48:	0c12      	lsrs	r2, r2, #16
   b9d4a:	fb09 1102 	mla	r1, r9, r2, r1
   b9d4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b9d52:	4567      	cmp	r7, ip
   b9d54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9d58:	d8e6      	bhi.n	b9d28 <__multiply+0x10c>
   b9d5a:	9a01      	ldr	r2, [sp, #4]
   b9d5c:	50a9      	str	r1, [r5, r2]
   b9d5e:	3504      	adds	r5, #4
   b9d60:	e79a      	b.n	b9c98 <__multiply+0x7c>
   b9d62:	3e01      	subs	r6, #1
   b9d64:	e79c      	b.n	b9ca0 <__multiply+0x84>
   b9d66:	bf00      	nop
   b9d68:	000bb3e9 	.word	0x000bb3e9
   b9d6c:	000bb470 	.word	0x000bb470

000b9d70 <__pow5mult>:
   b9d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9d74:	4615      	mov	r5, r2
   b9d76:	f012 0203 	ands.w	r2, r2, #3
   b9d7a:	4606      	mov	r6, r0
   b9d7c:	460f      	mov	r7, r1
   b9d7e:	d007      	beq.n	b9d90 <__pow5mult+0x20>
   b9d80:	4c25      	ldr	r4, [pc, #148]	; (b9e18 <__pow5mult+0xa8>)
   b9d82:	3a01      	subs	r2, #1
   b9d84:	2300      	movs	r3, #0
   b9d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b9d8a:	f7ff fe51 	bl	b9a30 <__multadd>
   b9d8e:	4607      	mov	r7, r0
   b9d90:	10ad      	asrs	r5, r5, #2
   b9d92:	d03d      	beq.n	b9e10 <__pow5mult+0xa0>
   b9d94:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9d96:	b97c      	cbnz	r4, b9db8 <__pow5mult+0x48>
   b9d98:	2010      	movs	r0, #16
   b9d9a:	f7fc fab1 	bl	b6300 <malloc>
   b9d9e:	4602      	mov	r2, r0
   b9da0:	6270      	str	r0, [r6, #36]	; 0x24
   b9da2:	b928      	cbnz	r0, b9db0 <__pow5mult+0x40>
   b9da4:	4b1d      	ldr	r3, [pc, #116]	; (b9e1c <__pow5mult+0xac>)
   b9da6:	481e      	ldr	r0, [pc, #120]	; (b9e20 <__pow5mult+0xb0>)
   b9da8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b9dac:	f7fc fad8 	bl	b6360 <__assert_func>
   b9db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9db4:	6004      	str	r4, [r0, #0]
   b9db6:	60c4      	str	r4, [r0, #12]
   b9db8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b9dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9dc0:	b94c      	cbnz	r4, b9dd6 <__pow5mult+0x66>
   b9dc2:	f240 2171 	movw	r1, #625	; 0x271
   b9dc6:	4630      	mov	r0, r6
   b9dc8:	f7ff ff12 	bl	b9bf0 <__i2b>
   b9dcc:	2300      	movs	r3, #0
   b9dce:	f8c8 0008 	str.w	r0, [r8, #8]
   b9dd2:	4604      	mov	r4, r0
   b9dd4:	6003      	str	r3, [r0, #0]
   b9dd6:	f04f 0900 	mov.w	r9, #0
   b9dda:	07eb      	lsls	r3, r5, #31
   b9ddc:	d50a      	bpl.n	b9df4 <__pow5mult+0x84>
   b9dde:	4639      	mov	r1, r7
   b9de0:	4622      	mov	r2, r4
   b9de2:	4630      	mov	r0, r6
   b9de4:	f7ff ff1a 	bl	b9c1c <__multiply>
   b9de8:	4639      	mov	r1, r7
   b9dea:	4680      	mov	r8, r0
   b9dec:	4630      	mov	r0, r6
   b9dee:	f7ff fdfd 	bl	b99ec <_Bfree>
   b9df2:	4647      	mov	r7, r8
   b9df4:	106d      	asrs	r5, r5, #1
   b9df6:	d00b      	beq.n	b9e10 <__pow5mult+0xa0>
   b9df8:	6820      	ldr	r0, [r4, #0]
   b9dfa:	b938      	cbnz	r0, b9e0c <__pow5mult+0x9c>
   b9dfc:	4622      	mov	r2, r4
   b9dfe:	4621      	mov	r1, r4
   b9e00:	4630      	mov	r0, r6
   b9e02:	f7ff ff0b 	bl	b9c1c <__multiply>
   b9e06:	6020      	str	r0, [r4, #0]
   b9e08:	f8c0 9000 	str.w	r9, [r0]
   b9e0c:	4604      	mov	r4, r0
   b9e0e:	e7e4      	b.n	b9dda <__pow5mult+0x6a>
   b9e10:	4638      	mov	r0, r7
   b9e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9e16:	bf00      	nop
   b9e18:	000bb5c0 	.word	0x000bb5c0
   b9e1c:	000bb21d 	.word	0x000bb21d
   b9e20:	000bb470 	.word	0x000bb470

000b9e24 <__lshift>:
   b9e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9e28:	460c      	mov	r4, r1
   b9e2a:	6849      	ldr	r1, [r1, #4]
   b9e2c:	6923      	ldr	r3, [r4, #16]
   b9e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9e32:	68a3      	ldr	r3, [r4, #8]
   b9e34:	4607      	mov	r7, r0
   b9e36:	4691      	mov	r9, r2
   b9e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9e3c:	f108 0601 	add.w	r6, r8, #1
   b9e40:	42b3      	cmp	r3, r6
   b9e42:	db0b      	blt.n	b9e5c <__lshift+0x38>
   b9e44:	4638      	mov	r0, r7
   b9e46:	f7ff fd91 	bl	b996c <_Balloc>
   b9e4a:	4605      	mov	r5, r0
   b9e4c:	b948      	cbnz	r0, b9e62 <__lshift+0x3e>
   b9e4e:	4602      	mov	r2, r0
   b9e50:	4b2a      	ldr	r3, [pc, #168]	; (b9efc <__lshift+0xd8>)
   b9e52:	482b      	ldr	r0, [pc, #172]	; (b9f00 <__lshift+0xdc>)
   b9e54:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9e58:	f7fc fa82 	bl	b6360 <__assert_func>
   b9e5c:	3101      	adds	r1, #1
   b9e5e:	005b      	lsls	r3, r3, #1
   b9e60:	e7ee      	b.n	b9e40 <__lshift+0x1c>
   b9e62:	2300      	movs	r3, #0
   b9e64:	f100 0114 	add.w	r1, r0, #20
   b9e68:	f100 0210 	add.w	r2, r0, #16
   b9e6c:	4618      	mov	r0, r3
   b9e6e:	4553      	cmp	r3, sl
   b9e70:	db37      	blt.n	b9ee2 <__lshift+0xbe>
   b9e72:	6920      	ldr	r0, [r4, #16]
   b9e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9e78:	f104 0314 	add.w	r3, r4, #20
   b9e7c:	f019 091f 	ands.w	r9, r9, #31
   b9e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9e84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9e88:	d02f      	beq.n	b9eea <__lshift+0xc6>
   b9e8a:	f1c9 0e20 	rsb	lr, r9, #32
   b9e8e:	468a      	mov	sl, r1
   b9e90:	f04f 0c00 	mov.w	ip, #0
   b9e94:	681a      	ldr	r2, [r3, #0]
   b9e96:	fa02 f209 	lsl.w	r2, r2, r9
   b9e9a:	ea42 020c 	orr.w	r2, r2, ip
   b9e9e:	f84a 2b04 	str.w	r2, [sl], #4
   b9ea2:	f853 2b04 	ldr.w	r2, [r3], #4
   b9ea6:	4298      	cmp	r0, r3
   b9ea8:	fa22 fc0e 	lsr.w	ip, r2, lr
   b9eac:	d8f2      	bhi.n	b9e94 <__lshift+0x70>
   b9eae:	1b03      	subs	r3, r0, r4
   b9eb0:	3b15      	subs	r3, #21
   b9eb2:	f023 0303 	bic.w	r3, r3, #3
   b9eb6:	3304      	adds	r3, #4
   b9eb8:	f104 0215 	add.w	r2, r4, #21
   b9ebc:	4290      	cmp	r0, r2
   b9ebe:	bf38      	it	cc
   b9ec0:	2304      	movcc	r3, #4
   b9ec2:	f841 c003 	str.w	ip, [r1, r3]
   b9ec6:	f1bc 0f00 	cmp.w	ip, #0
   b9eca:	d001      	beq.n	b9ed0 <__lshift+0xac>
   b9ecc:	f108 0602 	add.w	r6, r8, #2
   b9ed0:	3e01      	subs	r6, #1
   b9ed2:	4638      	mov	r0, r7
   b9ed4:	612e      	str	r6, [r5, #16]
   b9ed6:	4621      	mov	r1, r4
   b9ed8:	f7ff fd88 	bl	b99ec <_Bfree>
   b9edc:	4628      	mov	r0, r5
   b9ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9ee2:	f842 0f04 	str.w	r0, [r2, #4]!
   b9ee6:	3301      	adds	r3, #1
   b9ee8:	e7c1      	b.n	b9e6e <__lshift+0x4a>
   b9eea:	3904      	subs	r1, #4
   b9eec:	f853 2b04 	ldr.w	r2, [r3], #4
   b9ef0:	f841 2f04 	str.w	r2, [r1, #4]!
   b9ef4:	4298      	cmp	r0, r3
   b9ef6:	d8f9      	bhi.n	b9eec <__lshift+0xc8>
   b9ef8:	e7ea      	b.n	b9ed0 <__lshift+0xac>
   b9efa:	bf00      	nop
   b9efc:	000bb3e9 	.word	0x000bb3e9
   b9f00:	000bb470 	.word	0x000bb470

000b9f04 <__mcmp>:
   b9f04:	b530      	push	{r4, r5, lr}
   b9f06:	6902      	ldr	r2, [r0, #16]
   b9f08:	690c      	ldr	r4, [r1, #16]
   b9f0a:	1b12      	subs	r2, r2, r4
   b9f0c:	d10e      	bne.n	b9f2c <__mcmp+0x28>
   b9f0e:	f100 0314 	add.w	r3, r0, #20
   b9f12:	3114      	adds	r1, #20
   b9f14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9f18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b9f1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9f20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9f24:	42a5      	cmp	r5, r4
   b9f26:	d003      	beq.n	b9f30 <__mcmp+0x2c>
   b9f28:	d305      	bcc.n	b9f36 <__mcmp+0x32>
   b9f2a:	2201      	movs	r2, #1
   b9f2c:	4610      	mov	r0, r2
   b9f2e:	bd30      	pop	{r4, r5, pc}
   b9f30:	4283      	cmp	r3, r0
   b9f32:	d3f3      	bcc.n	b9f1c <__mcmp+0x18>
   b9f34:	e7fa      	b.n	b9f2c <__mcmp+0x28>
   b9f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f3a:	e7f7      	b.n	b9f2c <__mcmp+0x28>

000b9f3c <__mdiff>:
   b9f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9f40:	460c      	mov	r4, r1
   b9f42:	4606      	mov	r6, r0
   b9f44:	4611      	mov	r1, r2
   b9f46:	4620      	mov	r0, r4
   b9f48:	4690      	mov	r8, r2
   b9f4a:	f7ff ffdb 	bl	b9f04 <__mcmp>
   b9f4e:	1e05      	subs	r5, r0, #0
   b9f50:	d110      	bne.n	b9f74 <__mdiff+0x38>
   b9f52:	4629      	mov	r1, r5
   b9f54:	4630      	mov	r0, r6
   b9f56:	f7ff fd09 	bl	b996c <_Balloc>
   b9f5a:	b930      	cbnz	r0, b9f6a <__mdiff+0x2e>
   b9f5c:	4b3a      	ldr	r3, [pc, #232]	; (ba048 <__mdiff+0x10c>)
   b9f5e:	4602      	mov	r2, r0
   b9f60:	f240 2132 	movw	r1, #562	; 0x232
   b9f64:	4839      	ldr	r0, [pc, #228]	; (ba04c <__mdiff+0x110>)
   b9f66:	f7fc f9fb 	bl	b6360 <__assert_func>
   b9f6a:	2301      	movs	r3, #1
   b9f6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9f74:	bfa4      	itt	ge
   b9f76:	4643      	movge	r3, r8
   b9f78:	46a0      	movge	r8, r4
   b9f7a:	4630      	mov	r0, r6
   b9f7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9f80:	bfa6      	itte	ge
   b9f82:	461c      	movge	r4, r3
   b9f84:	2500      	movge	r5, #0
   b9f86:	2501      	movlt	r5, #1
   b9f88:	f7ff fcf0 	bl	b996c <_Balloc>
   b9f8c:	b920      	cbnz	r0, b9f98 <__mdiff+0x5c>
   b9f8e:	4b2e      	ldr	r3, [pc, #184]	; (ba048 <__mdiff+0x10c>)
   b9f90:	4602      	mov	r2, r0
   b9f92:	f44f 7110 	mov.w	r1, #576	; 0x240
   b9f96:	e7e5      	b.n	b9f64 <__mdiff+0x28>
   b9f98:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b9f9c:	6926      	ldr	r6, [r4, #16]
   b9f9e:	60c5      	str	r5, [r0, #12]
   b9fa0:	f104 0914 	add.w	r9, r4, #20
   b9fa4:	f108 0514 	add.w	r5, r8, #20
   b9fa8:	f100 0e14 	add.w	lr, r0, #20
   b9fac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b9fb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b9fb4:	f108 0210 	add.w	r2, r8, #16
   b9fb8:	46f2      	mov	sl, lr
   b9fba:	2100      	movs	r1, #0
   b9fbc:	f859 3b04 	ldr.w	r3, [r9], #4
   b9fc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b9fc4:	fa1f f883 	uxth.w	r8, r3
   b9fc8:	fa11 f18b 	uxtah	r1, r1, fp
   b9fcc:	0c1b      	lsrs	r3, r3, #16
   b9fce:	eba1 0808 	sub.w	r8, r1, r8
   b9fd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b9fd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b9fda:	fa1f f888 	uxth.w	r8, r8
   b9fde:	1419      	asrs	r1, r3, #16
   b9fe0:	454e      	cmp	r6, r9
   b9fe2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b9fe6:	f84a 3b04 	str.w	r3, [sl], #4
   b9fea:	d8e7      	bhi.n	b9fbc <__mdiff+0x80>
   b9fec:	1b33      	subs	r3, r6, r4
   b9fee:	3b15      	subs	r3, #21
   b9ff0:	f023 0303 	bic.w	r3, r3, #3
   b9ff4:	3304      	adds	r3, #4
   b9ff6:	3415      	adds	r4, #21
   b9ff8:	42a6      	cmp	r6, r4
   b9ffa:	bf38      	it	cc
   b9ffc:	2304      	movcc	r3, #4
   b9ffe:	441d      	add	r5, r3
   ba000:	4473      	add	r3, lr
   ba002:	469e      	mov	lr, r3
   ba004:	462e      	mov	r6, r5
   ba006:	4566      	cmp	r6, ip
   ba008:	d30e      	bcc.n	ba028 <__mdiff+0xec>
   ba00a:	f10c 0203 	add.w	r2, ip, #3
   ba00e:	1b52      	subs	r2, r2, r5
   ba010:	f022 0203 	bic.w	r2, r2, #3
   ba014:	3d03      	subs	r5, #3
   ba016:	45ac      	cmp	ip, r5
   ba018:	bf38      	it	cc
   ba01a:	2200      	movcc	r2, #0
   ba01c:	441a      	add	r2, r3
   ba01e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ba022:	b17b      	cbz	r3, ba044 <__mdiff+0x108>
   ba024:	6107      	str	r7, [r0, #16]
   ba026:	e7a3      	b.n	b9f70 <__mdiff+0x34>
   ba028:	f856 8b04 	ldr.w	r8, [r6], #4
   ba02c:	fa11 f288 	uxtah	r2, r1, r8
   ba030:	1414      	asrs	r4, r2, #16
   ba032:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   ba036:	b292      	uxth	r2, r2
   ba038:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   ba03c:	f84e 2b04 	str.w	r2, [lr], #4
   ba040:	1421      	asrs	r1, r4, #16
   ba042:	e7e0      	b.n	ba006 <__mdiff+0xca>
   ba044:	3f01      	subs	r7, #1
   ba046:	e7ea      	b.n	ba01e <__mdiff+0xe2>
   ba048:	000bb3e9 	.word	0x000bb3e9
   ba04c:	000bb470 	.word	0x000bb470

000ba050 <__ulp>:
   ba050:	b082      	sub	sp, #8
   ba052:	ed8d 0b00 	vstr	d0, [sp]
   ba056:	9b01      	ldr	r3, [sp, #4]
   ba058:	4912      	ldr	r1, [pc, #72]	; (ba0a4 <__ulp+0x54>)
   ba05a:	4019      	ands	r1, r3
   ba05c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ba060:	2900      	cmp	r1, #0
   ba062:	dd05      	ble.n	ba070 <__ulp+0x20>
   ba064:	2200      	movs	r2, #0
   ba066:	460b      	mov	r3, r1
   ba068:	ec43 2b10 	vmov	d0, r2, r3
   ba06c:	b002      	add	sp, #8
   ba06e:	4770      	bx	lr
   ba070:	4249      	negs	r1, r1
   ba072:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ba076:	ea4f 5021 	mov.w	r0, r1, asr #20
   ba07a:	f04f 0200 	mov.w	r2, #0
   ba07e:	f04f 0300 	mov.w	r3, #0
   ba082:	da04      	bge.n	ba08e <__ulp+0x3e>
   ba084:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ba088:	fa41 f300 	asr.w	r3, r1, r0
   ba08c:	e7ec      	b.n	ba068 <__ulp+0x18>
   ba08e:	f1a0 0114 	sub.w	r1, r0, #20
   ba092:	291e      	cmp	r1, #30
   ba094:	bfda      	itte	le
   ba096:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   ba09a:	fa20 f101 	lsrle.w	r1, r0, r1
   ba09e:	2101      	movgt	r1, #1
   ba0a0:	460a      	mov	r2, r1
   ba0a2:	e7e1      	b.n	ba068 <__ulp+0x18>
   ba0a4:	7ff00000 	.word	0x7ff00000

000ba0a8 <__b2d>:
   ba0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba0aa:	6905      	ldr	r5, [r0, #16]
   ba0ac:	f100 0714 	add.w	r7, r0, #20
   ba0b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   ba0b4:	1f2e      	subs	r6, r5, #4
   ba0b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ba0ba:	4620      	mov	r0, r4
   ba0bc:	f7ff fd48 	bl	b9b50 <__hi0bits>
   ba0c0:	f1c0 0320 	rsb	r3, r0, #32
   ba0c4:	280a      	cmp	r0, #10
   ba0c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; ba144 <__b2d+0x9c>
   ba0ca:	600b      	str	r3, [r1, #0]
   ba0cc:	dc14      	bgt.n	ba0f8 <__b2d+0x50>
   ba0ce:	f1c0 0e0b 	rsb	lr, r0, #11
   ba0d2:	fa24 f10e 	lsr.w	r1, r4, lr
   ba0d6:	42b7      	cmp	r7, r6
   ba0d8:	ea41 030c 	orr.w	r3, r1, ip
   ba0dc:	bf34      	ite	cc
   ba0de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba0e2:	2100      	movcs	r1, #0
   ba0e4:	3015      	adds	r0, #21
   ba0e6:	fa04 f000 	lsl.w	r0, r4, r0
   ba0ea:	fa21 f10e 	lsr.w	r1, r1, lr
   ba0ee:	ea40 0201 	orr.w	r2, r0, r1
   ba0f2:	ec43 2b10 	vmov	d0, r2, r3
   ba0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba0f8:	42b7      	cmp	r7, r6
   ba0fa:	bf3a      	itte	cc
   ba0fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba100:	f1a5 0608 	subcc.w	r6, r5, #8
   ba104:	2100      	movcs	r1, #0
   ba106:	380b      	subs	r0, #11
   ba108:	d017      	beq.n	ba13a <__b2d+0x92>
   ba10a:	f1c0 0c20 	rsb	ip, r0, #32
   ba10e:	fa04 f500 	lsl.w	r5, r4, r0
   ba112:	42be      	cmp	r6, r7
   ba114:	fa21 f40c 	lsr.w	r4, r1, ip
   ba118:	ea45 0504 	orr.w	r5, r5, r4
   ba11c:	bf8c      	ite	hi
   ba11e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ba122:	2400      	movls	r4, #0
   ba124:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ba128:	fa01 f000 	lsl.w	r0, r1, r0
   ba12c:	fa24 f40c 	lsr.w	r4, r4, ip
   ba130:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ba134:	ea40 0204 	orr.w	r2, r0, r4
   ba138:	e7db      	b.n	ba0f2 <__b2d+0x4a>
   ba13a:	ea44 030c 	orr.w	r3, r4, ip
   ba13e:	460a      	mov	r2, r1
   ba140:	e7d7      	b.n	ba0f2 <__b2d+0x4a>
   ba142:	bf00      	nop
   ba144:	3ff00000 	.word	0x3ff00000

000ba148 <__d2b>:
   ba148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba14c:	4689      	mov	r9, r1
   ba14e:	2101      	movs	r1, #1
   ba150:	ec57 6b10 	vmov	r6, r7, d0
   ba154:	4690      	mov	r8, r2
   ba156:	f7ff fc09 	bl	b996c <_Balloc>
   ba15a:	4604      	mov	r4, r0
   ba15c:	b930      	cbnz	r0, ba16c <__d2b+0x24>
   ba15e:	4602      	mov	r2, r0
   ba160:	4b25      	ldr	r3, [pc, #148]	; (ba1f8 <__d2b+0xb0>)
   ba162:	4826      	ldr	r0, [pc, #152]	; (ba1fc <__d2b+0xb4>)
   ba164:	f240 310a 	movw	r1, #778	; 0x30a
   ba168:	f7fc f8fa 	bl	b6360 <__assert_func>
   ba16c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ba170:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ba174:	bb35      	cbnz	r5, ba1c4 <__d2b+0x7c>
   ba176:	2e00      	cmp	r6, #0
   ba178:	9301      	str	r3, [sp, #4]
   ba17a:	d028      	beq.n	ba1ce <__d2b+0x86>
   ba17c:	4668      	mov	r0, sp
   ba17e:	9600      	str	r6, [sp, #0]
   ba180:	f7ff fd06 	bl	b9b90 <__lo0bits>
   ba184:	9900      	ldr	r1, [sp, #0]
   ba186:	b300      	cbz	r0, ba1ca <__d2b+0x82>
   ba188:	9a01      	ldr	r2, [sp, #4]
   ba18a:	f1c0 0320 	rsb	r3, r0, #32
   ba18e:	fa02 f303 	lsl.w	r3, r2, r3
   ba192:	430b      	orrs	r3, r1
   ba194:	40c2      	lsrs	r2, r0
   ba196:	6163      	str	r3, [r4, #20]
   ba198:	9201      	str	r2, [sp, #4]
   ba19a:	9b01      	ldr	r3, [sp, #4]
   ba19c:	61a3      	str	r3, [r4, #24]
   ba19e:	2b00      	cmp	r3, #0
   ba1a0:	bf14      	ite	ne
   ba1a2:	2202      	movne	r2, #2
   ba1a4:	2201      	moveq	r2, #1
   ba1a6:	6122      	str	r2, [r4, #16]
   ba1a8:	b1d5      	cbz	r5, ba1e0 <__d2b+0x98>
   ba1aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ba1ae:	4405      	add	r5, r0
   ba1b0:	f8c9 5000 	str.w	r5, [r9]
   ba1b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ba1b8:	f8c8 0000 	str.w	r0, [r8]
   ba1bc:	4620      	mov	r0, r4
   ba1be:	b003      	add	sp, #12
   ba1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba1c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba1c8:	e7d5      	b.n	ba176 <__d2b+0x2e>
   ba1ca:	6161      	str	r1, [r4, #20]
   ba1cc:	e7e5      	b.n	ba19a <__d2b+0x52>
   ba1ce:	a801      	add	r0, sp, #4
   ba1d0:	f7ff fcde 	bl	b9b90 <__lo0bits>
   ba1d4:	9b01      	ldr	r3, [sp, #4]
   ba1d6:	6163      	str	r3, [r4, #20]
   ba1d8:	2201      	movs	r2, #1
   ba1da:	6122      	str	r2, [r4, #16]
   ba1dc:	3020      	adds	r0, #32
   ba1de:	e7e3      	b.n	ba1a8 <__d2b+0x60>
   ba1e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ba1e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ba1e8:	f8c9 0000 	str.w	r0, [r9]
   ba1ec:	6918      	ldr	r0, [r3, #16]
   ba1ee:	f7ff fcaf 	bl	b9b50 <__hi0bits>
   ba1f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ba1f6:	e7df      	b.n	ba1b8 <__d2b+0x70>
   ba1f8:	000bb3e9 	.word	0x000bb3e9
   ba1fc:	000bb470 	.word	0x000bb470

000ba200 <__ratio>:
   ba200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba204:	4688      	mov	r8, r1
   ba206:	4669      	mov	r1, sp
   ba208:	4681      	mov	r9, r0
   ba20a:	f7ff ff4d 	bl	ba0a8 <__b2d>
   ba20e:	a901      	add	r1, sp, #4
   ba210:	4640      	mov	r0, r8
   ba212:	ec55 4b10 	vmov	r4, r5, d0
   ba216:	f7ff ff47 	bl	ba0a8 <__b2d>
   ba21a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba21e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ba222:	eba3 0c02 	sub.w	ip, r3, r2
   ba226:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba22a:	1a9b      	subs	r3, r3, r2
   ba22c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ba230:	ec51 0b10 	vmov	r0, r1, d0
   ba234:	2b00      	cmp	r3, #0
   ba236:	bfd6      	itet	le
   ba238:	460a      	movle	r2, r1
   ba23a:	462a      	movgt	r2, r5
   ba23c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ba240:	468b      	mov	fp, r1
   ba242:	462f      	mov	r7, r5
   ba244:	bfd4      	ite	le
   ba246:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ba24a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ba24e:	4620      	mov	r0, r4
   ba250:	ee10 2a10 	vmov	r2, s0
   ba254:	465b      	mov	r3, fp
   ba256:	4639      	mov	r1, r7
   ba258:	f7fd fec0 	bl	b7fdc <__aeabi_ddiv>
   ba25c:	ec41 0b10 	vmov	d0, r0, r1
   ba260:	b003      	add	sp, #12
   ba262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba266 <__copybits>:
   ba266:	3901      	subs	r1, #1
   ba268:	b570      	push	{r4, r5, r6, lr}
   ba26a:	1149      	asrs	r1, r1, #5
   ba26c:	6914      	ldr	r4, [r2, #16]
   ba26e:	3101      	adds	r1, #1
   ba270:	f102 0314 	add.w	r3, r2, #20
   ba274:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ba278:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ba27c:	1f05      	subs	r5, r0, #4
   ba27e:	42a3      	cmp	r3, r4
   ba280:	d30c      	bcc.n	ba29c <__copybits+0x36>
   ba282:	1aa3      	subs	r3, r4, r2
   ba284:	3b11      	subs	r3, #17
   ba286:	f023 0303 	bic.w	r3, r3, #3
   ba28a:	3211      	adds	r2, #17
   ba28c:	42a2      	cmp	r2, r4
   ba28e:	bf88      	it	hi
   ba290:	2300      	movhi	r3, #0
   ba292:	4418      	add	r0, r3
   ba294:	2300      	movs	r3, #0
   ba296:	4288      	cmp	r0, r1
   ba298:	d305      	bcc.n	ba2a6 <__copybits+0x40>
   ba29a:	bd70      	pop	{r4, r5, r6, pc}
   ba29c:	f853 6b04 	ldr.w	r6, [r3], #4
   ba2a0:	f845 6f04 	str.w	r6, [r5, #4]!
   ba2a4:	e7eb      	b.n	ba27e <__copybits+0x18>
   ba2a6:	f840 3b04 	str.w	r3, [r0], #4
   ba2aa:	e7f4      	b.n	ba296 <__copybits+0x30>

000ba2ac <__any_on>:
   ba2ac:	f100 0214 	add.w	r2, r0, #20
   ba2b0:	6900      	ldr	r0, [r0, #16]
   ba2b2:	114b      	asrs	r3, r1, #5
   ba2b4:	4298      	cmp	r0, r3
   ba2b6:	b510      	push	{r4, lr}
   ba2b8:	db11      	blt.n	ba2de <__any_on+0x32>
   ba2ba:	dd0a      	ble.n	ba2d2 <__any_on+0x26>
   ba2bc:	f011 011f 	ands.w	r1, r1, #31
   ba2c0:	d007      	beq.n	ba2d2 <__any_on+0x26>
   ba2c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ba2c6:	fa24 f001 	lsr.w	r0, r4, r1
   ba2ca:	fa00 f101 	lsl.w	r1, r0, r1
   ba2ce:	428c      	cmp	r4, r1
   ba2d0:	d10b      	bne.n	ba2ea <__any_on+0x3e>
   ba2d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ba2d6:	4293      	cmp	r3, r2
   ba2d8:	d803      	bhi.n	ba2e2 <__any_on+0x36>
   ba2da:	2000      	movs	r0, #0
   ba2dc:	bd10      	pop	{r4, pc}
   ba2de:	4603      	mov	r3, r0
   ba2e0:	e7f7      	b.n	ba2d2 <__any_on+0x26>
   ba2e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ba2e6:	2900      	cmp	r1, #0
   ba2e8:	d0f5      	beq.n	ba2d6 <__any_on+0x2a>
   ba2ea:	2001      	movs	r0, #1
   ba2ec:	e7f6      	b.n	ba2dc <__any_on+0x30>

000ba2ee <_calloc_r>:
   ba2ee:	b513      	push	{r0, r1, r4, lr}
   ba2f0:	434a      	muls	r2, r1
   ba2f2:	4611      	mov	r1, r2
   ba2f4:	9201      	str	r2, [sp, #4]
   ba2f6:	f7fc f823 	bl	b6340 <_malloc_r>
   ba2fa:	4604      	mov	r4, r0
   ba2fc:	b118      	cbz	r0, ba306 <_calloc_r+0x18>
   ba2fe:	9a01      	ldr	r2, [sp, #4]
   ba300:	2100      	movs	r1, #0
   ba302:	f7fe f8be 	bl	b8482 <memset>
   ba306:	4620      	mov	r0, r4
   ba308:	b002      	add	sp, #8
   ba30a:	bd10      	pop	{r4, pc}
   ba30c:	0000      	movs	r0, r0
	...

000ba310 <nan>:
   ba310:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba318 <nan+0x8>
   ba314:	4770      	bx	lr
   ba316:	bf00      	nop
   ba318:	00000000 	.word	0x00000000
   ba31c:	7ff80000 	.word	0x7ff80000

000ba320 <__ascii_wctomb>:
   ba320:	b149      	cbz	r1, ba336 <__ascii_wctomb+0x16>
   ba322:	2aff      	cmp	r2, #255	; 0xff
   ba324:	bf85      	ittet	hi
   ba326:	238a      	movhi	r3, #138	; 0x8a
   ba328:	6003      	strhi	r3, [r0, #0]
   ba32a:	700a      	strbls	r2, [r1, #0]
   ba32c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   ba330:	bf98      	it	ls
   ba332:	2001      	movls	r0, #1
   ba334:	4770      	bx	lr
   ba336:	4608      	mov	r0, r1
   ba338:	4770      	bx	lr
	...

000ba33c <__aeabi_d2lz>:
   ba33c:	b538      	push	{r3, r4, r5, lr}
   ba33e:	2200      	movs	r2, #0
   ba340:	2300      	movs	r3, #0
   ba342:	4604      	mov	r4, r0
   ba344:	460d      	mov	r5, r1
   ba346:	f7fd ff91 	bl	b826c <__aeabi_dcmplt>
   ba34a:	b928      	cbnz	r0, ba358 <__aeabi_d2lz+0x1c>
   ba34c:	4620      	mov	r0, r4
   ba34e:	4629      	mov	r1, r5
   ba350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba354:	f7fe b860 	b.w	b8418 <__aeabi_d2ulz>
   ba358:	4620      	mov	r0, r4
   ba35a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   ba35e:	f7fe f85b 	bl	b8418 <__aeabi_d2ulz>
   ba362:	4240      	negs	r0, r0
   ba364:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba368:	bd38      	pop	{r3, r4, r5, pc}
   ba36a:	bf00      	nop

000ba36c <dynalib_user>:
   ba36c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   ba37c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   ba38c:	7620 7269 7574 6c61 6c00 6e6f 6967 7574      virtual.longitu
   ba39c:	6564 6c00 7461 7469 6475 0065 2e61 6572     de.latitude.a.re
   ba3ac:	7571 7365 0074 616d 6e69 4c00 6e6f 203a     quest.main.Lon: 
   ba3bc:	4c00 7461 203a 6c00 6261 742e 6568 6377     .Lat: .lab.thewc
   ba3cc:	2e6c 6f63 006d                              l.com.

000ba3d2 <_ZL4font>:
   ba3d2:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ba3e2:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ba3f2:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ba402:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   ba412:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   ba422:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   ba432:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ba442:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   ba452:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   ba462:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   ba472:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   ba482:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   ba492:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   ba4a2:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   ba4b2:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   ba4c2:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   ba4d2:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   ba4e2:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   ba4f2:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ba502:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ba512:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ba522:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   ba532:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ba542:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ba552:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ba562:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ba572:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ba582:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ba592:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ba5a2:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ba5b2:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ba5c2:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ba5d2:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ba5e2:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba5f2:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba602:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba612:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba622:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba632:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba642:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba652:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba662:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   ba672:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba682:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba692:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   ba6a2:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba6b2:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   ba6c2:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   ba6d2:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   ba6e2:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba6f2:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba702:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba712:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba722:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba732:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   ba742:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   ba752:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   ba762:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   ba772:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   ba782:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   ba792:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   ba7a2:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   ba7b2:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   ba7c2:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   ba7d2:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   ba7e2:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   ba7f2:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   ba802:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   ba812:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   ba822:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   ba832:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   ba842:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   ba852:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   ba862:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   ba872:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   ba882:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   ba892:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   ba8a2:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   ba8b2:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   ba8c2:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000ba8d4 <_ZTV12Adafruit_GFX>:
	...
   ba8e4:	4949 000b 6751 000b 40a9 000b 434f 000b     II..Qg...@..OC..
   ba8f4:	4351 000b 4383 000b 435f 000b 4371 000b     QC...C.._C..qC..
   ba904:	4291 000b 434f 000b 457b 000b 4579 000b     .B..OC..{E..yE..
   ba914:	439b 000b 43d9 000b 4413 000b 4459 000b     .C...C...D..YD..
   ba924:	4475 000b 44f9 000b 6564 6166 6c75 2074     uD...D..default 
   ba934:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   ba944:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   ba954:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   ba964:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000ba970 <_ZTVN8particle11SPISettingsE>:
	...
   ba978:	4a85 000b 4a57 000b 4a59 000b               .J..WJ..YJ..

000ba984 <_ZL12splash1_data>:
   ba984:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   ba994:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   ba9a4:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   ba9b4:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   ba9c4:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   ba9d4:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   ba9ec:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   ba9fc:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   baa0c:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   baa1c:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   baa2c:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   baa3c:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   baa4c:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   baa5c:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   baa6c:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   baa7c:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   baa8c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   baa9c:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   baaac:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   baabc:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   baacc:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   baadc:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   baaec:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   baafc:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   bab14:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   bab2c:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   bab3c:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   bab4c:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   bab5c:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   bab6c:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   bab7c:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   bab8c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   bab9c:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   babac:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   babbc:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   babcc:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   babdc:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   babec:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   babfc:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   bac0c:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   bac1c:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   bac2c:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   bac3c:	fdff 5b6b 6adb c0fd                         ..k[.j..

000bac44 <_ZL12splash2_data>:
   bac44:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bac54:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bac64:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bac80:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bac90:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   baca0:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bacb0:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bacc0:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bacd0:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bace0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bacf0:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bad00:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bad10:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bad20:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bad30:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bad40:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bad50:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bad60:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bad70:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bad80:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bad90:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bada0:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   badb0:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   badc0:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   badd8:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bade8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   badf8:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bae08:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bae18:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bae24 <_ZTV16Adafruit_SSD1306>:
	...
   bae2c:	4ad9 000b 4af1 000b 4949 000b 6751 000b     .J...J..II..Qg..
   bae3c:	4b05 000b 434f 000b 4351 000b 4383 000b     .K..OC..QC...C..
   bae4c:	435f 000b 4371 000b 4291 000b 434f 000b     _C..qC...B..OC..
   bae5c:	457b 000b 4ca3 000b 524b 000b 51fd 000b     {E...L..KR...Q..
   bae6c:	4413 000b 4459 000b 4475 000b 44f9 000b     .D..YD..uD...D..

000bae7c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bae7c:	8000 e0c0 f8f0 fefc                         ........

000bae84 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bae84:	0100 0703 1f0f 7f3f                         ......?.

000bae8c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bae8c:	d5ae a880                                   ....

000bae90 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bae90:	00d3 8d40                                   ..@.

000bae94 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bae94:	0020 c8a1                                    ...

000bae98 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bae98:	40db a6a4 af2e                              .@....

000bae9e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bae9e:	02da 8f81                                   ....

000baea2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   baea2:	12da                                         ...

000baea5 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   baea5:	02da                                         ...

000baea8 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   baea8:	0022 21ff 0000 4d04 5451 0454 0600 514d     "..!...MQTT...MQ
   baeb8:	7349 7064 0003 0000                         Isdp....

000baec0 <_ZTV16OledWingAdafruit>:
	...
   baec8:	5cf5 000b 5d15 000b 4949 000b 6751 000b     .\...]..II..Qg..
   baed8:	4b05 000b 434f 000b 4351 000b 4383 000b     .K..OC..QC...C..
   baee8:	435f 000b 4371 000b 4291 000b 434f 000b     _C..qC...B..OC..
   baef8:	457b 000b 4ca3 000b 524b 000b 51fd 000b     {E...L..KR...Q..
   baf08:	4413 000b 4459 000b 4475 000b 44f9 000b     .D..YD..uD...D..

000baf18 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000baf20 <_ZTVN5spark13EthernetClassE>:
	...
   baf28:	63f7 000b 63ed 000b 63e3 000b 63d9 000b     .c...c...c...c..
   baf38:	63cd 000b 63c1 000b 662d 000b 6635 000b     .c...c..-f..5f..
   baf48:	63b5 000b 63ad 000b 63a3 000b 6399 000b     .c...c...c...c..
   baf58:	6665 000b                                   ef..

000baf5c <_ZTV7TwoWire>:
	...
   baf64:	6415 000b 645f 000b 6437 000b 6417 000b     .d.._d..7d...d..
   baf74:	643f 000b 6447 000b 644f 000b 6457 000b     ?d..Gd..Od..Wd..

000baf84 <_ZTV9IPAddress>:
	...
   baf8c:	64d1 000b 64c1 000b 64c3 000b 7061 0070     .d...d...d..app.

000baf9c <_ZTVN5spark12NetworkClassE>:
	...
   bafa4:	65ed 000b 65f7 000b 6601 000b 660b 000b     .e...e...f...f..
   bafb4:	6615 000b 6621 000b 662d 000b 6635 000b     .f..!f..-f..5f..
   bafc4:	663d 000b 6649 000b 6651 000b 665b 000b     =f..If..Qf..[f..
   bafd4:	6665 000b 616e 006e 6e69 0066 766f 0066     ef..nan.inf.ovf.
   bafe4:	002e                                        ..

000bafe6 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bafe6:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   baff6:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..
	...

000bb008 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb010:	6d2d 000b 6d51 000b 7283 000b 6d5f 000b     -m..Qm...r.._m..
   bb020:	6d31 000b                                   1m..

000bb024 <_ZTV9TCPClient>:
	...
   bb02c:	6ddd 000b 6e11 000b 6ca9 000b 6cc3 000b     .m...n...l...l..
   bb03c:	7119 000b 6ced 000b 6f8f 000b 6d21 000b     .q...l...o..!m..
   bb04c:	7021 000b 6e61 000b 6fbd 000b 71cd 000b     !p..an...o...q..
   bb05c:	6f5d 000b 6d23 000b 6cd5 000b 6d65 000b     ]o..#m...l..em..
   bb06c:	6e41 000b 5925 252d 2d6d 6425 2554 3a48     An..%Y-%m-%dT%H:
   bb07c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bb08c <_ZTV11USARTSerial>:
	...
   bb094:	729d 000b 7309 000b 72e1 000b 6751 000b     .r...s...r..Qg..
   bb0a4:	72b1 000b 72cd 000b 72bf 000b 72db 000b     .r...r...r...r..
   bb0b4:	729f 000b 72a3 000b                         .r...r..

000bb0bc <_ZTV9USBSerial>:
	...
   bb0c4:	7347 000b 73af 000b 7385 000b 6751 000b     Gs...s...s..Qg..
   bb0d4:	7377 000b 7349 000b 7359 000b 73a9 000b     ws..Is..Ys...s..
   bb0e4:	7369 000b 7341 000b                         is..As..

000bb0ec <_ZTVN5spark9WiFiClassE>:
	...
   bb0f4:	74a7 000b 749d 000b 7493 000b 7449 000b     .t...t...t..It..
   bb104:	7487 000b 747b 000b 662d 000b 6635 000b     .t..{t..-f..5f..
   bb114:	746f 000b 7467 000b 745d 000b 7453 000b     ot..gt..]t..St..
   bb124:	6665 000b                                   ef..

000bb128 <_ZSt7nothrow>:
	...

000bb129 <_ZTSSt19_Sp_make_shared_tag>:
   bb129:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bb139:	6572 5f64 6174 0067 0000                     red_tag....

000bb144 <_ZTISt19_Sp_make_shared_tag>:
   bb144:	b184 000b b129 000b                         ....)...

000bb14c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb14c:	b1e4 000b b158 000b b208 000b               ....X.......

000bb158 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb158:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bb168:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bb178:	0045 0000                                   E...

000bb17c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb17c:	0000 0000 b14c 000b 7839 000b 784d 000b     ....L...9x..Mx..
   bb18c:	79e1 000b 79e1 000b 78b7 000b 77f9 000b     .y...y...x...w..
   bb19c:	789f 000b 7861 000b 782b 000b               .x..ax..+x..

000bb1a8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb1a8:	b1e4 000b b1b4 000b b14c 000b               ........L...

000bb1b4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb1b4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bb1c4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bb1d4:	666e 456f 0000 0000                         nfoE....

000bb1dc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb1dc:	0000 0000 b1a8 000b 78e1 000b 78f5 000b     .........x...x..
   bb1ec:	79e1 000b 79e1 000b 78b7 000b 77f9 000b     .y...y...x...w..
   bb1fc:	79b5 000b 7941 000b 7909 000b               .y..Ay...y..

000bb208 <_ZTISt9type_info>:
   bb208:	b184 000b b210 000b                         ........

000bb210 <_ZTSSt9type_info>:
   bb210:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bb220:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bb230:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bb240:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bb250:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bb260:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bb270:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bb280:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   bb290:	7974 0000                                   ty..

000bb294 <fpi.1>:
   bb294:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bb2a4:	0000 0000                                   ....

000bb2a8 <fpinan.0>:
   bb2a8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bb2c0 <tinytens>:
   bb2c0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bb2d0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bb2e0:	6f43 64ac 0628 1168                         Co.d(.h.

000bb2e8 <_ctype_>:
   bb2e8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb2f8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb308:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb318:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb328:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb338:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb348:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb358:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb368:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bb3e8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bb3f8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bb408:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bb418:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bb428:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bb438:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bb448:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bb458:	632e 0000                                   .c..

000bb45c <_C_numeric_locale>:
   bb45c:	afe4 000b a3bc 000b e464 2003 0043 4f50     ........d.. C.PO
   bb46c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bb47c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bb48c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bb49c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bb4ac:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bb4bc:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bb4cc:	0000 0000                                   ....

000bb4d0 <__mprec_bigtens>:
   bb4d0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bb4e0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bb4f0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bb4f8 <__mprec_tens>:
   bb4f8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bb508:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bb518:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bb528:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bb538:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bb548:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bb558:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bb568:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bb578:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bb588:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bb598:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bb5a8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bb5b8:	9db4 79d9 7843 44ea                         ...yCx.D

000bb5c0 <p05.0>:
   bb5c0:	0005 0000 0019 0000 007d 0000               ........}...

000bb5cc <link_const_variable_data_end>:
   bb5cc:	000b4255 	.word	0x000b4255
   bb5d0:	000b6389 	.word	0x000b6389
   bb5d4:	000b6401 	.word	0x000b6401
   bb5d8:	000b65dd 	.word	0x000b65dd
   bb5dc:	000b673d 	.word	0x000b673d
   bb5e0:	000b6a0d 	.word	0x000b6a0d
   bb5e4:	000b6c85 	.word	0x000b6c85
   bb5e8:	000b7289 	.word	0x000b7289
   bb5ec:	000b74b1 	.word	0x000b74b1
